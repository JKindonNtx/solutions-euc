############################################################################################################################
#
#												Created by
#												Jake Norman
#									         Nutanix Senior Consultant
#
#										    Use at your own peril
#									   No warranties or support will be provided
#
#							   Please comment out any section/line that you do not want
#
############################################################################################################################

#region Change Log
<#
						Change Log

					v.01	Operating System Optimizations
		4/30/21		v.02	Corrected double quote mismatches
							Added more context to script sections for easy identification
							Added Application Optimization Section including template
								Google Chrome
								Microsoft Edge Chromium
								Adobe Reader DC
		5/3/21		v.03	Changed Application Installed Query syntax
							Added more Application Optimizations
								Mozilla Firefox
								Java Runtime Environment
								Microsoft Edge Chromium
		5/5/21		v.04	Changed Microsoft Store uninstallation
							Changed Services to Array methodology
							Added Autologger Disabling
							Added Restart to end of script
		5/7/21		v.05	Changed Versioning
							Added Display Name Description to Services
							Added Windows Optional Features Disabling, with a description of each optional feature
							Added some much needed error checking for Generic VDI registry key additions section
							Additional Scheduled Tasks optimized
							Added more Application Optimizations
								Microsoft OneDrive
							Changed Restart Methodology (Disabled by Default)
		5/18/21 	v.06	Optimized Microsoft.XboxGameOverlay AppxPackage (Different from Microsoft.XboxGamingOverlay)
							Added more Application Optimizations
								Microsoft Teams
							Additional Services optimized
							Added Graphical Interface option for Provisioned Appx Packages removal (Disabled by Default)
							Added Graphical Interface option for Disabling Services (Disabled by Default)
							Added Graphical Interface option for Disabling Scheduled Tasks (Disabled by Default)
							Changed Scheduled Tasks to Array methodology
							More clarification between sections
							More clarification for documentation vs. script
		5/27/21 	v.07	Added Logging Output to File for Script
							Corrected Decision Tree for Services Optimization
							Corrected Google Chrome Application Optimzation syntax & location errors
							Corrected syntax error for Recovery Partition Removal
		6/17/21 	v.08	Added Microsoft Update Health Service Optimization
							Overall, Section, and Sub-Section Progress Bars added
		6/30/21 	v.09	In ForEach Loop Progress Bars added
							Start-Transcript used to capture additional logging information, including non-terminating error logging
							Script & Syntax Cleanup
							Local File Cleanup Methodology changed
							Frame specific exclusions added to Local File Cleanup
							Fixed location for logging for Frame FGA
		7/6/21		v.10	Defrag Disabled by Default, with explanations as to WHEN to use it and WHY you don't
							Small Syntax changes to some Arrays
							Additional Services optimized (48)
							Additional Scheduled Tasks optimized (2)
							Additional UWP applications optimized (4)
							Added Generic VDI Settings Optimizations (3)
							Added 32bit NGEN Updates
							Added Execution of Queued Items for both 32bit and 64bit NGEN Updates
		7/8/21		v.10.1	Removed and Warned against disabling the Connected Devices Platform Service
		7/19/21		v.10.2	Removed and Warned against disabling the Capability Access Manager Service
		7/27/21		v.11	Entire script consolidation
							Addition of Regions to allow easier PowerShell ISE section management
							Syntax and Script flow corrections
							Change Active Setup to Array Methodology
							Restructure of methodology, naming, placement and ID numbering of Write-Progress bars
							Adding Microsoft Edge First Run Experience Optimization
							Added Known Issues List
		10/21/21	v.11.1	Changes to Services for Network Connection Broker to address issue Ops004
							Changed Logging If/Then to address issue Ops001
							Found and disabled Service (ClipSVC) that caused issue Ops003
							Corrected math syntax for Generic VDI Settings Optimizations progress bars
		3/3/22		v.12	Syntax Changes to Functions
							Logging Changes:
								Single log location that is agnostic of environment
								Log file name now contains date/time format
							Revert Actions Preparation:
								Script will capture current status of Services, Scheduled Tasks, Active Setup,
								Autologgers and Optional Features and place them as registry values under
								HKLM:\SOFTWARE\Nutanix\WOSTT for future use.
									Services section now captures current Service StartupType
									Active Setup section now captures current Stubpath information
									Scheduled Tasks section now captures current Task Start setting
									Autologger section now captures current Start setting
									Optional Features section now captures current Feature State setting
							Active Setup code reworked to allow for Revert Actions to work
							Scheduled Tasks code reworked to allow for Revert Actions to work
							Additional Optional Features Disabled
							RebootRequiredStatus variable added for future use
							EndRegions now contain region information for easier script location determination
							Added Verbose logging to key actions for Transcript Logging purposes
							StopWatch added to script that outputs script runtime to Transcript
							Added --- line breaks to the Transcript for easier identification of actions
							Minor spelling and syntax corrections
		5/2/22		v.12.1	Revert Actions Preparation:
								Generic VDI Settings section now captures current registry settings
							Generic VDI Settings section code reworked to allow for Revert Actions to work
							Additional logging in Generic VDI Settings section
							Added Delivery Optimization Service to services being optimized
							Changed Syntax in Revert Logging Section
							Microsoft Edge Optimizations moved to OS Optimizations out of Application Optimizations:
								Services
								Scheduled Tasks
								Active Setup
								Generic VDI Settings
							Change to OS identification registry values to account for changes in 20H2 and newer
							Moved DISM optimizations to earlier in the script to bypass pending reboots error caused by subsequent optimizations
							Syntax changes in Optional Features Progress Bars for clarity
		6/2/22		v.13	Revert Actions:
								Additional variables implemented
								Revert action Progress Bars created
								Implement action Progress Bars changed
								Log File Name different if Revert Actions taken
								Revert actions implemented for:
									Optional Features
									Services
									Scheduled Tasks
									Active Setup
									Autologgers
								Messaging added for actions which can not be reverted:
									DISM
									UWP Applications
									File Cleanup
									Storage Optimizations
									.NET Updates
									Housekeeping Optimizations
							Transcript messaging for each section has been greatly improved
							Verification process implemented for:
								Optimization:
									UWP
									Optional Features
									Services
									Scheduled Tasks
									Active Setup
									Autologgers
							Optional Features section:
								Moved before Services and Scheduled Tasks to allow for proper Revert action sequence
								Now checks Optional Feature state prior to optimizing due to Optional Feature dependencies
							UWP Applications section:
								Condensed
								UWP Applications section now checks UWP App exists before optimizing it
								Disabled UWP Application removal Progress Bars
								Additional Logging provided
							Scheduled Tasks section:
								Corrected math error
								Scheduled Tasks section now checks to see if Scheduled Task exists before optimizing it
								Running Scheduled Tasks now stopped prior to disabling to allow for proper revert actions
								Section reworked to account for Tasks that have the same name, but different locations
								Additional Logging provided
							Reboot\Restart parameter added:
								WOSTT will now restart if "Reboot" or "Restart" parameter is used and the script determines a restart is necessary.
							Sectional StopWatches added for:
								DISM
								UWP Applications
								Optional Features
								Services
								Scheduled Tasks
								Active Setup
								Autologgers
								Generic VDI Optimizations
								Application Optimizations
								Generic OS Optimizations
							Microsoft OneDrive Optimizations moved to OS Optimizations out of Application Optimizations:
								Scheduled Tasks
							Coding added for future revert actions:
								Generic VDI Optimizations
								Application Optimizations
							Generic VDI Optimizations added for Windows 10:
								Disables News and Interests in Taskbar
								Disables Search Highlights in Search Bar
							DISM based optimizations are now Windows 10 only
							Syntax rework in Generic VDI section to correct issue Ops007
							Microsoft Office & Skype Application Optimization section removed out to allow for further testing
							CleanMgr now fully automated, no user interaction necessary
							RebootRequiredStatus variable changed to RestartRequiredStatus
							Minor coding changes for consolidation purposes
							Minor spelling and syntax corrections
#>
#endregion Change Log

#region Known Issues List
<#
		Date Identified		Version Identified		Version Fixed		Issue Id		Priority		Description of Issue	
		7/27/21				v.11					v.11.1				Ops001			High			Logging location doesn't account for MF2 upgraded to FGA and defaults logs to MF2 location.
		7/27/21				v.11										Ops002			Low				PowerShell language for the removal of the Recovery Partition doesn't work on Server 2016.
		8/23/21				v.11					v.11.1				Ops003			High			Script causing periodic Sysprep issues, breaking the image for Frame DJI.
		8/30/21				v.11					v.11.1				Ops004			Medium			Disabling the CDPS Service prior to active user account will cause the Display Settings module of SystemSettings.exe to crash.
																										CDPS is dependency of Network Connection Broker.
		8/30/21				v.11					v.11.1				Ops005			Medium			Disabling App Readiness service prior to active user account can cause issues with UWP Applications and Windows Updates that require a reboot.
		8/4/22				v.13										Ops006			Low				Using PowerShell ISE, the "Implementing UWP Applications Optimizations" Progress Bar doesn't complete properly.
		8/11/22				v.12.1					v.13				Ops007			High			Bug in syntax would prevent, in certain circumstances, Generic VDI optimizations from implementing correctly.
#>
#endregion Known Issues List

#region Parameters
param (
    [Parameter(Position = 0)][string]$A,
    [Parameter(Position = 1)][string]$R
)
If (!$A) {
    $A = "Light"
}

#endregion Parameters

Set-ExecutionPolicy Unrestricted -Force
$ErrorActionPreference = "SilentlyContinue"

#region Start Full Script Timer

$FullScriptStopWatch = [System.Diagnostics.Stopwatch]::StartNew()

#endregion Start Full Script Timer

#region Restart Required Status

$RestartRequiredStatus = "False"

#endregion Restart Required Status

#region Script Version

$WOSTTVersion = "v.13"

#endregion Script Version

#region Functions
<#
	Funtions Only
	In This
	Section
#>

Function Get-TimeStamp {
	return "Date:{0:MM/dd/yy} | Time:{0:HH:mm:ss}" -f (Get-Date)
}
Function Get-TimeStampForFile {
	return "{0:MM-dd-yy} {0:HH-mm-ss}" -f (Get-Date)
}

<#
	End of Functions
#>
#endregion Functions

#region Logging Setup

If ($A -ne "Revert") {
	$LogFile = "WOSTT $(Get-TimeStampForFile).log"
}
If ($A -eq "Revert") {
	$LogFile = "Revert WOSTT $(Get-TimeStampForFile).log"
}

$RootLocation = "$env:programdata\WindowsOptimizations\"

$LogFileLocation = $RootLocation + "Log\"

$Log = $LogFileLocation + $LogFile

Write-Output "Logging set to $LogFileLocation"

If (-not(Test-Path -Path $LogFile)) {
    If (-not(Test-Path -Path $LogFileLocation)) {
        If (-not(Test-Path -Path $RootLocation)) {
			New-Item -Path $RootLocation -ItemType "Directory" -Force
		}
		New-Item -Path $LogFileLocation -ItemType "Directory"
	}
    New-Item -Path $LogFileLocation -Name $LogFile -ItemType "File" -Value "$(Get-TimeStamp)            Starting Windows Operating System Tuning Tool Logging`n"
}
Else {
    If (-not(Test-Path -Path "$env:programdata\WindowsOptimizations")) {
		New-Item -Path $LogFileLocation -ItemType "Directory"
		New-Item -Path $LogFileLocation -Name $LogFile -ItemType "File" -Value "$(Get-TimeStamp)            Starting Windows Operating System Tuning Tool Logging`n"
	}
}

write-output $Log

Start-Transcript $Log -Append

#endregion Logging Setup

#region Verifying Revert Status
If ($A -ne "Revert") {
	"$(Get-TimeStamp)		You have chosen to proceed normally with optimizations."
	$RunType = "Normal"
}
If ($A -eq "Revert") {
	If (-not(Get-ItemProperty -Path "HKLM:\SOFTWARE\Nutanix\WOSTT" -Name "Last Run Normal")) {
		"$(Get-TimeStamp)		WOSTT has not been run previously, therefore can not revert.  Quitting script."
		Exit
	}
	"$(Get-TimeStamp)		You have chosen to revert actions previously implemented by this script."
	$RunType = "Revert"
}
"-----------------------------------------------------------------------"
#endregion Verifying Revert Status

#region Logging for Revert Actions
<#
	Revert Actions Logging
	Setup Only In
	This Section
#>
"$(Get-TimeStamp)		Creating registry locations for revert actions."
New-Item -Path "Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Nutanix\WOSTT" -ErrorAction SilentlyContinue -Verbose
$RevertRoot = "Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Nutanix\WOSTT"
#New-Item -Path "$RevertRoot\UWP Apps\Provisioned" -ErrorAction SilentlyContinue -Verbose
#$RevertUWPP = "$RevertRoot\UWP Apps\Provisioned"
New-Item -Path "$RevertRoot\Services" -ErrorAction SilentlyContinue -Verbose
$RevertSer = "$RevertRoot\Services"
New-Item -Path "$RevertRoot\Scheduled Tasks" -ErrorAction SilentlyContinue -Verbose
$RevertST = "$RevertRoot\Scheduled Tasks"
New-Item -Path "$RevertRoot\Active Setup" -ErrorAction SilentlyContinue -Verbose
$RevertAS = "$RevertRoot\Active Setup"
New-Item -Path "$RevertRoot\Active Setup\64bit" -ErrorAction SilentlyContinue -Verbose
$RevertAS64 = "$RevertRoot\Active Setup\64bit"
New-Item -Path "$RevertRoot\Active Setup\32bit" -ErrorAction SilentlyContinue -Verbose
$RevertAS32 = "$RevertRoot\Active Setup\32bit"
New-Item -Path "$RevertRoot\Autologger" -ErrorAction SilentlyContinue -Verbose
$RevertAL = "$RevertRoot\Autologger"
New-Item -Path "$RevertRoot\Optional Features" -ErrorAction SilentlyContinue -Verbose
$RevertOpt = "$RevertRoot\Optional Features"
New-Item -Path "$RevertRoot\Generic VDI Settings" -ErrorAction SilentlyContinue -Verbose
$RevertGenVDI = "$RevertRoot\Generic VDI Settings"
New-Item -Path "$RevertRoot\Applications" -ErrorAction SilentlyContinue -Verbose
$RevertApps = "$RevertRoot\Applications"
#endregion Logging for Revert Actions

#region Marking the Time $ Date
Set-ItemProperty -Path "HKLM:\SOFTWARE\Nutanix\WOSTT" -Name "Last Run $RunType" -Value $(Get-TimeStamp)
#endregion Marking the Time $ Date

#region Marking the Script Version
Set-ItemProperty -Path "HKLM:\SOFTWARE\Nutanix\WOSTT" -Name "Script Version" -Value $WOSTTVersion
#region Marking the Script Version

<#
	End of Revert Actions Logging Setup
#>

If ($A -ne "Revert") {
    Write-Progress -Activity "Implementing Windows Optimizations" -Id 0 "Overall Progress" -PercentComplete 0
}
If ($A -eq "Revert") {
    Write-Progress -Activity "Reverting Windows Optimizations" -Id 1 "Overall Progress" -PercentComplete 0
}

#region OS Version Check
<#
	Checks the version of the OS
#>
$OSVersion = Get-ItemProperty "HKLM:\Software\Microsoft\Windows NT\CurrentVersion"
$OSMajorVersion = $OSVersion.ProductName
$OSMinorVersion = $OSVersion.DisplayVersion
"-----------------------------------------------------------------------"
"$(Get-TimeStamp)		Windows Version is $OSMajorVersion $OSMinorVersion."
"-----------------------------------------------------------------------"
#endregion OS Version Check

If ($A -ne "Revert") {
	"$(Get-TimeStamp)		Let the Implementation"
}
If ($A -eq "Revert") {
	"$(Get-TimeStamp)		Let the reversion"
}
"					of $OSMajorVersion $OSMinorVersion"
"					Optimizations begin."
"-----------------------------------------------------------------------"

$OpsCounter = 0
$Ops = 19
$OSOps = 7
#endregion Cleanup Tool Configuration

#region DISM Optimizations
If ($OSMajorVersion -like "*Windows 10*") {
	#region Start DISM Script Timer
	$DISMScriptStopWatch = [System.Diagnostics.Stopwatch]::StartNew()
	#endregion Start DISM Script Timer
	If ($A -ne "Revert") {
		Write-Progress -Activity "Implementing DISM Optimizations." -Id 3012 -ParentId 0 -PercentComplete 0
		"$(Get-TimeStamp)		Implementing DISM Optimizations."
		dism /Online /Cleanup-Image /StartComponentCleanup /ResetBase
		"$(Get-TimeStamp)		DISM Optimizations are complete."
	}
	If ($A -eq "Revert") {
		"$(Get-TimeStamp)		DISM Optimizations are not revertable."
	}
	"-----------------------------------------------------------------------"
	Write-Progress -Activity "Implementing DISM Optimizations." -Id 3012 -ParentId 0 -PercentComplete 100 -Completed
	#region Stop DISM Script Timer
	$DISMScriptElapsedMins = $DISMScriptStopWatch.Elapsed.Minutes
	$DISMScriptElapsedSecs = $DISMScriptStopWatch.Elapsed.Seconds
	$DISMScriptStopWatch.Stop()
	#endregion Stop DISM Script Timer
}
#endregion DISM Optimizations

#region UWP Application Optimizations
<#
	Uninstalls Provisioned and Installed UWP Apps
	Windows Desktop OS Only!
	See https://www.nutanix.com/blog/windows-os-optimization-essentials-part-21 for more information
	UWP Application Optimizations are not revertable
#>
#region Start UWP Script Timer
$UWPScriptStopWatch = [System.Diagnostics.Stopwatch]::StartNew()
#endregion Start UWP Script Timer
If ($A -ne "Revert") {
	"$(Get-TimeStamp)		Beginning Of Implementing"
}
If ($A -eq "Revert") {
	"$(Get-TimeStamp)		Beginning Of Reverting"
}
"					$OSMajorVersion $OSMinorVersion"
"					UWP Application Optimizations."
"-----------------------------------------------------------------------"
If ($A -ne "Revert") {
	If ($OSMajorVersion -like "*Windows 10*") {
		Write-Progress -Activity "Implementing UWP Applications Optimizations" -Id 101 -ParentId 10 -PercentComplete 0
		#region List of UWP Applications
		#Get-ProvisionedAppXPackage -Online|Select DisplayName
		$UWPApps = @(
			"Microsoft.BingWeather",
			"Microsoft.DesktopAppInstaller",
			"Microsoft.GetHelp",
			"Microsoft.Getstarted",
			"Microsoft.Messaging",
			"Microsoft.Microsoft3DViewer",
			"Microsoft.HEIFImageExtension",
			"Microsoft.MicrosoftOfficeHub",
			"Microsoft.MicrosoftSolitaireCollection",
			"Microsoft.MicrosoftStickyNotes",
			"Microsoft.MixedReality.Portal",
			"Microsoft.MSPaint",
			"Microsoft.Office.OneNote",
			"Microsoft.OneConnect",
			"Microsoft.People",
			"Microsoft.Print3D",
			"Microsoft.ScreenSketch",
			"Microsoft.SkypeApp",
			"Microsoft.StorePurchaseApp",
			"Microsoft.Wallet",
			"Microsoft.WebMediaExtensions",
			"Microsoft.WebpImageExtension",
			"Microsoft.Windows.Photos",
			"Microsoft.WindowsAlarms",
			"Microsoft.WindowsCamera",
			"Microsoft.windowscommunicationsapps",
			"Microsoft.WindowsFeedbackHub",
			"Microsoft.WindowsMaps",
			"Microsoft.WindowsSoundRecorder",
			# (DISABLED BY DEFAULT)"Microsoft.WindowsStore", #Microsoft Store can be very hard to install again after it is removed.  Only optimize the Microsoft Store if you fully understand the ramifications. https://docs.microsoft.com/en-us/troubleshoot/windows-client/shell-experience/cannot-remove-uninstall-or-reinstall-microsoft-store-app
			"Microsoft.Xbox.TCUI",
			"Microsoft.XboxApp",
			"Microsoft.XboxGameOverlay",
			"Microsoft.XboxGamingOverlay",
			"Microsoft.XboxIdentityProvider",
			"Microsoft.XboxSpeechToTextOverlay",
			"Microsoft.YourPhone",
			"Microsoft.ZuneMusic",
			"Microsoft.ZuneVideo"
		)
		#endregion List of UWP Applications
		Write-Progress -Activity "Implementing UWP Provisioned Applications Optimizations" -Id 1011 -ParentId 101 -PercentComplete 0
		Write-Progress -Activity "Implementing UWP Installed Applications Optimizations" -Id 1012 -ParentId 101 -PercentComplete 0
		$UWPAppsCounter = 0
		ForEach ($UWPApp in $UWPApps) {
			"$(Get-TimeStamp)		Attempting to optimize $UWPApp UWP Application."
			"$(Get-TimeStamp)		Checking existence of the $UWPApp Provisioned UWP Application."
			If (Get-AppXProvisionedPackage -Online | where DisplayName -eq $UWPApp) {
				"$(Get-TimeStamp)		$UWPApp UWP Provisioned Application found.  First attempt at optimizing Provisioned Application."
				Get-AppXProvisionedPackage -Online | where DisplayName -eq $UWPApp | Remove-AppxProvisionedPackage -Online -Verbose
				"$(Get-TimeStamp)		Verifying optimization of $UWPApp UWP Provisioned Application."
				If (Get-AppXProvisionedPackage -Online | where DisplayName -eq $UWPApp) {
					"$(Get-TimeStamp)			$UWPApp UWP Provisioned Application verified not optimized.  Second attempt at optimizing Provisioned Application."
					Get-AppXProvisionedPackage -Online | where DisplayName -eq $UWPApp | Remove-AppxProvisionedPackage -Online -Verbose
					"$(Get-TimeStamp)		Verifying optimization of $UWPApp UWP Provisioned Application."
					If (Get-AppXProvisionedPackage -Online | where DisplayName -eq $UWPApp) {
						"$(Get-TimeStamp)		$UWPApp UWP Provisioned Application verified not optimized.  Logging and continuing with script."
						"$(Get-TimeStamp)		Non-Terminating Error: Unable to optimize $UWPApp UWP Provisioned Application."
						$Continue = $false
					}
					Else {
						"$(Get-TimeStamp)		$UWPApp UWP Provisioned Application verified optimized."
					}
				}
				Else {
					"$(Get-TimeStamp)		$UWPApp UWP Provisioned Application verified optimized."
				}
			}
			Else {
				"$(Get-TimeStamp)		$UWPApp UWP Provisioned Application not found.  Logging and continuing with script."
			}
			Write-Progress -Activity "Implementing UWP Provisioned Applications Optimizations" -Id 1011 -ParentId 101 -PercentComplete (($UWPAppsCounter / $UWPApps.count) * 100)
			"$(Get-TimeStamp)		Checking existence of the $UWPApp Installed UWP Application."
			If ($Continue -ne $false) {
				If (Get-AppxPackage -Name $UWPApp -AllUsers) {
					"$(Get-TimeStamp)		$UWPApp UWP Installed Application found.  Identifying number of UWP Installed Applications."
					$UWPAppCount = (Get-AppxPackage -Name $UWPApp -AllUsers).count
					If ($UWPAppCount -gt "1") {
						"$(Get-TimeStamp)		Found multiple $UWPApp UWP Installed Applications."
						$UWPAppPackages = (Get-AppxPackage -Name $UWPApp -AllUsers).PackageFullName
						ForEach ($UWPAppPackage in $UWPAppPackages) {
							"$(Get-TimeStamp)		First attempt at optimizing $UWPAppPackage UWP Installed Application."
							$ProgressPreference = "SilentlyContinue"
							Remove-AppxPackage -Package $UWPAppPackage -Verbose
							$ProgressPreference = "Continue"
							"$(Get-TimeStamp)		Verifying optimization of $UWPAppPackage UWP Installed Application."
							If ((Get-AppxPackage -Name $UWPApp -AllUsers).PackageFullName -eq $UWPAppPackage) {
								"$(Get-TimeStamp)		$UWPAppPackage UWP Installed Application verified not optimized.  Second attempt at optimizing Installed Application."
								$ProgressPreference = "SilentlyContinue"
								Remove-AppxPackage -Package $UWPAppPackage -Verbose
								$ProgressPreference = "Continue"
								"$(Get-TimeStamp)		Verifying optimization of $UWPAppPackage UWP Installed Application."
								If ((Get-AppxPackage -Name $UWPApp -AllUsers).PackageFullName -eq $UWPAppPackage) {
									"$(Get-TimeStamp)		$UWPAppPackage UWP Installed Application verified not optimized.  Logging and continuing with script."
									"$(Get-TimeStamp)		Non-Terminating Error: Unable to optimize $UWPAppPackage UWP Installed Application."
								}
							}
							Else {
								"$(Get-TimeStamp)		The $UWPAppPackage UWP Installed Application verified optimized."
							}
						}
					}
					ElseIf ($UWPAppCount -eq "1") {
						"$(Get-TimeStamp)		Found a single $UWPApp UWP Installed Application.  Attempting to optimize Installed Application."
						$ProgressPreference = "SilentlyContinue"
						Get-AppxPackage -Name $UWPApp -AllUsers | Remove-AppxPackage -Verbose
						$ProgressPreference = "Continue"
						"$(Get-TimeStamp)		Verifying optimization of $UWPApp UWP Installed Application."
						If (Get-AppxPackage -Name $UWPApp -AllUsers) {
							"$(Get-TimeStamp)		$UWPApp UWP Installed Application verified not optimized.  Second attempt at optimizing Installed Application."
							$ProgressPreference = "SilentlyContinue"
							Get-AppxPackage -Name $UWPApp -AllUsers | Remove-AppxPackage -Verbose
							$ProgressPreference = "Continue"
							"$(Get-TimeStamp)		Verifying optimization of $UWPApp UWP Installed Application."
							If (Get-AppxPackage -Name $UWPApp -AllUsers) {
								"$(Get-TimeStamp)		$UWPApp UWP Installed Application verified not optimized.  Logging and continuing with script."
								"$(Get-TimeStamp)		Non-Terminating Error: Unable to optimize $UWPApp UWP Installed Application."
							}
						}
						Else {
							"$(Get-TimeStamp)		The $UWPApp UWP Installed Application has been verified optimized."
						}
					}
				}
				Else {
					"$(Get-TimeStamp)		$UWPApp UWP Installed Application not found.  Logging and continuing with script."
				}
			}
			"$(Get-TimeStamp)		The $UWPApp UWP Application has been optimized."
			"-----------------------------------------------------------------------"
			Write-Progress -Activity "Implementing UWP Installed Applications Optimizations" -Id 1012 -ParentId 101 -PercentComplete (($UWPAppsCounter / $UWPApps.count) * 100)
			Clear-Variable -Name "Continue" -ErrorAction SilentlyContinue
			Start-Sleep 1
			Write-Progress -Activity "Implementing UWP Applications Optimizations" -Id 101 -ParentId 10 -PercentComplete (($UWPAppsCounter / $UWPApps.count) * 100)
			$UWPAppsCounter++
		}
		Write-Progress -Activity "Implementing UWP Provisioned Applications Optimizations" -Id 1011 -ParentId 101 -PercentComplete 100 -Completed
		Write-Progress -Activity "Implementing UWP Installed Applications Optimizations" -Id 1012 -ParentId 101 -PercentComplete 100 -Completed
		Start-Sleep 1
		Write-Progress -Activity "Implementing UWP Applications Optimizations" -Id 101 -ParentId 10 -PercentComplete 100 -Completed
	}
	<#
		If you wish to use a multi-selectable GUI to remove AppxProvisioned Packages, use the below.
		Get-AppxProvisionedPackage -Online | Out-GridView -PassThru | Remove-AppxProvisionedPackage -Online
	#>
	"$(Get-TimeStamp)		End Of Implementing"
}
If ($A -eq "Revert") {
	"$(Get-TimeStamp)		UWP Application Optimizations are not revertable."
	"-----------------------------------------------------------------------"
	"$(Get-TimeStamp)		End Of Reverting"
}
"					$OSMajorVersion $OSMinorVersion"
"					UWP Application Optimizations."
"-----------------------------------------------------------------------"
#region Stop UWP Script Timer
$UWPScriptElapsedMins = $UWPScriptStopWatch.Elapsed.Minutes
$UWPScriptElapsedSecs = $UWPScriptStopWatch.Elapsed.Seconds
$UWPScriptStopWatch.Stop()
#endregion Stop UWP Script Timer

$OSOpsCounter++
If ($A -ne "Revert") {
	Write-Progress -Activity "Implementing Windows Operating System Optimizations" -Id 10 -ParentId 0 -PercentComplete (($OSOpsCounter / $OSOps) * 100)
}
If ($A -eq "Revert") {
	Write-Progress -Activity "Reverting Windows Operating System Optimizations" -Id 11 -ParentId 1 -PercentComplete (($OSOpsCounter / $OSOps) * 100)
}
$OPsCounter++
If ($A -ne "Revert") {
	Write-Progress -Activity "Implementing Windows Optimizations" -Id 0 -PercentComplete (($OpsCounter / $Ops) * 100)
}
If ($A -eq "Revert") {
	Write-Progress -Activity "Reverting Windows Optimizations" -Id 1 -PercentComplete (($OpsCounter / $Ops) * 100)
}
#endregion UWP Application Optimizations

#region Optional Feature Optimizations
<#
	Disabling Windows Optional Features
#>
#region Start Optional Feature Script Timer
$OFScriptStopWatch = [System.Diagnostics.Stopwatch]::StartNew()
#endregion Start Optional Feature Script Timer
If ($A -ne "Revert") {
	Write-Progress -Activity "Implementing Windows Optional Feature Optimizations" -Id 102 -ParentId 10 -PercentComplete 0
	"$(Get-TimeStamp)		Beginning Of Implementing"
}
If ($A -eq "Revert") {
	Write-Progress -Activity "Reverting Windows Optional Feature Optimizations" -Id 112 -ParentId 11 -PercentComplete 0
	"$(Get-TimeStamp)		Beginning Of Reverting"
}
"					$OSMajorVersion $OSMinorVersion"
"					Optional Feature Optimizations."
"-----------------------------------------------------------------------"
$OptionalFeatures = @(
	"Printing-XPSServices-Features",						#	Disables the Print to XPS Printer								Provides support for Microsoft's ".XPS" file format, which is an alternative to Adobe's ."PDF" format.
	"WorkFolders-Client",									#	Disables Work Folders Client									This tool allows you to synchronize folders from a corporate network to your computer.
	"Internet-Explorer-Optional-amd64"						#	Disables Internet Explorer 11									Internet Explorer 11 Browser.  Do not disable if alternate primary browser application is not installed.
	"MediaPlayback",										#	Disables MediaPlayback											MediaPlayback controls media features such as Windows Media Player
	"MSRDC-Infrastructure",									#	Disables MS Remote Differential Compression (RDC) API Support	Supports RDC in third-party applications
	"WindowsMediaPlayer"									#	Disables Windows Media Player									The default media player that's bundled with Windows. If you do not use it to play music or videos, you can remove it.	
)
$OptionalFeatureCounter = 0
If ($A -ne "Revert") {
	Write-Progress -Activity "Implementing Windows 10 Optional Feature Optimizations" -Id 1021 -ParentId 102 -PercentComplete 0
	"$(Get-TimeStamp)		Logging each current Optional Features State."
	ForEach ($OptionalFeature in $OptionalFeatures) {
		If (Get-WindowsOptionalFeature -Online -FeatureName $OptionalFeature) {
			$OptionalFeatureState = (Get-WindowsOptionalFeature -Online -FeatureName $OptionalFeature -ErrorAction SilentlyContinue).State
			If ($OptionalFeatureState -eq "Enabled" -or $OptionalFeatureState -eq "EnablePending") {
				"$(Get-TimeStamp)		The $OptionalFeature Optional Feature is currently enabled."
				$OptionalFeatureState = "Enabled"
			}
			ElseIf ($OptionalFeatureState -eq "Disabled" -or $OptionalFeatureState -eq "DisablePending") {
				"$(Get-TimeStamp)		The $OptionalFeature Optional Feature is currently disabled.  Logging and continuing with script."
				$OptionalFeatureState = "Disabled"
				$Continue = $false
			}
			Set-ItemProperty -Path "HKLM:\Software\Nutanix\WOSTT\Optional Features" -Name $OptionalFeature -Type "String" -Value $OptionalFeatureState -ErrorAction SilentlyContinue -Verbose
		}
	}
	"-----------------------------------------------------------------------"
	ForEach ($OptionalFeature in $OptionalFeatures) {
		"$(Get-TimeStamp)		Attempting to optimize the $OptionalFeature Optional Feature."
		"$(Get-TimeStamp)		Checking existence of the $OptionalFeature Optional Feature."
		If (Get-WindowsOptionalFeature -Online -FeatureName $OptionalFeature) {
			"$(Get-TimeStamp)		Found the $OptionalFeature Optional Feature."
			If ($Continue -ne $false) {
				"$(Get-TimeStamp)		First attempt at disabling the $OptionalFeature Optional Feature."
				$ProgressPreference = "SilentlyContinue"
				Disable-WindowsOptionalFeature -Online -FeatureName $OptionalFeature -Remove -NoRestart -ErrorAction SilentlyContinue -Verbose
				$ProgressPreference = "Continue"
				"$(Get-TimeStamp)		Verifying optimization of the $OptionalFeature Optional Feature."
				$OptionalFeatureState = (Get-WindowsOptionalFeature -Online -FeatureName $OptionalFeature -ErrorAction SilentlyContinue).State
				If ($OptionalFeatureState -eq "Enabled" -or $OptionalFeatureState -eq "EnablePending") {
					"$(Get-TimeStamp)		The $OptionalFeature Optional Feature is still enabled.  Second attempt at disabling Optional Feature."
					$ProgressPreference = "SilentlyContinue"
					Disable-WindowsOptionalFeature -Online -FeatureName $OptionalFeature -Remove -NoRestart -ErrorAction SilentlyContinue -Verbose
					$ProgressPreference = "Continue"
					"$(Get-TimeStamp)		Verifying optimization of $OptionalFeature OptionalFeature."
					$OptionalFeatureState = (Get-WindowsOptionalFeature -Online -FeatureName $OptionalFeature -ErrorAction SilentlyContinue).State
					If ($OptionalFeatureState -eq "Enabled" -or $OptionalFeatureState -eq "EnablePending") {
						"$(Get-TimeStamp)		The $OptionalFeature Optional Feature is still enabled.  Logging and continuing with script."
						"$(Get-TimeStamp)		Non-Terminating Error: Unable to optimize the $OptionalFeature Optional Feature."
					}
					Else {
						"$(Get-TimeStamp)		The $OptionalFeature Optional Feature verified optimized."
					}
				}
				Else {
					"$(Get-TimeStamp)		The $OptionalFeature Optional Feature verified optimized."
				}
				"$(Get-TimeStamp)		The $OptionalFeature Optional Feature has been optimized."
			}
			Else {
				"$(Get-TimeStamp)		The $OptionalFeature Optional Feature is already disabled.  Logging and continuing script."
			}
		}
		Else {
			"$(Get-TimeStamp)		The $OptionalFeature Optional Feature was not found.  Logging and continuing with script."
		}
		"-----------------------------------------------------------------------"
		$OptionalFeatureCounter++
		$OptionalFeatureRestartRequired = (Get-WindowsOptionalFeature -Online -FeatureName $OptionalFeature -ErrorAction SilentlyContinue).RestartRequired
		If ($OptionalFeatureRestartRequired -eq "Required") {
			$RestartRequiredStatus = "True"
		}
		Clear-Variable -Name "Continue" -ErrorAction SilentlyContinue
		Write-Progress -Activity "Implementing Windows 10 Optional Feature Optimizations" -Id 1021 -ParentId 102 -PercentComplete (($OptionalFeatureCounter / $OptionalFeatures.count) * 100)
	}
	Write-Progress -Activity "Implementing Windows 10 Optional Feature Optimizations" -Id 1021 -ParentId 102 -PercentComplete 100 -Completed
}
If ($A -eq "Revert") {
	Write-Progress -Activity "Reverting Windows 10 Optional Feature Optimizations" -Id 1121 -ParentId 112 -PercentComplete 0
	ForEach($OptionalFeature in $OptionalFeatures) {
		"$(Get-TimeStamp)		Attempting to revert optimizations for the $OptionalFeature Optional Feature."
		"$(Get-TimeStamp)		Checking existence of the $OptionalFeature Optional Feature."
		If (Get-WindowsOptionalFeature -Online -FeatureName $OptionalFeature) {
			"$(Get-TimeStamp)		The $OptionalFeature Optional Feature found.  Checking Optional Feature state."
			$CurrentOptionalFeatureState = (Get-WindowsOptionalFeature -Online -FeatureName $OptionalFeature -ErrorAction SilentlyContinue).State
			$PrevOptionalFeatureState = Get-ItemPropertyValue -Path $RevertOpt -Name $OptionalFeature
			If ($CurrentOptionalFeatureState -eq "DisablePending") {
				$CurrentOptionalFeatureState = "Disabled"
			}
			If ($CurrentOptionalFeatureState -eq "EnablePending") {
				$CurrentOptionalFeatureState = "Enabled"
			}
			"$(Get-TimeStamp)		The current $OptionalFeature Optional Feature State is $CurrentOptionalFeatureState.  The previous Optional Feature State was $PrevOptionalFeatureState."
			If ($PrevOptionalFeatureState -eq "Disabled") {
				"$(Get-TimeStamp)		The $OptionalFeature Optional Feature was previously disabled.  Logging and continuing script."
			}
			ElseIf ($CurrentOptionalFeatureState -ne $PrevOptionalFeatureState) {
				"$(Get-TimeStamp)		The current $OptionalFeature Optional Feature state does not match the previous Optional Feature state.  First attempt at reverting the optimization for the $OptionalFeature Optional Feature."
				$ProgressPreference = "SilentlyContinue"
				Enable-WindowsOptionalFeature -Online -FeatureName $OptionalFeature -NoRestart -ErrorAction SilentlyContinue -Verbose
				$ProgressPreference = "Continue"
				"$(Get-TimeStamp)		Verifying reversion of the $OptionalFeature Optional Feature."
				$CurrentOptionalFeatureState = (Get-WindowsOptionalFeature -Online -FeatureName $OptionalFeature -ErrorAction SilentlyContinue).State
				If ($CurrentOptionalFeatureState -eq "DisablePending") {
					$CurrentOptionalFeatureState = "Disabled"
				}
				If ($CurrentOptionalFeatureState -eq "EnablePending") {
					$CurrentOptionalFeatureState = "Enabled"
				}
				If ($CurrentOptionalFeatureState -ne $PrevOptionalFeatureState) {
					"$(Get-TimeStamp)		The current $OptionalFeature Optional Feature state still does not match the previous Optional Feature state.  Second attempt at reverting the optimization for the $OptionalFeature Optional Feature."
					$ProgressPreference = "SilentlyContinue"
					Enable-WindowsOptionalFeature -Online -FeatureName $OptionalFeature -NoRestart -ErrorAction SilentlyContinue -Verbose
					$ProgressPreference = "Continue"
					"$(Get-TimeStamp)		Verifying reversion of the $OptionalFeature Optional Feature."
					$CurrentOptionalFeatureState = (Get-WindowsOptionalFeature -Online -FeatureName $OptionalFeature -ErrorAction SilentlyContinue).State
					If ($CurrentOptionalFeatureState -eq "DisablePending") {
						$CurrentOptionalFeatureState = "Disabled"
					}
					If ($CurrentOptionalFeatureState -eq "EnablePending") {
						$CurrentOptionalFeatureState = "Enabled"
					}
					If ($CurrentOptionalFeatureState -ne $PrevOptionalFeatureState) {
						"$(Get-TimeStamp)		The current $OptionalFeature Optional Feature state still does not match the previous Optional Feature state.  Logging and continuing with script."
						"$(Get-TimeStamp)		Non-Terminating Error: Unable to revert the optimization for the $OptionalFeature Optional Feature."
					}
					Else {
						"$(Get-TimeStamp)		The $OptionalFeature Optional Feature optimization has been verified as reverted."
					}
				}
				Else {
					"$(Get-TimeStamp)		The $OptionalFeature Optional Feature optimization has been verified as reverted."
				}
			}
			Else {
				"$(Get-TimeStamp)		The $OptionalFeature Optional Feature optimization has been verified as reverted."
			}
			"$(Get-TimeStamp)		The $OptionalFeature Optional Feature optimization has been reverted."
		}
		Else {
			"$(Get-TimeStamp)		The $OptionalFeature Optional was not found.  Logging and continuing with script."
		}
		"-----------------------------------------------------------------------"
		$OptionalFeatureCounter++
		$OptionalFeatureRestartRequired = (Get-WindowsOptionalFeature -Online -FeatureName $OptionalFeature -ErrorAction SilentlyContinue).RestartRequired
		If ($OptionalFeatureRestartRequired -eq "Required") {
			$RestartRequiredStatus = "True"
		}
		Write-Progress -Activity "Reverting Windows 10 Optional Feature Optimizations" -Id 1121 -ParentId 112 -PercentComplete (($OptionalFeatureCounter / $OptionalFeatures.count) * 100)
	}
	Write-Progress -Activity "Reverting Windows 10 Optional Feature Optimizations" -Id 1121 -ParentId 112 -PercentComplete 100 -Completed
}
If ($A -ne "Revert") {
	Write-Progress -Activity "Implementing Windows Optional Feature Optimizations" -Id 102 -ParentId 10 -PercentComplete 50
}
If ($A -eq "Revert") {
	Write-Progress -Activity "Reverting Windows Optional Feature Optimizations" -Id 112 -ParentId 11 -PercentComplete 50
}
If ($OSMajorVersion -like "*Windows Server*") {
	$SOptionalFeatures = @(
		"Microsoft-Windows-Printing-XPSServices-Package",		#	Disables the Print to XPS Printer			Provides support for Microsoft's ".XPS" file format, which is an alternative to Adobe's."PDF" format.
		"Microsoft-Hyper-V-Common-Drivers-Package",				#	Disables Hyper-V Common Drivers
		"Microsoft-Hyper-V-Guest-Integration-Drivers-Package"	#	Disables Hyper-V Guest Integration Services
	)
	$OptionalFeatureCounter = 0
	If ($A -ne "Revert") {
		Write-Progress -Activity "Implementing Windows Server Optional Feature Optimizations" -Id 1022 -ParentId 102 -PercentComplete 0
		"$(Get-TimeStamp)		Logging each current Optional Features State."
		ForEach ($OptionalFeature in $OptionalFeatures) {
			If (Get-WindowsOptionalFeature -Online -FeatureName $OptionalFeature) {
				$OptionalFeatureState = (Get-WindowsOptionalFeature -Online -FeatureName $OptionalFeature -ErrorAction SilentlyContinue).State
				If ($OptionalFeatureState -eq "Enabled" -or $OptionalFeatureState -eq "EnablePending") {
					"$(Get-TimeStamp)		The $OptionalFeature Optional Feature is currently enabled."
					$OptionalFeatureState = "Enabled"
				}
				ElseIf ($OptionalFeatureState -eq "Disabled" -or $OptionalFeatureState -eq "DisablePending") {
					"$(Get-TimeStamp)		The $OptionalFeature Optional Feature is currently disabled.  Logging and continuing with script."
					$OptionalFeatureState = "Disabled"
					$Continue = $false
				}
				Set-ItemProperty -Path "HKLM:\Software\Nutanix\WOSTT\Optional Features" -Name $OptionalFeature -Type "String" -Value $OptionalFeatureState -ErrorAction SilentlyContinue -Verbose
			}
		}
		"-----------------------------------------------------------------------"
		ForEach($OptionalFeature in $S16OptionalFeatures) {
			"$(Get-TimeStamp)		Checking existence of the $OptionalFeature Optional Feature."
			If ($Continue -ne $false) {
				"$(Get-TimeStamp)		First attempt at disabling the $OptionalFeature Optional Feature."
				$ProgressPreference = "SilentlyContinue"
				Disable-WindowsOptionalFeature -Online -FeatureName $OptionalFeature -Remove -NoRestart -ErrorAction SilentlyContinue -Verbose
				$ProgressPreference = "Continue"
				"$(Get-TimeStamp)		Verifying optimization of the $OptionalFeature OptionalFeature."
				$OptionalFeatureState = (Get-WindowsOptionalFeature -Online -FeatureName $OptionalFeature -ErrorAction SilentlyContinue).State
				If ($OptionalFeatureState -eq "Enabled" -or $OptionalFeatureState -eq "EnablePending") {
					"$(Get-TimeStamp)		The $OptionalFeature Optional Feature is still enabled.  Second attempt at disabling Optional Feature."
					$ProgressPreference = "SilentlyContinue"
					Disable-WindowsOptionalFeature -Online -FeatureName $OptionalFeature -Remove -NoRestart -ErrorAction SilentlyContinue -Verbose
					$ProgressPreference = "Continue"
					"$(Get-TimeStamp)		Verifying optimization of the $OptionalFeature OptionalFeature."
					$OptionalFeatureState = (Get-WindowsOptionalFeature -Online -FeatureName $OptionalFeature -ErrorAction SilentlyContinue).State
					If ($OptionalFeatureState -eq "Enabled" -or $OptionalFeatureState -eq "EnablePending") {
						"$(Get-TimeStamp)		The $OptionalFeature Optional Feature is still enabled.  Logging and continuing with script."
						"$(Get-TimeStamp)		Non-Terminating Error: Unable to optimize the $OptionalFeature Optional Feature."
					}
					Else {
						"$(Get-TimeStamp)		The $OptionalFeature Optional Feature verified optimized."
					}
				}
				Else {
					"$(Get-TimeStamp)		The $OptionalFeature Optional Feature verified optimized."
				}
			}
		}
		Else {
			"$(Get-TimeStamp)		The $OptionalFeature Optional not found.  Logging and continuing with script."
		}
		"-----------------------------------------------------------------------"
		$OptionalFeatureCounter++
		$OptionalFeatureRestartRequired = (Get-WindowsOptionalFeature -Online -FeatureName $OptionalFeature -ErrorAction SilentlyContinue).restartrequired
		If ($OptionalFeatureRestartRequired -eq "Required") {
			$RestartRequiredStatus = "True"
		}
		Clear-Variable -Name "Continue" -ErrorAction SilentlyContinue
		Write-Progress -Activity "Implementing Windows Server Optional Feature Optimizations" -Id 1022 -ParentId 102 -PercentComplete (($OptionalFeatureCounter / $S16OptionalFeatures.count) * 100)
	}
	Write-Progress -Activity "Implementing Windows Server Optional Feature Optimizations" -Id 1022 -ParentId 102 -PercentComplete 100 -Completed
	If ($A -eq "Revert") {
		Write-Progress -Activity "Reverting Windows Server Optional Feature Optimizations" -Id 1122 -ParentId 112 -PercentComplete 0
		ForEach($OptionalFeature in $SOptionalFeatures) {
			"$(Get-TimeStamp)		Attempting to revert optimizations for the $OptionalFeature Optional Feature."
			"$(Get-TimeStamp)		Checking existence of the $OptionalFeature Optional Feature."
			If (Get-WindowsOptionalFeature -Online -FeatureName $OptionalFeature) {
				"$(Get-TimeStamp)		The $OptionalFeature Optional Feature found.  Checking Optional Feature state."
				$CurrentOptionalFeatureState = (Get-WindowsOptionalFeature -Online -FeatureName $OptionalFeature -ErrorAction SilentlyContinue).State
				$PrevOptionalFeatureState = Get-ItemPropertyValue -Path $RevertOpt -Name $OptionalFeature
				If ($CurrentOptionalFeatureState -eq "DisablePending") {
					$CurrentOptionalFeatureState = "Disabled"
				}
				If ($CurrentOptionalFeatureState -eq "EnablePending") {
					$CurrentOptionalFeatureState = "Enabled"
				}
				"$(Get-TimeStamp)		The current $OptionalFeature Optional Feature State is $CurrentOptionalFeatureState.  The previous Optional Feature State was $PrevOptionalFeatureState."
				If ($PrevOptionalFeatureState -eq "Disabled") {
					"$(Get-TimeStamp)		The $OptionalFeature Optional Feature was previously disabled.  Logging and continuing script."
				}
				ElseIf ($CurrentOptionalFeatureState -ne $PrevOptionalFeatureState) {
					"$(Get-TimeStamp)		The current $OptionalFeature Optional Feature state does not match the previous Optional Feature state.  First attempt at reverting the optimization for the Optional Feature."
					$ProgressPreference = "SilentlyContinue"
					Enable-WindowsOptionalFeature -Online -FeatureName $OptionalFeature -NoRestart -ErrorAction SilentlyContinue -Verbose
					$ProgressPreference = "Continue"
					"$(Get-TimeStamp)		Verifying reversion of the $OptionalFeature Optional Feature."
					$CurrentOptionalFeatureState = (Get-WindowsOptionalFeature -Online -FeatureName $OptionalFeature -ErrorAction SilentlyContinue).State
					If ($CurrentOptionalFeatureState -eq "DisablePending") {
						$CurrentOptionalFeatureState = "Disabled"
					}
					If ($CurrentOptionalFeatureState -eq "EnablePending") {
						$CurrentOptionalFeatureState = "Enabled"
					}
					If ($CurrentOptionalFeatureState -ne $PrevOptionalFeatureState) {
						"$(Get-TimeStamp)		The current $OptionalFeature Optional Feature state still does not match the previous Optional Feature state.  Second attempt at reverting the optimization for the Optional Feature."
						$ProgressPreference = "SilentlyContinue"
						Enable-WindowsOptionalFeature -Online -FeatureName $OptionalFeature -NoRestart -ErrorAction SilentlyContinue -Verbose
						$ProgressPreference = "Continue"
						"$(Get-TimeStamp)		Verifying reversion of the $OptionalFeature Optional Feature."
						$CurrentOptionalFeatureState = (Get-WindowsOptionalFeature -Online -FeatureName $OptionalFeature -ErrorAction SilentlyContinue).State
						If ($CurrentOptionalFeatureState -eq "DisablePending") {
							$CurrentOptionalFeatureState = "Disabled"
						}
						If ($CurrentOptionalFeatureState -eq "EnablePending") {
							$CurrentOptionalFeatureState = "Enabled"
						}
						If ($CurrentOptionalFeatureState -ne $PrevOptionalFeatureState) {
							"$(Get-TimeStamp)		The current $OptionalFeature Optional Feature state still does not match the previous Optional Feature state.  Logging and continuing with script."
							"$(Get-TimeStamp)		Non-Terminating Error: Unable to revert the optimization for the $OptionalFeature Optional Feature."
						}
						Else {
							"$(Get-TimeStamp)		The $OptionalFeature Optional Feature optimization has been verified as reverted."
						}
					}
					Else {
						"$(Get-TimeStamp)		The $OptionalFeature Optional Feature optimization has been verified as reverted."
					}
				}
				Else {
					"$(Get-TimeStamp)		The $OptionalFeature Optional Feature current and previous state match.  Logging and continuing with script."
				}
				"$(Get-TimeStamp)		The $OptionalFeature Optional Feature optimization has been reverted."
			}
			Else {
				"$(Get-TimeStamp)		The $OptionalFeature Optional Feature was not found.  Logging and continuing with script."
			}
			"-----------------------------------------------------------------------"
			$SOptionalFeatureCounter++
			$OptionalFeatureRestartRequired = (Get-WindowsOptionalFeature -Online -FeatureName $OptionalFeature -ErrorAction SilentlyContinue).RestartRequired
			If ($OptionalFeatureRestartRequired -eq "Required") {
				$RestartRequiredStatus = "True"
			}
			Write-Progress -Activity "Reverting Windows Server Optional Feature Optimizations" -Id 1122 -ParentId 112 -PercentComplete (($OptionalFeatureCounter / $SOptionalFeatures.count) * 100)
		}
		Write-Progress -Activity "Reverting Windows Server Optional Feature Optimizations" -Id 1122 -ParentId 112 -PercentComplete 100 -Completed
	}
}
If ($A -ne "Revert") {
	Write-Progress -Activity "Implementing Windows Optional Feature Optimizations" -Id 102 -ParentId 10 -PercentComplete 100 -Completed
	"$(Get-TimeStamp)		End Of Implementing"
}
If ($A -eq "Revert") {
	Write-Progress -Activity "Reverting Windows Optional Feature Optimizations" -Id 112 -ParentId 11 -PercentComplete 100 -Completed
	"$(Get-TimeStamp)		End Of Reverting"
}
"					$OSMajorVersion $OSMinorVersion"
"					Optional Feature Optimizations."
"-----------------------------------------------------------------------"
#region Stop Optional Feature Script Timer
$OFScriptElapsedMins = $OFScriptStopWatch.Elapsed.Minutes
$OFScriptElapsedSecs = $OFScriptStopWatch.Elapsed.Seconds
$OFScriptStopWatch.Stop()
#endregion Stop Optional Feature Script Timer

$OSOpsCounter++
If ($A -ne "Revert") {
	Write-Progress -Activity "Implementing Windows Operating System Optimizations" -Id 10 -ParentId 0 -PercentComplete (($OSOpsCounter / $OSOps) * 100)
}
If ($A -eq "Revert") {
Write-Progress -Activity "Reverting Windows Operating System Optimizations" -Id 11 -ParentId 1 -PercentComplete (($OSOpsCounter / $OSOps) * 100)
}
$OPsCounter++
If ($A -ne "Revert") {
	Write-Progress -Activity "Implementing Windows Optimizations" -Id 0 -PercentComplete (($OpsCounter / $Ops) * 100)
}
If ($A -eq "Revert") {
	Write-Progress -Activity "Reverting Windows Optimizations" -Id 1 -PercentComplete (($OpsCounter / $Ops) * 100)
}
#endregion Optional Feature Optimizations

#region Service Optimizations
<#
	Stops and Disables Services
	Array Methodology
	See https://www.nutanix.com/blog/windows-os-optimization-essentials-part-3-services-and-scheduled-tasks for more information
#>
#region Start Services Script Timer
$SerScriptStopWatch = [System.Diagnostics.Stopwatch]::StartNew()
#endregion Start Services Script Timer
If ($A -ne "Revert") {
	Write-Progress -Activity "Implementing Windows Service Optimizations" -Id 103 -ParentId 10 -PercentComplete 0
	"$(Get-TimeStamp)		Beginning Of Implementing"
}
If ($A -eq "Revert") {
	Write-Progress -Activity "Reverting Windows Service Optimizations" -Id 113 -ParentId 11 -PercentComplete 0
	"$(Get-TimeStamp)		Beginning Of Reverting"
}
"					$OSMajorVersion $OSMinorVersion"
"					Service Optimizations."
"-----------------------------------------------------------------------"
<#
	The below Services pertain to Windows 10 and Server 2016/2019
#>
$Services = @(
	"AJRouter",											#	AllJoyn Router Service
#	DISABLED BY DEFAULT	"AppReadiness",					#	App Readiness										Do not Disable this Service.  Can cause issues with UWP Applications and Windows Updates.		Listed here for informational purposes
	"AppIDSvc",											#	Application Identity
	"ALG",												#	Application Layer Gateway Service
	"AppMgmt",											#	Application Management
#	(DISABLED BY DEFAULT) "AppXSvc",					#	Appx Deployment Service								Disable this service ONLY if you remove ALL UWP Applications					Listed here for informational purposes
	"bthserv",											#	Bluetooth Support Service
#	(DISABLED BY DEFAULT) "ClipSVC",					#	Client License Service								Disable this service ONLY if you are not Domain Joining the Workload VMs		Listed here for informational purposes
	"CloudDrive",										#	CloudDrive
#	DISABLED BY DEFAULT "CDPSvc",						#	Connected Devices Platform Service					Do not Disable this Service.  Causes issues with Display Settings window.		Listed here for informational purposes
    "DiagTrack",										#	Connected User Experiences and Telemetry			Disabling this service can potentially cause issues with Microsoft Defender ATP
	"PimIndexMaintenanceSvc*",							#	Contact Data										Service Name and Display Name change per user
	"DoSvc",											#	Delivery Optimization Service						Disabling this service will prevent the OS from downloading updates from other PCs that are on the same network
	"DeviceAssociationService",							#	Device Association Service
	"DmEnrollmentSvc",									#	Device Management Enrollment Service
    "dmwappushservice",									#	Device Management Wireless Application Protocol (WAP) Push message Routing Service on Windows 10; dmwappushservice on Windows Server
	"DPS",												#	Diagnostic Policy Service
	"WdiServiceHost",									#	Diagnostic Service Host
	"WdiSystemHost",									#	Diagnostic System Host
	"TrkWks",											#	Distributed Link Tracking Client					https://docs.microsoft.com/en-us/windows/win32/fileio/distributed-link-tracking-and-object-identifiers?redirectedfrom=MSDN
	"MSDTC",											#	Distributed Transaction Coordinator					https://en.wikipedia.org/wiki/Microsoft_Distributed_Transaction_Coordinator
	"MapsBroker",										#	Downloaded Maps Manager
	"EFS",												#	Encrypting File System
	"EntAppSvc",										#	Enterprise App Management Service
	"fdPHost",											#	Function Discovery Provider Host
    "FDResPub",											#	Function Discovery Resource Publication
    "lfsvc",											#	Geolocation Service
	"HvHost",											#	HV Host Service
	"vmickvpexchange",									#	Hyper-V Data Exchange Service
	"vmicguestinterface",								#	Hyper-V Guest Service Interface
	"vmicshutdown",										#	Hyper-V Guest Shutdown Service
	"vmicheartbeat",									#	Hyper-V Heartbeat Service
	"vmicvmsession",									#	Hyper-V PowerShell Direct Service
	"vmicrdv",											#	Hyper-V Remote Desktop Virtualization Service
	"vmictimesync",										#	Hyper-V Time Synchronization Service
	"vmicvss",											#	Hyper-V Volume Shadow Copy Requestor
	"SharedAccess",										#	Internet Connection Sharing							https://en.wikipedia.org/wiki/Internet_Connection_Sharing
	"iphlpsvc",											#	IP Helper											https://docs.microsoft.com/en-us/windows/win32/iphlp/about-ip-helper
	"wlidsvc",											#	Microsoft Account Sign-in Assistant					Disable only if you aren't using Microsoft Account sign ins
	"AppVclient",										#	Microsoft App-V Client								Disable if you don't use Microsoft App-V for virtual applications
	"MicrosoftEdgeElevationService",					#	Microsoft Edge Elevation Service
	"edgeupdate",										#	Microsoft Edge Update Service
	"edgeupdatem",										#	Microsoft Edge Update Service
    "MSiSCSI",											#	Microsoft iSCSI Initiator Service
    "swprv",											#	Microsoft Software Shadow Copy Provider
	"uhssvc",											#	Microsoft Update Health Service
#	DISABLED BY DEFAULT "NcbService",					#	Network Connection Broker							Do not Disable this Service.  Connected Devices Platform Service is dependency.		Listed here for informational purposes.
    "CscService",										#	Offline Files
	"defragsvc",										#	Optimize drives (Defrag Service)
    "PhoneSvc",											#	Phone Service
	"WPDBusEnum",										#	Portable Device Enumerator Service					Used for enforcing Group Policy management of removable mass-storage devices
	"wercplsupport",									#	Problem Reports Control Panel Support
	"PcaSvc",											#	Program Compatibility Assistant Service
	"SensorDataService",								#	Sensor Data Service
	"SensrSvc",											#	Sensor Monitoring Service
	"SSDPSRV",											#	SSDP Discovery
    "SysMain",											#	SysMain on Windows 10; Superfetch on Windows Server
	"Themes",											#	Themes												Disable if you don't wish to use Themes	
	"UsoSvc",											#	Update Orchestrator Service							Part of the Windows Update Process
	"upnphost",											#	UPnP Device Host
	"icssvc",											#	Windows Mobile Hotspot Service
    "Wsearch",											#	Windows Search
    "wuauserv",											#	Windows Update										Part of the Windows Update Process
    "XblAuthManager",									#	XblAuthManager
    "XblGameSave",										#	XblGaveSave
    "XboxNetApiSvc"										#	XboxNetApiSvc
)
$ServicesCounter = 0
If ($A -ne "Revert") {
	Write-Progress -Activity "Implementing Windows Service General Optimizations" -Id 1031 -ParentId 103 -PercentComplete 0
	ForEach($Service in $Services) {
		If ($Service.Contains('*')) {
			$Service = (Get-ItemProperty -Path "HKLM:\System\CurrentControlSet\Services\$Service").PSChildName
			$ServiceArray = $Service.split(" ")
			$Service = $ServiceArray[0]
		}
		"$(Get-TimeStamp)		Attempting to optimize the $Service Service."
		"$(Get-TimeStamp)		Checking existence of the $Service Service."
		If (Get-Service -Name $Service) {
			"$(Get-TimeStamp)		Logging the current $Service Service State."
			$ServiceStart = Get-ItemPropertyValue -Path "HKLM:\System\CurrentControlSet\Services\$Service" -Name "Start"
			If ($ServiceStart -eq "4") {
				"$(Get-TimeStamp)		The $Service Service is already disabled.  Logging and continuing with script."
				Set-ItemProperty -Path "HKLM:\Software\Nutanix\WOSTT\Services" -Name $Service -Type "DWord" -Value $ServiceStart -ErrorAction SilentlyContinue -Verbose
				$Continue = $false
			}
			If ($Continue -ne $false) {
				Clear-Variable -Name "Continue"
				Set-ItemProperty -Path "HKLM:\Software\Nutanix\WOSTT\Services" -Name $Service -Type "DWord" -Value $ServiceStart -ErrorAction SilentlyContinue -Verbose
				"$(Get-TimeStamp)		Attempting to stop the $Service Service."
				While ((Get-Service -Name $Service).Status -ne 'Stopped') {
					Stop-Service $Service -Force -ErrorAction SilentlyContinue -Verbose
				}
				"$(Get-TimeStamp)		Verifying the $Service Service has been stopped."
				If (Get-Service $Service -ErrorAction SilentlyContinue | Where-Object {$_.Status -eq "Stopped"} | select -last 1) {
					"$(Get-TimeStamp)		The $Service Service has been verified as stopped."
				}
				Else {
					"$(Get-TimeStamp)		The $Service Service is still running.  Second attempt at stopping the Service."
					While ((Get-Service -Name $Service).Status -ne 'Stopped') {
						Stop-Service $Service -Force -ErrorAction SilentlyContinue -Verbose
					}
					"$(Get-TimeStamp)		Verifying $Service Service has been stopped."
					If (Get-Service $Service -ErrorAction SilentlyContinue | Where-Object {$_.Status -eq "Stopped"} | select -last 1) {
						"$(Get-TimeStamp)		The $Service Service has been verified as stopped."
					}
					Else {
						"$(Get-TimeStamp)		The $Service Service will not stop.  Logging and continuing with script."
						"$(Get-TimeStamp)		Non-Terminating Error: Unable to stop the $Service Service."
						$Continue = $false
					}
				}
				If ($Continue -ne $false) {
					"$(Get-TimeStamp)		Attempting to disable the $Service Service."
					Set-Service $Service -StartupType Disabled -ErrorAction SilentlyContinue -Verbose
					"$(Get-TimeStamp)		Verifying the $Service Service has been disabled."
					If (Get-Service $Service | Where-Object {$_.StartType -eq "Disabled"} | select -last 1) {
						"$(Get-TimeStamp)		The $Service Service has been verified as disabled."
					}
					Else {
						"$(Get-TimeStamp)		The $Service Service is still enabled.  Attempting to disable the Service using an alternate method."
						Set-ItemProperty HKLM:\SYSTEM\CurrentControlSet\Services\$Service -Name Start -Type DWord -Value 4 -ErrorAction SilentlyContinue -Verbose
						If (Get-Service $Service | Where-Object {$_.StartType -eq "Disabled"} | select -last 1) {
							"$(Get-TimeStamp)		The $Service Service has been verified as disabled using the alternate method."
						}
						Else {
							"$(Get-TimeStamp)		The $Service Service will not disable.  Logging and continuing with script."
							"$(Get-TimeStamp)		Non-Terminating Error: Unable to disable the $Service Service."
						}
					}
					"$(Get-TimeStamp)		The $Service Service has been optimized."
				}
			}
		}
		Else {
			"$(Get-TimeStamp)		The $Service Service does not exist.  Logging and continuing with script."
		}
		"-----------------------------------------------------------------------"
		$ServicesCounter++
		Clear-Variable -Name "Continue"
		Write-Progress -Activity "Implementing Windows Service General Optimizations" -Id 1031 -ParentId 103 -PercentComplete (($ServicesCounter / $Services.count) * 100)
	}
	Write-Progress -Activity "Implementing Windows Service General Optimizations" -Id 1031 -ParentId 103 -PercentComplete 100 -Completed
}
If ($A -eq "Revert") {
	Write-Progress -Activity "Reverting Windows Service General Optimizations" -Id 1131 -ParentId 103 -PercentComplete 0
	ForEach($Service in $Services) {
		If ($Service.Contains('*')) {
			$Service = (Get-ItemProperty -Path "HKLM:\System\CurrentControlSet\Services\$Service").PSChildName
			$ServiceArray = $Service.split(" ")
			$Service = $ServiceArray[0]
		}
		"$(Get-TimeStamp)		Attempting to revert optimizations for the $Service Service."
		"$(Get-TimeStamp)		Checking existence of the $Service Service."
		If (Get-Service -Name $Service -ErrorAction SilentlyContinue) {
			"$(Get-TimeStamp)		Found the $Service Service.  Checking Service State."
			$CurrentServiceStart = Get-ItemPropertyValue -Path "HKLM:\System\CurrentControlSet\Services\$Service" -Name "Start"
			If ($CurrentServiceStart -eq "4") {
				$CurSerStart = "Disabled"
			}
			ElseIf ($CurrentServiceStart -eq "3") {
				$CurSerStart = "Manual"
			}
			ElseIf ($CurrentServiceStart -eq "2") {
				$CurSerStart = "Automatic"
			}
			$PrevServiceStart = Get-ItemPropertyValue -Path "$RevertSer" -Name $Service
			If (-not(Get-ItemProperty -Path "$RevertSer" -Name $Service)) {
				"$(Get-TimeStamp)		The $Service Service was not previously optimized.  Logging and continuing script."
				$Continue = $false
			}
			ElseIf ($PrevServiceStart -eq "4") {
				$PrevSerStart = "Disabled"
			}
			ElseIf ($PrevServiceStart -eq "3") {
				$PrevSerStart = "Manual"
			}
			ElseIf ($PrevServiceStart -eq "2") {
				$PrevSerStart = "Automatic"
			}
			"$(Get-TimeStamp)		The current $Service Service State is $CurSerStart.  The previous Service State was $PrevSerStart."
			If ($CurrentServiceStart -ne $PrevServiceStart) {
				"$(Get-TimeStamp)		The current $Service Service State does not match the previous Service State.  First attempt at reverting the optimization for the service."
				Set-ItemProperty HKLM:\SYSTEM\CurrentControlSet\Services\$Service -Name Start -Type DWord -Value $PrevServiceStart -ErrorAction SilentlyContinue -Verbose
				"$(Get-TimeStamp)		Verifying reversion of the $Service Service."
				$CurrentServiceStart = Get-ItemPropertyValue -Path "HKLM:\System\CurrentControlSet\Services\$Service" -Name "Start"
				If ($CurrentServiceStart -ne $PrevServiceStart) {
					"$(Get-TimeStamp)		The current $Service Service State still does not match the previous Service State.  Second attempt at reverting the optimization for the Service using an alternate method."
					$Manual = "3"
					$Automatic = "2"
					If ((Get-ItemPropertyValue -Path "$RevertSer" -Name $Service) -eq $Manual) {
						$StartupType = "Manual"
					}
					If ((Get-ItemPropertyValue -Path "$RevertSer" -Name $Service) -eq $Automatic) {
						$StartupType = "Automatic"
					}
					Set-Service $Service -StartupType $StartupType -ErrorAction SilentlyContinue -Verbose
					"$(Get-TimeStamp)		Verifying reversion of the $Service Service."
					$CurrentServiceStart = Get-ItemPropertyValue -Path "HKLM:\System\CurrentControlSet\Services\$Service" -Name "Start"
					If ($CurrentServiceStart -ne $PrevServiceStart) {
						"$(Get-TimeStamp)		The current $Service Service state still does not match the previous Service state.  Logging and continuing with script."
						"$(Get-TimeStamp)		Non-Terminating Error: Unable to revert the optimization for the $Service Service."
					}
					Else {
						"$(Get-TimeStamp)		The $Service Service optimization has been verified as reverted using the alternate method."
					}
				}
				Else {
					"$(Get-TimeStamp)		The $Service Service optimization has been verified as reverted."
				}
			}
			Else {
				"$(Get-TimeStamp)		The current $Service Service State matches the previous Service State.  Logging and continuing with script."
			}
			"$(Get-TimeStamp)		The $Service Service optimization has been reverted."
		}
		Else {
			"$(Get-TimeStamp)		The $Service Service does not exist.  Logging and continuing with script."
		}
		"-----------------------------------------------------------------------"
		$ServicesCounter++
		Clear-Variable -Name "Continue"
		Write-Progress -Activity "Reverting Windows Service General Optimizations" -Id 1131 -ParentId 103 -PercentComplete (($ServicesCounter / $Services.count) * 100)
	}
	Write-Progress -Activity "Reverting Windows Service General Optimizations" -Id 1131 -ParentId 103 -PercentComplete 100 -Completed
}
If ($A -ne "Revert") {
	Write-Progress -Activity "Implementing Windows Service Optimizations" -Id 103 -ParentId 10 -PercentComplete 50
}
If ($A -eq "Revert") {
	Write-Progress -Activity "Reverting Windows Service Optimizations" -Id 113 -ParentId 11 -PercentComplete 50
}
If (($OSMajorVersion -like "*Windows 10*") -or ($OSMajorVersion -like "*Server 2019*")) {
	If ($A -ne "Revert") {
		Write-Progress -Activity "Implementing Windows 10 Services Optimizations" -Id 1032 -ParentId 103 -PercentComplete 0
	}
	If ($A -eq "Revert") {
		Write-Progress -Activity "Reverting Windows 10 Services Optimizations" -Id 1132 -ParentId 113 -PercentComplete 0
	}
	<#
		The below Services pertain to Windows 10 and Server 2019
	#>
	$W10Services = @(
		"AarSvc*",											#	Agent Activation Runtime							Service Name and Display Name change per user
		"AssignedAccessManagerSvc",							#	AssignedAccessManager
		"BDESVC",											#	BitLocker Drive Encryption Service
		"wbengine",											#	Block Level Backup Engine Service
		"BTAGService",										#	Bluetooth Audio Gateway Service
		"BluetoothUserService*",							#	Bluetooth User Support Service
		"PeerDistSvc",										#	BranchCache
	#	(DISABLED BY DEFAULT) "camsvc",						#	Capability Access Manager Service					Disabling this service will cause Sysprep issues			Listed here for informational purposes
		"CaptureService*",									#	CaptureService										Service Name and Display Name change per user
		"autotimesvc",										#	Cellular Time
		"CDPUserSvc*",										#	Connected Devices Platform User Service				Service Name and Display Name change per user
		"ConsentUxUserSvc*",								#	ConsentUX											Service Name and Display Name change per user
		"DusmSvc",											#	Data Usage
		"DoSvc",											#	Delivery Optimization
		"DevicePickerUserSvc*",								#	Device Picker										Service Name and Display Name change per user
		"DevicesFlowUserSvc*",								#	Devices Flow										Service Name and Display Name change per user
		"Fax",												#	Fax
		"GraphicsPerfSvc",									#	GraphicsPerfSvc										Used for Graphics Monitoring
		"LxpSvc",											#	Language Experience Service							Do not disable if you plan to use additional Language Packs
		"MessagingService*",								#	MessagingService									Service Name and Display Name change per user
		"WpcMonSvc",										#	Parental Controls
		"RetailDemo",										#	Retail Demo Service
		"VacSvc",											#	Volumetric Audio Compositor Service
		"WFDSConMgrSvc",									#	Wi-Fi Direct Services Connection Manager Service	Remove entry if Wi-Fi connected physical machine			Not necessary in VDI scenarios
		"SDRSVC",											#	Windows Backup										Remove entry if physical machines containing backups		Not necessary in VDI scenarios
		"WbioSrvc",											#	Windows Biometric Service
		"wcncsvc",											#	Windows Connect Now - Config Registrar
		"WMPNetworkSvc",									#	Windows Media Player Network Sharing Service
		"PushToInstall",									#	Windows PushToInstall Service
		"WaasMedicSvc",										#	Windows Update Medic Service						Part of the Windows Update Process
		"WlanSvc",											#	WLAN AutoConfig
		"workfolderssvc",									#	Work Folders
		"WwanSvc",											#	WWAN AutoConfig
		"XboxGipSvc"										#	Xbox Accessory Management Service
	)
	$ServicesCounter = 0
	If ($A -ne "Revert") {
		ForEach($Service in $W10Services) {
			If ($Service.Contains('*')) {
				$Service = (Get-ItemProperty -Path "HKLM:\System\CurrentControlSet\Services\$Service").PSChildName
				$ServiceArray = $Service.split(" ")
				$Service = $ServiceArray[0]
			}
			"$(Get-TimeStamp)		Attempting to optimize the $Service Service."
			"$(Get-TimeStamp)		Checking existence of the $Service Service."
			If (Get-Service -Name $Service -ErrorAction SilentlyContinue) {
				"$(Get-TimeStamp)		Logging the current $Service Service State."
				$ServiceStart = Get-ItemPropertyValue -Path "HKLM:\System\CurrentControlSet\Services\$Service" -Name "Start"
				If ($ServiceStart -eq "4") {
					"$(Get-TimeStamp)		The $Service Service is already disabled.  Logging and continuing with script."
					Set-ItemProperty -Path "HKLM:\Software\Nutanix\WOSTT\Services" -Name $Service -Type "DWord" -Value $ServiceStart -ErrorAction SilentlyContinue -Verbose
					$Continue = $false
					"-----------------------------------------------------------------------"
				}
				If ($Continue -ne $false) {
					Clear-Variable -Name "Continue"
					Set-ItemProperty -Path "HKLM:\Software\Nutanix\WOSTT\Services" -Name $Service -Type "DWord" -Value $ServiceStart -ErrorAction SilentlyContinue -Verbose
					"$(Get-TimeStamp)		Attempting to stop the $Service Service."
					While ((Get-Service -Name $Service).Status -ne 'Stopped') {
						Stop-Service $Service -Force -ErrorAction SilentlyContinue -Verbose
					}
					"$(Get-TimeStamp)		Verifying the $Service Service has been stopped."
					If (Get-Service $Service -ErrorAction SilentlyContinue | Where-Object {$_.Status -eq "Stopped"} | select -last 1) {
						"$(Get-TimeStamp)		The $Service Service has been verified as stopped."
					}
					Else {
						"$(Get-TimeStamp)		The $Service Service is still running.  Second attempt at stopping the Service."
						While ((Get-Service -Name $Service).Status -ne 'Stopped') {
							Stop-Service $Service -Force -ErrorAction SilentlyContinue -Verbose
						}
						"$(Get-TimeStamp)		Verifying $Service Service has been stopped."
						If (Get-Service $Service -ErrorAction SilentlyContinue | Where-Object {$_.Status -eq "Stopped"} | select -last 1) {
							"$(Get-TimeStamp)		The $Service Service has been verified as stopped."
						}
						Else {
							"$(Get-TimeStamp)		The $Service Service will not stop.  Logging and continuing with script."
							"$(Get-TimeStamp)		Non-Terminating Error: Unable to stop the $Service Service."
							$Continue = $false
						}
					}
					If ($Continue -ne $false) {
						"$(Get-TimeStamp)		Attempting to disable the $Service Service."
						Set-Service $Service -StartupType Disabled -ErrorAction SilentlyContinue -Verbose
						"$(Get-TimeStamp)		Verifying the $Service Service has been disabled."
						If (Get-Service $Service | Where-Object {$_.StartType -eq "Disabled"} | select -last 1) {
							"$(Get-TimeStamp)		The $Service Service has been verified as disabled."
						}
						Else {
							"$(Get-TimeStamp)		The $Service Service is still enabled.  Attempting to disable the Service using an alternate method."
							Set-ItemProperty HKLM:\SYSTEM\CurrentControlSet\Services\$Service -Name Start -Type DWord -Value 4 -ErrorAction SilentlyContinue -Verbose
							If (Get-Service $Service | Where-Object {$_.StartType -eq "Disabled"} | select -last 1) {
								"$(Get-TimeStamp)		The $Service Service has been verified as disabled using the alternate method."
							}
							Else {
								"$(Get-TimeStamp)		The $Service Service will not disable.  Logging and continuing with script."
								"$(Get-TimeStamp)		Non-Terminating Error: Unable to disable the $Service Service."
							}
						}
						"$(Get-TimeStamp)		The $Service Service has been optimized."
						"-----------------------------------------------------------------------"
					}
				}
			}
			Else {
				"$(Get-TimeStamp)		The $Service Service does not exist.  Logging and continuing with script."
				"-----------------------------------------------------------------------"
			}
			$ServicesCounter++
			Clear-Variable -Name "Continue"
			Write-Progress -Activity "Implementing Windows 10 Service Optimizations" -Id 1032 -ParentId 103 -PercentComplete (($ServicesCounter / $W10Services.count) * 100)
		}
	}
	If ($A -eq "Revert") {
		ForEach($Service in $W10Services) {
			If ($Service.Contains('*')) {
				$Service = (Get-ItemProperty -Path "HKLM:\System\CurrentControlSet\Services\$Service").PSChildName
				$ServiceArray = $Service.split(" ")
				$Service = $ServiceArray[0]
			}
			"$(Get-TimeStamp)		Attempting to revert optimizations for the $Service Service."
			"$(Get-TimeStamp)		Checking existence of the $Service Service."
			If (Get-Service -Name $Service -ErrorAction SilentlyContinue) {
				"$(Get-TimeStamp)		Found the $Service Service.  Checking Service state."
				$CurrentServiceStart = Get-ItemPropertyValue -Path "HKLM:\System\CurrentControlSet\Services\$Service" -Name "Start"
				If ($CurrentServiceStart -eq "4") {
					$CurSerStart = "Disabled"
				}
				ElseIf ($CurrentServiceStart -eq "3") {
					$CurSerStart = "Manual"
				}
				ElseIf ($CurrentServiceStart -eq "2") {
					$CurSerStart = "Automatic"
				}
				$PrevServiceStart = Get-ItemPropertyValue -Path "$RevertSer" -Name $Service
				If (-not(Get-ItemProperty -Path "$RevertSer" -Name $Service)) {
					"$(Get-TimeStamp)		The $Service Service was not previously optimized.  Logging and continuing script."
					$Continue = $false
				}
				ElseIf ($PrevServiceStart -eq "4") {
					$PrevSerStart = "Disabled"
				}
				ElseIf ($PrevServiceStart -eq "3") {
					$PrevSerStart = "Manual"
				}
				ElseIf ($PrevServiceStart -eq "2") {
					$PrevSerStart = "Automatic"
				}
				If ($Continue -ne $false) {
					"$(Get-TimeStamp)		The current $Service Service State is $CurSerStart.  The previous Service State was $PrevSerStart."
					If ($CurrentServiceStart -ne $PrevServiceStart) {
						"$(Get-TimeStamp)		The current $Service Service State does not match the previous Service State.  First attempt at reverting the optimization for the service."
						Set-ItemProperty HKLM:\SYSTEM\CurrentControlSet\Services\$Service -Name Start -Type DWord -Value $PrevServiceStart -ErrorAction SilentlyContinue -Verbose
						"$(Get-TimeStamp)		Verifying reversion of the $Service Service."
						$CurrentServiceStart = Get-ItemPropertyValue -Path "HKLM:\System\CurrentControlSet\Services\$Service" -Name "Start"
						If ($CurrentServiceStart -ne $PrevServiceStart) {
							"$(Get-TimeStamp)		The current $Service Service State still does not match the previous Service State.  Second attempt at reverting the optimization for the Service using an alternate method."
							$Manual = "3"
							$Automatic = "2"
							If ((Get-ItemPropertyValue -Path "$RevertSer" -Name $Service) -eq $Manual) {
								$StartupType = "Manual"
							}
							If ((Get-ItemPropertyValue -Path "$RevertSer" -Name $Service) -eq $Automatic) {
								$StartupType = "Automatic"
							}
							Set-Service $Service -StartupType $StartupType -ErrorAction SilentlyContinue -Verbose
							"$(Get-TimeStamp)		Verifying reversion of the $Service Service."
							$CurrentServiceStart = Get-ItemPropertyValue -Path "HKLM:\System\CurrentControlSet\Services\$Service" -Name "Start"
							If ($CurrentServiceStart -eq $PrevServiceStart) {
								"$(Get-TimeStamp)		The current $Service Service State still does not match the previous Service State.  Logging and continuing with script."
								"$(Get-TimeStamp)		Non-Terminating Error: Unable to revert the optimization for the $Service Service."
							}
							Else {
								"$(Get-TimeStamp)		The $Service Service optimization has been verified as reverted using the alternate method."
							}
						}
						Else {
							"$(Get-TimeStamp)		The $Service Service optimization has been verified as reverted."
						}
					}
					Else {
						"$(Get-TimeStamp)		The current $Service Service State matches the previous Service State.  Logging and continuing with script."
					}
					"$(Get-TimeStamp)		The $Service Service optimization has been reverted."
				}
			}
			Else {
				"$(Get-TimeStamp)		The $Service Service does not exist.  Logging and continuing with script."
			}
			"-----------------------------------------------------------------------"
			$ServicesCounter++
			Clear-Variable -Name "Continue"
			Write-Progress -Activity "Reverting Windows 10 Service Optimizations" -Id 1132 -ParentId 113 -PercentComplete (($ServicesCounter / $W10Services.count) * 100)
		}
	}
	If ($A -ne "Revert") {
		Write-Progress -Activity "Implementing Windows 10 Service Optimizations" -Id 1032 -ParentId 103 -PercentComplete 100 -Completed
	}
	If ($A -eq "Revert") {
		Write-Progress -Activity "Reverting Windows 10 Service Optimizations" -Id 1132 -ParentId 113 -PercentComplete 100 -Completed
	}
}
If ($A -ne "Revert") {
	Write-Progress -Activity "Implementing Windows Service Optimizations" -Id 103 -ParentId 10 -PercentComplete 100 -Completed
	"$(Get-TimeStamp)		End Of Implementing"
}
If ($A -eq "Revert") {
	Write-Progress -Activity "Reverting Windows Service Optimizations" -Id 113 -ParentId 11 -PercentComplete 100 -Completed
	"$(Get-TimeStamp)		End Of Reverting"
}
"					$OSMajorVersion $OSMinorVersion"
"					Service Optimizations."
"-----------------------------------------------------------------------"
#region Stop Services Script Timer
$SerScriptElapsedMins = $SerScriptStopWatch.Elapsed.Minutes
$SerScriptElapsedSecs = $SerScriptStopWatch.Elapsed.Seconds
$SerScriptStopWatch.Stop()
#endregion Stop Services Script Timer
$OSOpsCounter++
If ($A -ne "Revert") {
	Write-Progress -Activity "Implementing Windows Operating System Optimizations" -Id 10 -ParentId 0 -PercentComplete (($OSOpsCounter / $OSOps) * 100)
}
If ($A -eq "Revert") {
	Write-Progress -Activity "Reverting Windows Operating System Optimizations" -Id 11 -ParentId 1 -PercentComplete (($OSOpsCounter / $OSOps) * 100)
}
$OPsCounter++
If ($A -ne "Revert") {
	Write-Progress -Activity "Implementing Windows Optimizations" -Id 0 -PercentComplete (($OpsCounter / $Ops) * 100)
}
If ($A -eq "Revert") {
	Write-Progress -Activity "Reverting Windows Optimizations" -Id 1 -PercentComplete (($OpsCounter / $Ops) * 100)
}
<#
	If you wish to use a multi-selectable GUI to disable services, use the below.
	Please note the below doesn't stop the services, as it does with the array above.
	Only displays Services that are not Disabled

	Get-Service | Where-Object {$_.Status -ne "Disabled"} | Out-GridView -PassThru | Set-Service -StartupType Disabled
#>
#endregion Service Optimizations

#region Scheduled Task Optimizations
<#
	Optimizes Scheduled Tasks
	Array Methodology
	See https://www.nutanix.com/blog/windows-os-optimization-essentials-part-3-services-and-scheduled-tasks for more information
#>
#region Start Scheduled Task Script Timer
$STScriptStopWatch = [System.Diagnostics.Stopwatch]::StartNew()
#endregion Start Scheduled Task Script Timer
If ($A -ne "Revert") {
	Write-Progress -Activity "Implementing Windows Scheduled Task Optimizations" -Id 104 -ParentId 10 -PercentComplete 0
	"$(Get-TimeStamp)		Beginning Of Implementing"
}
If ($A -eq "Revert") {
	Write-Progress -Activity "Reverting Windows Scheduled Task Optimizations" -Id 114 -ParentId 11 -PercentComplete 0
	"$(Get-TimeStamp)		Beginning Of Reverting"
}
"					$OSMajorVersion $OSMinorVersion"
"					Scheduled Task Optimizations."
"-----------------------------------------------------------------------"
<#
	The below Scheduled Tasks pertain to Windows 10 and Server 2016/2019
#>
$ScheduledTaskLocations = @(
	"\",
	"\",
	"\",
	"\Microsoft\Windows\Application Experience\",
	"\Microsoft\Windows\Application Experience\",
	"\Microsoft\Windows\Autochk\",
	"\Microsoft\Windows\Bluetooth\",
	"\Microsoft\Windows\Data Integrity Scan\",
	"\Microsoft\Windows\Data Integrity Scan\",
	"\Microsoft\Windows\Data Integrity Scan\",
	"\Microsoft\Windows\Diagnosis\",
	"\Microsoft\Windows\DiskCleanup\",
	"\Microsoft\Windows\DiskDiagnostic\",
	"\Microsoft\Windows\DiskDiagnostic\",
	"\Microsoft\Windows\DiskFootprint\",
	"\Microsoft\Windows\DiskFootprint\",
	"\Microsoft\Windows\FileHistory\",
	"\Microsoft\Windows\Location\",
	"\Microsoft\Windows\Maintenance\",
	"\Microsoft\Windows\Maps\",
	"\Microsoft\Windows\Maps\",
	"\Microsoft\Windows\MemoryDiagnostic\",
	"\Microsoft\Windows\MemoryDiagnostic\",
	"\Microsoft\Windows\Mobile Broadband Accounts\",
	"\Microsoft\Windows\NetTrace\",
	"\Microsoft\Windows\Offline Files\",
	"\Microsoft\Windows\Offline Files\",
	"\Microsoft\Windows\PI\",
	"\Microsoft\Windows\Power Efficiency Diagnostics\",
	"\Microsoft\Windows\Ras\",
	"\Microsoft\Windows\RecoveryEnvironment\",
	"\Microsoft\Windows\Registry\",
	"\Microsoft\Windows\Servicing\",
	"\Microsoft\Windows\Shell\",
	"\Microsoft\Windows\SpacePort\",
	"\Microsoft\Windows\SpacePort\",
	"\Microsoft\Windows\Speech\",
	"\Microsoft\Windows\Windows Error Reporting\",
	"\Microsoft\Windows\Windows Filtering Platform\",
	"\Microsoft\Windows\WindowsUpdate\",
	"\Microsoft\XblGameSave\"
)
$ScheduledTaskNames = @(
	"MicrosoftEdgeUpdateTaskMachineCore",
	"MicrosoftEdgeUpdateTaskMachineUA",
	"*OneDrive*",
	"Microsoft Compatibility Appraiser",
	"ProgramDataUpdater",
	"Proxy",
	"UninstallDeviceTask",
	"Data Integrity Check and Scan",
	"Data Integrity Scan",
	"Data Integrity Scan for Crash Recovery",
	"Scheduled",
	"SilentCleanup",
	"Microsoft-Windows-DiskDiagnosticDataCollector",
	"Microsoft-Windows-DiskDiagnosticResolver",
	"Diagnostics",
	"StorageSense",
	"File History (maintenance mode)",
	"Notifications",
	"WinSAT",
	"MapsToastTask",
	"MapsUpdateTask",
	"ProcessMemoryDiagnosticEvents",
	"RunFullMemoryDiagnostic",
	"MNO Metadata Parser",
	"GatherNetworkInfo",
	"Background Synchronization",
	"Logon Synchronization",
	"Sqm-Tasks",
	"AnalyzeSystem",
	"MobilityManager",
	"VerifyWinRE",
	"RegIdleBackup",
	"StartComponentCleanup",
	"IndexerAutomaticMaintenance",
	"SpaceAgentTask",
	"SpaceManagerTask",
	"SpeechModelDownloadTask",
	"QueueReporting",
	"BfeOnServiceStartTypeChange",
	"Scheduled Start",
	"XblGameSaveTask"
)
$ScheduledTasksCounter = 0
If ($A -ne "Revert") {
	Write-Progress -Activity "Implementing Windows General Scheduled Task General Optimizations" -Id 1041 -ParentId 104 -PercentComplete 0
	For ($ScheduledTasksOpsCounter = 0; $ScheduledTasksOpsCounter -le 40; $ScheduledTasksOpsCounter++) {
		$TaskName = $ScheduledTaskNames[$ScheduledTasksOpsCounter]
		$TaskPath = $ScheduledTaskLocations[$ScheduledTasksOpsCounter]
        If ($TaskName.Contains('*')) {
			$i = 0
			$TasksArray = Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName
			If ($TasksArray) {
				$ScheduledTaskCount = $TasksArray.count
				Do {
					$TaskName = ($TasksArray[$i]).TaskName
					$TaskPath = ($TasksArray[$i]).TaskPath
					$ScheduledTask = $TaskPath + $TaskName
					$ScheduledTaskState = (Get-ScheduledTask -TaskName $TaskName).State
					"$(Get-TimeStamp)		Attempting to optimize the $ScheduledTask Scheduled Task."
					"$(Get-TimeStamp)		Checking existence of the $ScheduledTask Scheduled Task."
					If (Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName -ErrorAction SilentlyContinue) {
						"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task was found.  Checking Scheduled Task State."
						If ((Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName).State -ne 'Disabled') {
							"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task is currently enabled.  Determining running status."
							While ((Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName).State -ne 'Disabled' ) {
								If ((Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName).State -ne 'Ready') {
									"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task is currently running.  First attempt at stopping the Scheduled Task."
									While ((Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName).State -ne 'Ready') {
										Stop-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName -ErrorAction SilentlyContinue -Verbose		
									}
									"$(Get-TimeStamp)		Verifying the $ScheduledTask Scheduled Task has been stopped."
									If ((Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName).State -ne 'Ready') {
										"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task is still running.  Second attempt at stopping the Scheduled Task."
										While ((Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName).State -ne 'Ready') {
											Stop-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName -ErrorAction SilentlyContinue -Verbose		
										}
										"$(Get-TimeStamp)		Verifying the $ScheduledTask Scheduled Task has been stopped."
										If ((Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName).State -ne 'Ready') {
											"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task will not stop.  Logging and continuing with script."
											"$(Get-TimeStamp)		Non-Terminating Error: Unable to stop the $ScheduledTask Scheduled Task."
											$Continue = $false
										}
									}
									ElseIf ((Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName).State -eq 'Ready') {
										"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task has been verified as stopped."
									}
								}
								ElseIf ((Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName).State -ne 'Running') {
									"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task is currently stopped."
								}
								If ($Continue -ne $false) {
									"$(Get-TimeStamp)		Logging the current $ScheduledTask Scheduled Task State."
									Set-ItemProperty -Path $RevertST -Name $ScheduledTask -Type "String" -Value $ScheduledTaskState -ErrorAction SilentlyContinue -Verbose
									"$(Get-TimeStamp)		Attempting to disable the $ScheduledTask Scheduled Task."
									Disable-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName -ErrorAction SilentlyContinue -Verbose
									"$(Get-TimeStamp)		Verifying the $ScheduledTask Scheduled Task has been disabled."
									If ((Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName).State -eq 'Disabled') {
										"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task has been verified disabled."
									}
									Else {
										"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task is still enabled.  Second attempt at disabling the Scheduled Task."
										Disable-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName -ErrorAction SilentlyContinue -Verbose
										"$(Get-TimeStamp)		Verifying the $ScheduledTask Scheduled Task has been disabled."
										If ((Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName).State -eq 'Disabled') {
											"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task has been verified disabled."
										}
										Else {
											"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task will not disable.  Logging and continuing with script."
											"$(Get-TimeStamp)		Non-Terminating Error: Unable to disable the $ScheduledTask Scheduled Task."
										}
									}
								}
							}
						}
						ElseIf ((Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName).State -eq 'Disabled') {
							"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task is currently disabled.  Logging and continuing with script."
							Set-ItemProperty -Path $RevertST -Name $ScheduledTask -Type "String" -Value $ScheduledTaskState -ErrorAction SilentlyContinue -Verbose
						}
						$i ++
						"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task has been optimized."
					}
					Else {
						$i ++
						"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task was not found.  Logging and continuing with script."
					}
					"-----------------------------------------------------------------------"
				}
				Until (
					$i -eq $ScheduledTaskCount
				)
			}
		}
		Else {
			$ScheduledTask = $TaskPath + $TaskName
			$ScheduledTaskState = (Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName).State
			"$(Get-TimeStamp)		Attempting to optimize the $ScheduledTask Scheduled Task."
			"$(Get-TimeStamp)		Checking existence of the $ScheduledTask Scheduled Task."
			If (Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName) {
				"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task was found.  Checking Scheduled Task State."
				If ((Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName).State -ne 'Disabled') {
					"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task is currently enabled.  Determining running status."
					While ((Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName).State -ne 'Disabled' ) {
						If ((Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName).State -ne 'Ready') {
							"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task is currently running.  First attempt at stopping the Scheduled Task."
							While ((Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName).State -ne 'Ready') {
								Stop-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName -ErrorAction SilentlyContinue -Verbose		
							}
							"$(Get-TimeStamp)		Verifying the $ScheduledTask Scheduled Task has been stopped."
							If ((Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName).State -ne 'Ready') {
								"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task has not stopped.  Second attempt at stopping the Scheduled Task."
								While ((Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName).State -ne 'Ready') {
									Stop-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName -ErrorAction SilentlyContinue -Verbose		
								}
								"$(Get-TimeStamp)		Verifying the $ScheduledTask Scheduled Task has been stopped."
								If ((Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName).State -ne 'Ready') {
									"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task has not stopped.  Logging and continuing with script."
									"$(Get-TimeStamp)		Non-Terminating Error: Unable to stop the $ScheduledTask Scheduled Task."
									$Continue = $false
								}
							}
							ElseIf ((Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName).State -eq 'Ready') {
								"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task has been verified as stopped."
							}
						}
						ElseIf ((Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName).State -ne 'Running') {
							"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task is currently stopped."
						}
						If ($Continue -ne $false) {
							"$(Get-TimeStamp)		Logging the current $ScheduledTask Scheduled Task State."
							Set-ItemProperty -Path "HKLM:\Software\Nutanix\WOSTT\Scheduled Tasks" -Name $ScheduledTask -Type "String" -Value $ScheduledTaskState -ErrorAction SilentlyContinue -Verbose
							"$(Get-TimeStamp)		Attempting to disable the $ScheduledTask Scheduled Task."
							Disable-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName -ErrorAction SilentlyContinue -Verbose
							"$(Get-TimeStamp)		Verifying the $ScheduledTask Scheduled Task has been disabled."
							If ((Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName).State -eq 'Disabled') {
								"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task has been verified disabled."
							}
							Else {
								"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task is still enabled.  Second attempt at disabling the Scheduled Task."
								Disable-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName -ErrorAction SilentlyContinue -Verbose
								"$(Get-TimeStamp)		Verifying the $ScheduledTask Scheduled Task has been disabled."
								If ((Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName).State -eq 'Disabled') {
									"$(Get-TimeStamp)		The the $ScheduledTask Scheduled Task has been verified disabled."
								}
								Else {
									"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task is still enabled.  Logging and continuing with script."
									"$(Get-TimeStamp)		Non-Terminating Error: Unable to disable the $ScheduledTask Scheduled Task."
								}
							}
						}
					}
				}
				ElseIf ((Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName).State -eq 'Disabled') {
					"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task is currently disabled.  Logging and continuing with script."
					$ScheduledTaskState = (Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName).State
					Set-ItemProperty -Path "HKLM:\Software\Nutanix\WOSTT\Scheduled Tasks" -Name $ScheduledTask -Type "String" -Value $ScheduledTaskState -ErrorAction SilentlyContinue -Verbose
				}
				"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task has been optimized."
			}
			Else {
				"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task was not found.  Logging and continuing with script."
			}
			"-----------------------------------------------------------------------"
		}
		$ScheduledTasksCounter++
		Write-Progress -Activity "Implementing Windows General Scheduled Task General Optimizations" -Id 1041 -ParentId 104 -PercentComplete (($ScheduledTasksCounter / $ScheduledTaskNames.count) * 100)
	}
	Write-Progress -Activity "Implementing Windows General Scheduled Task General Optimizations" -Id 1041 -ParentId 104 -PercentComplete 100 -Completed
}
If ($A -eq "Revert") {
	Write-Progress -Activity "Reverting Windows Scheduled Task General Optimizations" -Id 1141 -ParentId 114 -PercentComplete 0
	For ($ScheduledTasksRevertCounter = 0; $ScheduledTasksRevertCounter -le 40; $ScheduledTasksRevertCounter++) {
		$TaskName = $ScheduledTaskNames[$ScheduledTasksRevertCounter]
		$TaskPath = $ScheduledTaskLocations[$ScheduledTasksRevertCounter]
		If ($ScheduledTaskNames[$ScheduledTasksRevertCounter].Contains('*')) {
			$i = 0
			$TasksArray = Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName
			If ($TasksArray) {
				$ScheduledTaskCount = $TasksArray.count
				Do {
					$TaskName = ($TasksArray[$i]).TaskName
					$TaskPath = ($TasksArray[$i]).TaskPath
					$ScheduledTask = $TaskPath + $TaskName
					$PrevScheduledTaskState = Get-ItemPropertyValue -Path $RevertST -Name $ScheduledTask
					"$(Get-TimeStamp)		Attempting to revert optimizations for the $ScheduledTask Scheduled Task."
					"$(Get-TimeStamp)		Checking existence of the $ScheduledTask Scheduled Task."
					If (Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName) {
						"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task was found.  Comparing current and previous Scheduled Task States."
						$CurrentScheduledTaskState = (Get-ScheduledTask -TaskName $TaskName -ErrorAction SilentlyContinue).State
						"$(Get-TimeStamp)		The current $ScheduledTask Scheduled Task State is $CurrentScheduledTaskState.  The previous Scheduled Task State was $PrevScheduledTaskState."
						If ($PrevScheduledTaskState -eq "Disabled") {
							"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task was previously disabled.  Logging and continuing script."
						}
						ElseIf ($CurrentScheduledTaskState -ne $PrevScheduledTaskState) {
							"$(Get-TimeStamp)		The current $ScheduledTask Scheduled Task State does not match the previous Scheduled Task State.  First attempt at reverting the optimization for the Scheduled Task."
							Enable-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName -ErrorAction SilentlyContinue -Verbose
							"$(Get-TimeStamp)		Verifying reversion of the $ScheduledTask Scheduled Task."
							$CurrentScheduledTaskState = (Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName -ErrorAction SilentlyContinue).State
							If ($CurrentScheduledTaskState -ne $PrevScheduledTaskState) {
								"$(Get-TimeStamp)		The current $ScheduledTask Scheduled Task State still does not match the previous Scheduled Task State.  Second attempt at reverting the optimization for the Scheduled Task."
								Enable-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName -ErrorAction SilentlyContinue -Verbose
								"$(Get-TimeStamp)		Verifying reversion of the $ScheduledTask Scheduled Task."
								$CurrentScheduledTaskState = (Get-ScheduledTask -TaskName $NewScheduledTaskName -ErrorAction SilentlyContinue).State
								If ($CurrentScheduledTaskState -ne $PrevScheduledTaskState) {
									"$(Get-TimeStamp)		The current $ScheduledTask Scheduled Task State still does not match the previous Scheduled Task State.  Logging and continuing with script."
									"$(Get-TimeStamp)		Non-Terminating Error: Unable to revert the optimization for the $ScheduledTask Scheduled Task."
								}
								Else {
									"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task optimization has been verified as reverted."
								}
							}
							Else {
								"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task optimization has been verified as reverted."
							}
							"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task optimization has been reverted."
						}
						Else {
							"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task current and previous State match.  Logging and continuing with script."
						}
					}
					Else {
						"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task was not found.  Logging and continuing with script."
					}
					$i ++
				}
				Until (
					$i -eq $ScheduledTaskCount
				)
			}
		}
		Else {
			$ScheduledTask = $TaskPath + $TaskName
			$PrevScheduledTaskState = Get-ItemPropertyValue -Path $RevertST -Name $ScheduledTask
			"$(Get-TimeStamp)		Attempting to revert optimizations for the $ScheduledTask Scheduled Task."
			"$(Get-TimeStamp)		Checking existence of the $ScheduledTask Scheduled Task."
			If (Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName) {
				"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task was found.  Comparing current and previous Scheduled Task States."
				$CurrentScheduledTaskState = (Get-ScheduledTask -TaskName $TaskName -ErrorAction SilentlyContinue).State
				"$(Get-TimeStamp)		The current $ScheduledTask Scheduled Task State is $CurrentScheduledTaskState.  The previous Scheduled Task State was $PrevScheduledTaskState."
				If ($PrevScheduledTaskState -eq "Disabled") {
					"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task was previously disabled.  Logging and continuing script."
				}
				ElseIf ($ScheduledTaskState -ne $PrevScheduledTaskState) {
					"$(Get-TimeStamp)		The current $ScheduledTask Scheduled Task State does not match the previous Scheduled Task State.  First attempt at reverting the optimization for the Scheduled Task."
					Enable-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName -ErrorAction SilentlyContinue -Verbose
					"$(Get-TimeStamp)		Verifying reversion of the $ScheduledTask Scheduled Task."
					$CurrentScheduledTaskState = (Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName -ErrorAction SilentlyContinue).State
					If ($CurrentScheduledTaskState -ne $PrevScheduledTaskState) {
						"$(Get-TimeStamp)		The current $ScheduledTask Scheduled Task State still does not match the previous Scheduled Task State.  Second attempt at reverting the optimization for the Scheduled Task."
						Enable-ScheduledTask -TaskPath $ScheduledTaskLocations[$ScheduledTasksRevertCounter] -TaskName $ScheduledTask -ErrorAction SilentlyContinue -Verbose
						"$(Get-TimeStamp)		Verifying reversion of the $ScheduledTask Scheduled Task."
						$CurrentScheduledTaskState = (Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName -ErrorAction SilentlyContinue).State
						If ($CurrentScheduledTaskState -ne $PrevScheduledTaskState) {
							"$(Get-TimeStamp)		The current $ScheduledTask Scheduled Task State still does not match the previous Scheduled Task State.  Logging and continuing with script."
							"$(Get-TimeStamp)		Non-Terminating Error: Unable to revert the optimization for the $ScheduledTask Scheduled Task."
						}
						Else {
							"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task optimization has been verified as reverted."
						}
					}
					Else {
						"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task optimization has been verified as reverted."
					}
					"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task optimization has been reverted."
				}
				Else {
					"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task current and previous State match.  Logging and continuing with script."
				}
			}
			Else {
				"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task was not found.  Logging and continuing with script."
			}
		}
		"-----------------------------------------------------------------------"
		Write-Progress -Activity "Reverting Windows Scheduled Task General Optimizations" -Id 1141 -ParentId 114 -PercentComplete (($ScheduledTasksCounter / $ScheduledTaskNames.count) * 100)
	}
	Write-Progress -Activity "Reverting Windows Scheduled Task General Optimizations" -Id 1141 -ParentId 114 -PercentComplete 100 -Completed
}
Clear-Variable -Name "TaskPath" -ErrorAction SilentlyContinue
Clear-Variable -Name "TaskName" -ErrorAction SilentlyContinue
If ($A -ne "Revert") {
	Write-Progress -Activity "Implementing Windows Scheduled Task Optimizations" -Id 104 -ParentId 10 -PercentComplete 33
}
If ($A -eq "Revert") {
	Write-Progress -Activity "Reverting Windows Scheduled Task Optimizations" -Id 114 -ParentId 11 -PercentComplete 33
}
If (($OSMajorVersion -like "*Windows 10*") -or ($OSMajorVersion -like "*Server 2019*")) {
	<#
		The below Scheduled Tasks pertain to Windows 10 and Server 2019
	#>
	If ($A -ne "Revert") {
		Write-Progress -Activity "Implementing Windows 10/Server 2019 Scheduled Task Optimizations" -Id 1042 -ParentId 104 -PercentComplete 0
	}
	If ($A -eq "Revert") {
		Write-Progress -Activity "Reverting Windows 10/Server 2019 Scheduled Task Optimizations" -Id 1142 -ParentId 114 -PercentComplete 0	
	}	
	$ScheduledTaskLocations = @(
		"\Microsoft\Windows\Application Experience\",
		"\Microsoft\Windows\BrokerInfrastructure\",
		"\Microsoft\Windows\Chkdsk\",
		"\Microsoft\Windows\CloudExperienceHost\",
		"\Microsoft\Windows\Customer Experience Improvement Program\",
		"\Microsoft\Windows\Customer Experience Improvement Program\",
		"\Microsoft\Windows\Defrag\",
		"\Microsoft\Windows\Diagnosis\",
		"\Microsoft\Windows\Flighting\FeatureConfig\",
		"\Microsoft\Windows\Flighting\OneSettings\",
		"\Microsoft\Windows\HelloFace\",
		"\Microsoft\Windows\InstallService\",
		"\Microsoft\Windows\InstallService\",
		"\Microsoft\Windows\InstallService\",
		"\Microsoft\Windows\International\",
		"\Microsoft\Windows\LanguageComponentsInstaller\",
		"\Microsoft\Windows\Location\",
		"\Microsoft\Windows\Management\Provisioning\",
		"\Microsoft\Windows\NlaSvc\",
		"\Microsoft\Windows\PushToInstall\",
		"\Microsoft\Windows\PushToInstall\",
		"\Microsoft\Windows\Shell\",
		"\Microsoft\Windows\Shell\",
		"\Microsoft\Windows\StateRepository\",
		"\Microsoft\Windows\Subscription\",
		"\Microsoft\Windows\Subscription\",
		"\Microsoft\Windows\Sysmain\",
		"\Microsoft\Windows\Sysmain\",
		"\Microsoft\Windows\SystemRestore\",
		"\Microsoft\Windows\USB\",
		"\Microsoft\Windows\WCM\",
		"\Microsoft\Windows\WDI\",
		"\Microsoft\Windows\Windows Defender\",
		"\Microsoft\Windows\Windows Defender\",
		"\Microsoft\Windows\Windows Defender\",
		"\Microsoft\Windows\Windows Defender\",
		"\Microsoft\Windows\Windows Media Sharing\",
		"\Microsoft\Windows\Work Folders\",
		"\Microsoft\Windows\Work Folders\",
		"\Microsoft\Windows\WOF\",
		"\Microsoft\Windows\WOF\",
		"\Microsoft\Windows\WwanSvc\"
	)
	$ScheduledTaskNames = @(
		"StartupAppTask",
		"BgTaskRegistrationMaintenanceTask",
		"ProactiveScan",
		"CreateObjectTask",
		"Consolidator",
		"UsbCeip",
		"ScheduledDefrag",
		"RecommendedTroubleshootingScanner",
		"ReconcileFeatures",
		"RefreshCache",
		"FODCleanupTask",
		"ScanForUpdates",
		"ScanForUpdatesAsUser",
		"SmartRetry",
		"Synchronize Language Settings",
		"ReconcileLanguageResources",
		"WindowsActionDialog",
		"Cellular",
		"WiFiTask",
		"LoginCheck",
		"Registration",
		"FamilySafetyMonitor",
		"FamilySafetyRefreshTask",
		"MaintenanceTasks",
		"EnableLicenseAcquisition",
		"LicenseAcquisition",
		"ResPriStaticDbSync",
		"WsSwapAssessmentTask",
		"SR",
		"Usb-Notifications",
		"WiFiTask",
		"ResolutionHost",
		"Windows Defender Cache Maintenance",
		"Windows Defender Cleanup",
		"Windows Defender Scheduled Scan",
		"Windows Defender Verification",
		"UpdateLibrary",
		"Work Folders Logon Synchronization",
		"Work Folders Maintenance Work",
		"WIM-Hash-Management",
		"WIM-Hash-Validation",
		"NotificationTask"
	)
	$ScheduledTasksCounter = 0
	If ($A -ne "Revert") {
		Write-Progress -Activity "Implementing Windows 10/Server 2019 Scheduled Task Optimizations" -Id 1042 -ParentId 104 -PercentComplete 0
		For ($ScheduledTasksOpsCounter = 0; $ScheduledTasksOpsCounter -le 41; $ScheduledTasksOpsCounter++) {
			$TaskName = $ScheduledTaskNames[$ScheduledTasksOpsCounter]
			$TaskPath = $ScheduledTaskLocations[$ScheduledTasksOpsCounter]
			If ($TaskName.Contains('*')) {
				$i = 0
				$TasksArray = Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName
				$ScheduledTaskCount = $TasksArray.count
				Do {
					$TaskName = ($TasksArray[$i]).TaskName
					$TaskPath = ($TasksArray[$i]).TaskPath
					$ScheduledTask = $TaskPath + $TaskName
					$ScheduledTaskState = (Get-ScheduledTask -TaskName $TaskName).State
					"$(Get-TimeStamp)		Attempting to optimize the $ScheduledTask Scheduled Task."
					"$(Get-TimeStamp)		Checking existence of the $ScheduledTask Scheduled Task."
					If (Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName -ErrorAction SilentlyContinue) {
						"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task was found.  Checking Scheduled Task State."
						If ((Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName).State -ne 'Disabled') {
							"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task is currently enabled.  Determining running status."
							While ((Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName).State -ne 'Disabled' ) {
								If ((Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName).State -ne 'Ready') {
									"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task is currently running.  First attempt at stopping the Scheduled Task."
									While ((Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName).State -ne 'Ready') {
										Stop-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName -ErrorAction SilentlyContinue -Verbose		
									}
									"$(Get-TimeStamp)		Verifying the $ScheduledTask Scheduled Task has been stopped."
									If ((Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName).State -ne 'Ready') {
										"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task is still running.  Second attempt at stopping the Scheduled Task."
										While ((Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName).State -ne 'Ready') {
											Stop-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName -ErrorAction SilentlyContinue -Verbose		
										}
										"$(Get-TimeStamp)		Verifying the $ScheduledTask Scheduled Task has been stopped."
										If ((Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName).State -ne 'Ready') {
											"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task will not stop.  Logging and continuing with script."
											"$(Get-TimeStamp)		Non-Terminating Error: Unable to stop the $ScheduledTask Scheduled Task."
											$Continue = $false
										}
									}
									ElseIf ((Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName).State -eq 'Ready') {
										"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task has been verified as stopped."
									}
								}
								ElseIf ((Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName).State -ne 'Running') {
									"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task is currently stopped."
								}
								If ($Continue -ne $false) {
									"$(Get-TimeStamp)		Logging the current $ScheduledTask Scheduled Task State."
									Set-ItemProperty -Path $RevertST -Name $ScheduledTask -Type "String" -Value $ScheduledTaskState -ErrorAction SilentlyContinue -Verbose
									"$(Get-TimeStamp)		Attempting to disable the $ScheduledTask Scheduled Task."
									Disable-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName -ErrorAction SilentlyContinue -Verbose
									"$(Get-TimeStamp)		Verifying the $ScheduledTask Scheduled Task has been disabled."
									If ((Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName).State -eq 'Disabled') {
										"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task has been verified disabled."
									}
									Else {
										"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task is still enabled.  Second attempt at disabling the Scheduled Task."
										Disable-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName -ErrorAction SilentlyContinue -Verbose
										"$(Get-TimeStamp)		Verifying the $ScheduledTask Scheduled Task has been disabled."
										If ((Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName).State -eq 'Disabled') {
											"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task has been verified disabled."
										}
										Else {
											"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task will not disable.  Logging and continuing with script."
											"$(Get-TimeStamp)		Non-Terminating Error: Unable to disable the $ScheduledTask Scheduled Task."
										}
									}
								}
							}
						}
						ElseIf ((Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName).State -eq 'Disabled') {
							"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task is currently disabled.  Logging and continuing with script."
							Set-ItemProperty -Path $RevertST -Name $ScheduledTask -Type "String" -Value $ScheduledTaskState -ErrorAction SilentlyContinue -Verbose
						}
						$i ++
						"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task has been optimized."
					}
					Else {
						"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task was not found.  Logging and continuing with script."
					}
					"-----------------------------------------------------------------------"
				}
				Until (
					$i -eq $ScheduledTaskCount
				)
			}
			Else {
				$ScheduledTask = $TaskPath + $TaskName
				$ScheduledTaskState = (Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName).State
				"$(Get-TimeStamp)		Attempting to optimize the $ScheduledTask Scheduled Task."
				"$(Get-TimeStamp)		Checking existence of the $ScheduledTask Scheduled Task."
				If (Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName -ErrorAction SilentlyContinue) {
					"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task was found.  Checking Scheduled Task State."
					If ((Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName).State -ne 'Disabled') {
						"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task is currently enabled.  Determining running status."
						While ((Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName).State -ne 'Disabled' ) {
							If ((Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName).State -ne 'Ready') {
								"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task is currently running.  First attempt at stopping the Scheduled Task."
								While ((Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName).State -ne 'Ready') {
									Stop-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName -ErrorAction SilentlyContinue -Verbose		
								}
								"$(Get-TimeStamp)		Verifying the $ScheduledTask Scheduled Task has been stopped."
								If ((Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName).State -ne 'Ready') {
									"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task has not stopped.  Second attempt at stopping the Scheduled Task."
									While ((Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName).State -ne 'Ready') {
										Stop-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName -ErrorAction SilentlyContinue -Verbose		
									}
									"$(Get-TimeStamp)		Verifying the $ScheduledTask Scheduled Task has been stopped."
									If ((Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName).State -ne 'Ready') {
										"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task has not stopped.  Logging and continuing with script."
										"$(Get-TimeStamp)		Non-Terminating Error: Unable to stop the $ScheduledTask Scheduled Task."
										$Continue = $false
									}
								}
								ElseIf ((Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName).State -eq 'Ready') {
									"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task has been verified as stopped."
								}
							}
							ElseIf ((Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName).State -ne 'Running') {
								"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task is currently stopped."
							}
							If ($Continue -ne $false) {
								"$(Get-TimeStamp)		Logging the current $ScheduledTask Scheduled Task State."
								Set-ItemProperty -Path "HKLM:\Software\Nutanix\WOSTT\Scheduled Tasks" -Name $ScheduledTask -Type "String" -Value $ScheduledTaskState -ErrorAction SilentlyContinue -Verbose
								"$(Get-TimeStamp)		Attempting to disable the $ScheduledTask Scheduled Task."
								Disable-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName -ErrorAction SilentlyContinue -Verbose
								"$(Get-TimeStamp)		Verifying the $ScheduledTask Scheduled Task has been disabled."
								If ((Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName).State -eq 'Disabled') {
									"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task has been verified disabled."
								}
								Else {
									"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task is still enabled.  Second attempt at disabling the Scheduled Task."
									Disable-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName -ErrorAction SilentlyContinue -Verbose
									"$(Get-TimeStamp)		Verifying the $ScheduledTask Scheduled Task has been disabled."
									If ((Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName).State -eq 'Disabled') {
										"$(Get-TimeStamp)		The the $ScheduledTask Scheduled Task has been verified disabled."
									}
									Else {
										"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task is still enabled.  Logging and continuing with script."
										"$(Get-TimeStamp)		Non-Terminating Error: Unable to disable the $ScheduledTask Scheduled Task."
									}
								}
							}
						}
					}
					ElseIf ((Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName).State -eq 'Disabled') {
						"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task is currently disabled.  Logging and continuing with script."
						$ScheduledTaskState = (Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName).State
						Set-ItemProperty -Path "HKLM:\Software\Nutanix\WOSTT\Scheduled Tasks" -Name $ScheduledTask -Type "String" -Value $ScheduledTaskState -ErrorAction SilentlyContinue -Verbose
					}
					"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task has been optimized."
				}
				Else {
					"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task was not found.  Logging and continuing with script."
				}
				"-----------------------------------------------------------------------"
			}
			$ScheduledTasksCounter++
			Write-Progress -Activity "Implementing Windows 10/Server 2019 Scheduled Task Optimizations" -Id 1042 -ParentId 104 -PercentComplete (($ScheduledTasksCounter / $ScheduledTaskNames.count) * 100)
		}
		Write-Progress -Activity "Implementing Windows 10/Server 2019 Scheduled Task Optimizations" -Id 1042 -ParentId 104 -PercentComplete 100 -Completed
	}
	If ($A -eq "Revert") {
		Write-Progress -Activity "Reverting Windows 10/Server 2019 Scheduled Task Optimizations" -Id 1142 -ParentId 114 -PercentComplete 0
		For ($ScheduledTasksRevertCounter = 0; $ScheduledTasksRevertCounter -le 40; $ScheduledTasksRevertCounter++) {
			$TaskName = $ScheduledTaskNames[$ScheduledTasksRevertCounter]
			$TaskPath = $ScheduledTaskLocations[$ScheduledTasksRevertCounter]
			If ($ScheduledTaskNames[$ScheduledTasksRevertCounter].Contains('*')) {
				$i = 0
				$TasksArray = Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName
				$ScheduledTaskCount = $TasksArray.count
				Do {
					$TaskName = ($TasksArray[$i]).TaskName
					$TaskPath = ($TasksArray[$i]).TaskPath
					$ScheduledTask = $TaskPath + $TaskName
					$PrevScheduledTaskState = Get-ItemPropertyValue -Path $RevertST -Name $ScheduledTask
					"$(Get-TimeStamp)		Attempting to revert optimizations for the $ScheduledTask Scheduled Task."
					"$(Get-TimeStamp)		Checking existence of the $ScheduledTask Scheduled Task."
					If (Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName -ErrorAction SilentlyContinue) {
						"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task was found.  Comparing current and previous Scheduled Task States."
						$CurrentScheduledTaskState = (Get-ScheduledTask -TaskName $TaskName -ErrorAction SilentlyContinue).State
						"$(Get-TimeStamp)		The current $ScheduledTask Scheduled Task State is $CurrentScheduledTaskState.  The previous Scheduled Task State was $PrevScheduledTaskState."
						If ($PrevScheduledTaskState -eq "Disabled") {
							"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task was previously disabled.  Logging and continuing script."
						}
						ElseIf ($CurrentScheduledTaskState -ne $PrevScheduledTaskState) {
							"$(Get-TimeStamp)		The current $ScheduledTask Scheduled Task State does not match the previous Scheduled Task State.  First attempt at reverting the optimization for the Scheduled Task."
							Enable-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName -ErrorAction SilentlyContinue -Verbose
							"$(Get-TimeStamp)		Verifying reversion of the $ScheduledTask Scheduled Task."
							$CurrentScheduledTaskState = (Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName -ErrorAction SilentlyContinue).State
							If ($CurrentScheduledTaskState -ne $PrevScheduledTaskState) {
								"$(Get-TimeStamp)		The current $ScheduledTask Scheduled Task State still does not match the previous Scheduled Task State.  Second attempt at reverting the optimization for the Scheduled Task."
								Enable-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName -ErrorAction SilentlyContinue -Verbose
								"$(Get-TimeStamp)		Verifying reversion of the $ScheduledTask Scheduled Task."
								$CurrentScheduledTaskState = (Get-ScheduledTask -TaskName $NewScheduledTaskName -ErrorAction SilentlyContinue).State
								If ($CurrentScheduledTaskState -ne $PrevScheduledTaskState) {
									"$(Get-TimeStamp)		The current $ScheduledTask Scheduled Task State still does not match the previous Scheduled Task State.  Logging and continuing with script."
									"$(Get-TimeStamp)		Non-Terminating Error: Unable to revert the optimization for the $ScheduledTask Scheduled Task."
								}
								Else {
									"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task optimization has been verified as reverted."
								}
							}
							Else {
								"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task optimization has been verified as reverted."
							}
							"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task optimization has been reverted."
						}
						Else {
							"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task current and previous State match.  Logging and continuing with script."
						}
					}
					Else {
						"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task was not found.  Logging and continuing with script."
					}
					$i ++
				}
				Until (
					$i -eq $ScheduledTaskCount
				)
			}
			Else {
				$ScheduledTask = $TaskPath + $TaskName
				$PrevScheduledTaskState = Get-ItemPropertyValue -Path $RevertST -Name $ScheduledTask
				"$(Get-TimeStamp)		Attempting to revert optimizations for the $ScheduledTask Scheduled Task."
				"$(Get-TimeStamp)		Checking existence of the $ScheduledTask Scheduled Task."
				If (Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName -ErrorAction SilentlyContinue) {
					"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task was found.  Comparing current and previous Scheduled Task States."
					$CurrentScheduledTaskState = (Get-ScheduledTask -TaskName $TaskName -ErrorAction SilentlyContinue).State
					"$(Get-TimeStamp)		The current $ScheduledTask Scheduled Task State is $CurrentScheduledTaskState.  The previous Scheduled Task State was $PrevScheduledTaskState."
					If ($PrevScheduledTaskState -eq "Disabled") {
						"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task was previously disabled.  Logging and continuing script."
					}
					ElseIf ($ScheduledTaskState -ne $PrevScheduledTaskState) {
						"$(Get-TimeStamp)		The current $ScheduledTask Scheduled Task State does not match the previous Scheduled Task State.  First attempt at reverting the optimization for the Scheduled Task."
						Enable-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName -ErrorAction SilentlyContinue -Verbose
						"$(Get-TimeStamp)		Verifying reversion of the $ScheduledTask Scheduled Task."
						$CurrentScheduledTaskState = (Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName -ErrorAction SilentlyContinue).State
						If ($CurrentScheduledTaskState -ne $PrevScheduledTaskState) {
							"$(Get-TimeStamp)		The current $ScheduledTask Scheduled Task State still does not match the previous Scheduled Task State.  Second attempt at reverting the optimization for the Scheduled Task."
							Enable-ScheduledTask -TaskPath $ScheduledTaskLocations[$ScheduledTasksRevertCounter] -TaskName $ScheduledTask -ErrorAction SilentlyContinue -Verbose
							"$(Get-TimeStamp)		Verifying reversion of the $ScheduledTask Scheduled Task."
							$CurrentScheduledTaskState = (Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName -ErrorAction SilentlyContinue).State
							If ($CurrentScheduledTaskState -ne $PrevScheduledTaskState) {
								"$(Get-TimeStamp)		The current $ScheduledTask Scheduled Task State still does not match the previous Scheduled Task State.  Logging and continuing with script."
								"$(Get-TimeStamp)		Non-Terminating Error: Unable to revert the optimization for the $ScheduledTask Scheduled Task."
							}
							Else {
								"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task optimization has been verified as reverted."
							}
						}
						Else {
							"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task optimization has been verified as reverted."
						}
						"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task optimization has been reverted."
					}
					Else {
						"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task current and previous State match.  Logging and continuing with script."
					}
				}
				Else {
					"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task was not found.  Logging and continuing with script."
				}
			}
			"-----------------------------------------------------------------------"
			Write-Progress -Activity "Reverting Windows Scheduled Task General Optimizations" -Id 1141 -ParentId 114 -PercentComplete (($ScheduledTasksCounter / $ScheduledTaskNames.count) * 100)
		}
		Write-Progress -Activity "Reverting Windows 10/Server 2019 Scheduled Task Optimizations" -Id 1142 -ParentId 114 -PercentComplete 100 -Completed
	}
}
Clear-Variable -Name "TaskPath" -ErrorAction SilentlyContinue
Clear-Variable -Name "TaskName" -ErrorAction SilentlyContinue
If ($A -ne "Revert") {
	Write-Progress -Activity "Implementing Windows Scheduled Task Optimizations" -Id 104 -ParentId 10 -PercentComplete 66
}
If ($A -eq "Revert") {
	Write-Progress -Activity "Reverting Windows Scheduled Task Optimizations" -Id 114 -ParentId 11 -PercentComplete 66
}
If ($OSMajorVersion -like "*Windows Server*") {
	<#
		The below Scheduled Tasks pertain to Server 2016/2019
	#>
	$ScheduledTaskLocations = @(
		"\Microsoft\Windows\Customer Experience Improvement Program\",
		"\Microsoft\Windows\SettingSync\",
		"\Microsoft\Windows\SettingSync\",
		"\Microsoft\Windows\Setup\",
		"\Microsoft\Windows\Software Inventory Logging\",
		"\Microsoft\Windows\UpdateOrchestrator\",
		"\Microsoft\Windows\WindowsUpdate\",
		"\Microsoft\XblGameSave\"
	)
	$ScheduledTaskNames = @(
		"KernelCeipTask",
		"BackgroundUploadTask",
		"BackUpTask",
		"SetupCleanupTask",
		"Configuration",
		"USO_UxBroker_ReadyToReboot",
		"Automatic App Update",
		"XblGameSaveTaskLogon"
	)
	$ScheduledTasksCounter = 0
	If ($A -ne "Revert") {
		Write-Progress -Activity "Implementing Windows Server Scheduled Task Optimizations" -Id 1043 -ParentId 104 -PercentComplete 0
		For ($ScheduledTasksOpsCounter = 0; $ScheduledTasksOpsCounter -le 7; $ScheduledTasksOpsCounter++) {
			$TaskName = $ScheduledTaskNames[$ScheduledTasksOpsCounter]
			$TaskPath = $ScheduledTaskLocations[$ScheduledTasksOpsCounter]
			If ($TaskName.Contains('*')) {
				$i = 0
				$TasksArray = Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName
				$ScheduledTaskCount = $TasksArray.count
				Do {
					$TaskName = ($TasksArray[$i]).TaskName
					$TaskPath = ($TasksArray[$i]).TaskPath
					$ScheduledTask = $TaskPath + $TaskName
					$ScheduledTaskState = (Get-ScheduledTask -TaskName $TaskName).State
					"$(Get-TimeStamp)		Attempting to optimize the $ScheduledTask Scheduled Task."
					"$(Get-TimeStamp)		Checking existence of the $ScheduledTask Scheduled Task."
					If (Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName -ErrorAction SilentlyContinue) {
						"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task was found.  Checking Scheduled Task State."
						If ((Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName).State -ne 'Disabled') {
							"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task is currently enabled.  Determining running status."
							While ((Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName).State -ne 'Disabled' ) {
								If ((Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName).State -ne 'Ready') {
									"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task is currently running.  First attempt at stopping the Scheduled Task."
									While ((Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName).State -ne 'Ready') {
										Stop-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName -ErrorAction SilentlyContinue -Verbose		
									}
									"$(Get-TimeStamp)		Verifying the $ScheduledTask Scheduled Task has been stopped."
									If ((Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName).State -ne 'Ready') {
										"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task is still running.  Second attempt at stopping the Scheduled Task."
										While ((Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName).State -ne 'Ready') {
											Stop-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName -ErrorAction SilentlyContinue -Verbose		
										}
										"$(Get-TimeStamp)		Verifying the $ScheduledTask Scheduled Task has been stopped."
										If ((Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName).State -ne 'Ready') {
											"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task will not stop.  Logging and continuing with script."
											"$(Get-TimeStamp)		Non-Terminating Error: Unable to stop the $ScheduledTask Scheduled Task."
											$Continue = $false
										}
									}
									ElseIf ((Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName).State -eq 'Ready') {
										"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task has been verified as stopped."
									}
								}
								ElseIf ((Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName).State -ne 'Running') {
									"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task is currently stopped."
								}
								If ($Continue -ne $false) {
									"$(Get-TimeStamp)		Logging the current $ScheduledTask Scheduled Task State."
									Set-ItemProperty -Path $RevertST -Name $ScheduledTask -Type "String" -Value $ScheduledTaskState -ErrorAction SilentlyContinue -Verbose
									"$(Get-TimeStamp)		Attempting to disable the $ScheduledTask Scheduled Task."
									Disable-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName -ErrorAction SilentlyContinue -Verbose
									"$(Get-TimeStamp)		Verifying the $ScheduledTask Scheduled Task has been disabled."
									If ((Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName).State -eq 'Disabled') {
										"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task has been verified disabled."
									}
									Else {
										"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task is still enabled.  Second attempt at disabling the Scheduled Task."
										Disable-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName -ErrorAction SilentlyContinue -Verbose
										"$(Get-TimeStamp)		Verifying the $ScheduledTask Scheduled Task has been disabled."
										If ((Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName).State -eq 'Disabled') {
											"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task has been verified disabled."
										}
										Else {
											"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task will not disable.  Logging and continuing with script."
											"$(Get-TimeStamp)		Non-Terminating Error: Unable to disable the $ScheduledTask Scheduled Task."
										}
									}
								}
							}
						}
						ElseIf ((Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName).State -eq 'Disabled') {
							"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task is currently disabled.  Logging and continuing with script."
							Set-ItemProperty -Path $RevertST -Name $ScheduledTask -Type "String" -Value $ScheduledTaskState -ErrorAction SilentlyContinue -Verbose
						}
						$i ++
						"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task has been optimized."
					}
					Else {
						"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task was not found.  Logging and continuing with script."
					}
					"-----------------------------------------------------------------------"
				}
				Until (
					$i -eq $ScheduledTaskCount
				)
			}
			Else {
				$ScheduledTask = $TaskPath + $TaskName
				$ScheduledTaskState = (Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName).State
				"$(Get-TimeStamp)		Attempting to optimize the $ScheduledTask Scheduled Task."
				"$(Get-TimeStamp)		Checking existence of the $ScheduledTask Scheduled Task."
				If (Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName) {
					"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task was found.  Checking Scheduled Task State."
					If ((Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName).State -ne 'Disabled') {
						"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task is currently enabled.  Determining running status."
						While ((Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName).State -ne 'Disabled' ) {
							If ((Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName).State -ne 'Ready') {
								"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task is currently running.  First attempt at stopping the Scheduled Task."
								While ((Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName).State -ne 'Ready') {
									Stop-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName -ErrorAction SilentlyContinue -Verbose		
								}
								"$(Get-TimeStamp)		Verifying the $ScheduledTask Scheduled Task has been stopped."
								If ((Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName).State -ne 'Ready') {
									"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task has not stopped.  Second attempt at stopping the Scheduled Task."
									While ((Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName).State -ne 'Ready') {
										Stop-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName -ErrorAction SilentlyContinue -Verbose		
									}
									"$(Get-TimeStamp)		Verifying the $ScheduledTask Scheduled Task has been stopped."
									If ((Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName).State -ne 'Ready') {
										"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task has not stopped.  Logging and continuing with script."
										"$(Get-TimeStamp)		Non-Terminating Error: Unable to stop the $ScheduledTask Scheduled Task."
										$Continue = $false
									}
								}
								ElseIf ((Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName).State -eq 'Ready') {
									"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task has been verified as stopped."
								}
							}
							ElseIf ((Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName).State -ne 'Running') {
								"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task is currently stopped."
							}
							If ($Continue -ne $false) {
								"$(Get-TimeStamp)		Logging the current $ScheduledTask Scheduled Task State."
								Set-ItemProperty -Path "HKLM:\Software\Nutanix\WOSTT\Scheduled Tasks" -Name $ScheduledTask -Type "String" -Value $ScheduledTaskState -ErrorAction SilentlyContinue -Verbose
								"$(Get-TimeStamp)		Attempting to disable the $ScheduledTask Scheduled Task."
								Disable-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName -ErrorAction SilentlyContinue -Verbose
								"$(Get-TimeStamp)		Verifying the $ScheduledTask Scheduled Task has been disabled."
								If ((Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName).State -eq 'Disabled') {
									"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task has been verified disabled."
								}
								Else {
									"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task is still enabled.  Second attempt at disabling the Scheduled Task."
									Disable-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName -ErrorAction SilentlyContinue -Verbose
									"$(Get-TimeStamp)		Verifying the $ScheduledTask Scheduled Task has been disabled."
									If ((Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName).State -eq 'Disabled') {
										"$(Get-TimeStamp)		The the $ScheduledTask Scheduled Task has been verified disabled."
									}
									Else {
										"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task is still enabled.  Logging and continuing with script."
										"$(Get-TimeStamp)		Non-Terminating Error: Unable to disable the $ScheduledTask Scheduled Task."
									}
								}
							}
						}
					}
					ElseIf ((Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName).State -eq 'Disabled') {
						"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task is currently disabled.  Logging and continuing with script."
						$ScheduledTaskState = (Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName).State
						Set-ItemProperty -Path "HKLM:\Software\Nutanix\WOSTT\Scheduled Tasks" -Name $ScheduledTask -Type "String" -Value $ScheduledTaskState -ErrorAction SilentlyContinue -Verbose
					}
					"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task has been optimized."
				}
				Else {
					"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task was not found.  Logging and continuing with script."
				}
				"-----------------------------------------------------------------------"
			}
			$ScheduledTasksCounter++
			Write-Progress -Activity "Implementing Windows Server Scheduled Task Optimizations" -Id 1043 -ParentId 104 -PercentComplete (($ScheduledTasksCounter / $ScheduledTaskNames.count) * 100)
		}
		Write-Progress -Activity "Implementing Windows Server Scheduled Task Optimizations" -Id 1043 -ParentId 104 -PercentComplete 100 -Completed
	}
	If ($A -eq "Revert") {
		Write-Progress -Activity "Reverting Windows Server Scheduled Task Optimizations" -Id 1143 -ParentId 114 -PercentComplete 0
		For ($ScheduledTasksRevertCounter = 0; $ScheduledTasksRevertCounter -le 40; $ScheduledTasksRevertCounter++) {
			$TaskName = $ScheduledTaskNames[$ScheduledTasksRevertCounter]
			$TaskPath = $ScheduledTaskLocations[$ScheduledTasksRevertCounter]
			If ($ScheduledTaskNames[$ScheduledTasksRevertCounter].Contains('*')) {
				$i = 0
				$TasksArray = Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName
				$ScheduledTaskCount = $TasksArray.count
				Do {
					$TaskName = ($TasksArray[$i]).TaskName
					$TaskPath = ($TasksArray[$i]).TaskPath
					$ScheduledTask = $TaskPath + $TaskName
					$PrevScheduledTaskState = Get-ItemPropertyValue -Path $RevertST -Name $ScheduledTask
					"$(Get-TimeStamp)		Attempting to revert optimizations for the $ScheduledTask Scheduled Task."
					"$(Get-TimeStamp)		Checking existence of the $ScheduledTask Scheduled Task."
					If (Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName -ErrorAction SilentlyContinue) {
						"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task was found.  Comparing current and previous Scheduled Task States."
						$CurrentScheduledTaskState = (Get-ScheduledTask -TaskName $TaskName -ErrorAction SilentlyContinue).State
						"$(Get-TimeStamp)		The current $ScheduledTask Scheduled Task State is $CurrentScheduledTaskState.  The previous Scheduled Task State was $PrevScheduledTaskState."
						If ($PrevScheduledTaskState -eq "Disabled") {
							"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task was previously disabled.  Logging and continuing script."
						}
						ElseIf ($CurrentScheduledTaskState -ne $PrevScheduledTaskState) {
							"$(Get-TimeStamp)		The current $ScheduledTask Scheduled Task State does not match the previous Scheduled Task State.  First attempt at reverting the optimization for the Scheduled Task."
							Enable-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName -ErrorAction SilentlyContinue -Verbose
							"$(Get-TimeStamp)		Verifying reversion of the $ScheduledTask Scheduled Task."
							$CurrentScheduledTaskState = (Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName -ErrorAction SilentlyContinue).State
							If ($CurrentScheduledTaskState -ne $PrevScheduledTaskState) {
								"$(Get-TimeStamp)		The current $ScheduledTask Scheduled Task State still does not match the previous Scheduled Task State.  Second attempt at reverting the optimization for the Scheduled Task."
								Enable-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName -ErrorAction SilentlyContinue -Verbose
								"$(Get-TimeStamp)		Verifying reversion of the $ScheduledTask Scheduled Task."
								$CurrentScheduledTaskState = (Get-ScheduledTask -TaskName $NewScheduledTaskName -ErrorAction SilentlyContinue).State
								If ($CurrentScheduledTaskState -ne $PrevScheduledTaskState) {
									"$(Get-TimeStamp)		The current $ScheduledTask Scheduled Task State still does not match the previous Scheduled Task State.  Logging and continuing with script."
									"$(Get-TimeStamp)		Non-Terminating Error: Unable to revert the optimization for the $ScheduledTask Scheduled Task."
								}
								Else {
									"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task optimization has been verified as reverted."
								}
							}
							Else {
								"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task optimization has been verified as reverted."
							}
							"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task optimization has been reverted."
						}
						Else {
							"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task current and previous State match.  Logging and continuing with script."
						}
					}
					Else {
						"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task was not found.  Logging and continuing with script."
					}
					$i ++
				}
				Until (
					$i -eq $ScheduledTaskCount
				)
			}
			Else {
				$ScheduledTask = $TaskPath + $TaskName
				$PrevScheduledTaskState = Get-ItemPropertyValue -Path $RevertST -Name $ScheduledTask
				"$(Get-TimeStamp)		Attempting to revert optimizations for the $ScheduledTask Scheduled Task."
				"$(Get-TimeStamp)		Checking existence of the $ScheduledTask Scheduled Task."
				If (Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName -ErrorAction SilentlyContinue) {
					"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task was found.  Comparing current and previous Scheduled Task States."
					$CurrentScheduledTaskState = (Get-ScheduledTask -TaskName $TaskName -ErrorAction SilentlyContinue).State
					"$(Get-TimeStamp)		The current $ScheduledTask Scheduled Task State is $CurrentScheduledTaskState.  The previous Scheduled Task State was $PrevScheduledTaskState."
					If ($PrevScheduledTaskState -eq "Disabled") {
						"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task was previously disabled.  Logging and continuing script."
					}
					ElseIf ($ScheduledTaskState -ne $PrevScheduledTaskState) {
						"$(Get-TimeStamp)		The current $ScheduledTask Scheduled Task State does not match the previous Scheduled Task State.  First attempt at reverting the optimization for the Scheduled Task."
						Enable-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName -ErrorAction SilentlyContinue -Verbose
						"$(Get-TimeStamp)		Verifying reversion of the $ScheduledTask Scheduled Task."
						$CurrentScheduledTaskState = (Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName -ErrorAction SilentlyContinue).State
						If ($CurrentScheduledTaskState -ne $PrevScheduledTaskState) {
							"$(Get-TimeStamp)		The current $ScheduledTask Scheduled Task State still does not match the previous Scheduled Task State.  Second attempt at reverting the optimization for the Scheduled Task."
							Enable-ScheduledTask -TaskPath $ScheduledTaskLocations[$ScheduledTasksRevertCounter] -TaskName $ScheduledTask -ErrorAction SilentlyContinue -Verbose
							"$(Get-TimeStamp)		Verifying reversion of the $ScheduledTask Scheduled Task."
							$CurrentScheduledTaskState = (Get-ScheduledTask -TaskPath $TaskPath -TaskName $TaskName -ErrorAction SilentlyContinue).State
							If ($CurrentScheduledTaskState -ne $PrevScheduledTaskState) {
								"$(Get-TimeStamp)		The current $ScheduledTask Scheduled Task State still does not match the previous Scheduled Task State.  Logging and continuing with script."
								"$(Get-TimeStamp)		Non-Terminating Error: Unable to revert the optimization for the $ScheduledTask Scheduled Task."
							}
							Else {
								"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task optimization has been verified as reverted."
							}
						}
						Else {
							"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task optimization has been verified as reverted."
						}
						"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task optimization has been reverted."
					}
					Else {
						"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task current and previous State match.  Logging and continuing with script."
					}
				}
				Else {
					"$(Get-TimeStamp)		The $ScheduledTask Scheduled Task was not found.  Logging and continuing with script."
				}
			}
			"-----------------------------------------------------------------------"
			Write-Progress -Activity "Reverting Windows Server Scheduled Task Optimizations" -Id 1143 -ParentId 114 -PercentComplete (($ScheduledTasksCounter / $ScheduledTaskNames.count) * 100)
		}
		Write-Progress -Activity "Reverting Windows Server Scheduled Task Optimizations" -Id 1143 -ParentId 114 -PercentComplete 100 -Completed
	}
}
Clear-Variable -Name "TaskPath" -ErrorAction SilentlyContinue
Clear-Variable -Name "TaskName" -ErrorAction SilentlyContinue
If ($A -ne "Revert") {
	Write-Progress -Activity "Implementing Windows Scheduled Task Optimizations" -Id 104 -ParentId 10 -PercentComplete 100 -Completed
	"$(Get-TimeStamp)		End Of Implementing"
}
If ($A -eq "Revert") {
	Write-Progress -Activity "Reverting Windows Scheduled Task Optimizations" -Id 114 -ParentId 11 -PercentComplete 100 -Completed
	"$(Get-TimeStamp)		End Of Reverting"
}
"					$OSMajorVersion $OSMinorVersion"
"					Scheduled Task Optimizations."
"-----------------------------------------------------------------------"
#region Stop Scheduled Task Script Timer
$STScriptElapsedMins = $STScriptStopWatch.Elapsed.Minutes
$STScriptElapsedSecs = $STScriptStopWatch.Elapsed.Seconds
$STScriptStopWatch.Stop()
#endregion Stop Services Script Timer

$OSOpsCounter++
If ($A -ne "Revert") {
	Write-Progress -Activity "Implementing Windows Operating System Optimizations" -Id 10 -ParentId 0 -PercentComplete (($OSOpsCounter / $OSOps) * 100)
}
If ($A -eq "Revert") {
Write-Progress -Activity "Reverting Windows Operating System Optimizations" -Id 11 -ParentId 1 -PercentComplete (($OSOpsCounter / $OSOps) * 100)
}
$OPsCounter++
If ($A -ne "Revert") {
	Write-Progress -Activity "Implementing Windows Optimizations" -Id 0 -PercentComplete (($OpsCounter / $Ops) * 100)
}
If ($A -eq "Revert") {
	Write-Progress -Activity "Reverting Windows Optimizations" -Id 1 -PercentComplete (($OpsCounter / $Ops) * 100)
}
<#
	If you wish to use a multi-selectable GUI to disable scheduled tasks, use the below.
	This will only show Scheduled Tasks that are in the Ready State

	Get-ScheduledTask | Where-Object {$_.State -eq "Ready"} | Out-GridView -PassThru | Disable-ScheduledTask

	The below Scheduled Tasks can't be disabled through the Task Scheduler applet.  You must fully, and manually, delete the registry key they are based upon.
	This action, as opposed to disabling them above, is irreversible.
	Please vet these Scheduled Tasks carefully.

	"HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Schedule\Task Cache\Tree\Microsoft\Windows\BitLocker\BitLocker Encrypt All Drives"
	"HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Schedule\Task Cache\Tree\Microsoft\Windows\BitLocker\BitLocker MDM policy Refresh"
	"HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Schedule\Task Cache\Tree\Microsoft\Windows\Chkdsk\SyspartRepair"
	"HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Schedule\Task Cache\Tree\Microsoft\Windows\SettingSync\BackgroundUploadTask"
	"HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Schedule\Task Cache\Tree\Microsoft\Windows\UpdateOrchestrator\Schedule Scan"
	"HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Schedule\Task Cache\Tree\Microsoft\Windows\UpdateOrchestrator\Schedule Scan Static Task"
	"HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Schedule\Task Cache\Tree\Microsoft\Windows\UpdateOrchestrator\UpdateModelTask"
	"HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Schedule\Task Cache\Tree\Microsoft\Windows\UpdateOrchestrator\USO_UxBroker"
	"HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Schedule\Task Cache\Tree\Microsoft\Windows\WaaSMedic\PerformRemediation"
	"HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Schedule\Task Cache\Tree\Microsoft\Windows\WindowsUpdate\sihpostreboot"
#>
#endregion Scheduled Task Optimizations

#region Active Setup Optimizations
<#
	Removes Active Setup entries
	See https://www.nutanix.com/blog/windows-os-optimization-essentials-part-1-active-setup for more information
#>
#region Start Active Setup Script Timer
$ASScriptStopWatch = [System.Diagnostics.Stopwatch]::StartNew()
#endregion Start Active Setup Script Timer
If ($A -ne "Revert") {
	Write-Progress -Activity "Implementing Windows Active Setup Optimizations" -Id 105 -ParentId 10 -PercentComplete 0
	"$(Get-TimeStamp)		Beginning Of Implementing"
}
If ($A -eq "Revert") {
	Write-Progress -Activity "Reverting Windows Active Setup Optimizations" -Id 115 -ParentId 11 -PercentComplete 0
	"$(Get-TimeStamp)		Beginning Of Reverting"
}
"					$OSMajorVersion $OSMinorVersion"
"					Active Setup Optimizations."
"-----------------------------------------------------------------------"
$ActiveSetupNames = @(
	"Themes Setup",
	"Microsoft Windows Media Player",
	"Windows Desktop Update",
	"Web Platform Customizations",
	"DOTNETFRAMEWORKS",
	"Microsoft Edge",
	"Microsoft Windows Media Player"
)
$ActiveSetupKeys = @(
	"{2C7339CF-2B09-4501-B3F3-F3508C9228ED}",						#Themes Setup
	"{6BF52A52-394A-11d3-B153-00C04F79FAA6}",						#Microsoft Windows Media Player
	"{89820200-ECBD-11cf-8B85-00AA005B4340}",						#Windows Desktop Update
	"{89820200-ECBD-11cf-8B85-00AA005B4383}",						#Web Platform Customizations
	"{89B4C1CD-B018-4511-B0A1-5476DBF70820}",						#DOTNETFRAMEWORKS
	"{9459C573-B17A-45AE-9F64-1857B5D58CEE}",						#Microsoft Edge
	">{22d6f312-b0f6-11d0-94ab-0080c74c7e95}"						#Microsoft Windows Media Player
)
$ActiveSetupCounter = 0
$ActiveSetupNameCounter = 0
If ($A -ne "Revert") {
	Write-Progress -Activity "Implementing Windows Active Setup General Optimizations" -Id 1051 -ParentId 105 -PercentComplete 0
	ForEach ($ActiveSetupKey in $ActiveSetupKeys) {
		$ActiveSetupName = $ActiveSetupNames[$ActiveSetupNameCounter]
		"$(Get-TimeStamp)		Attempting to optimize the $ActiveSetupName Active Setup."
		"$(Get-TimeStamp)		Checking $ActiveSetupName Active Setup for 32bit and/or 64bit registry entries."
		If (Test-Path -Path "HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\$ActiveSetupKey") {
			If ((Get-ItemProperty "HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\$ActiveSetupKey").PSObject.Properties.Name -contains "Stubpath") {
				"$(Get-TimeStamp)		64bit $ActiveSetupName Active Setup found.  Logging current setup."
				New-Item -Path "Registry::HKEY_LOCAL_MACHINE\Software\Nutanix\WOSTT\Active Setup\64bit\$ActiveSetupKey" -ErrorAction SilentlyContinue -Verbose
				$StubPath = Get-ItemPropertyValue -Path "HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\$ActiveSetupKey" -Name "Stubpath" -ErrorAction SilentlyContinue
				"$(Get-TimeStamp)		Logging the current 64bit $ActiveSetupName StubPath."
				Set-ItemProperty -Path "HKLM:\Software\Nutanix\WOSTT\Active Setup\64bit\$ActiveSetupKey" -Name $ActiveSetupName -Type "String" -Value $StubPath -ErrorAction SilentlyContinue -Verbose
				"$(Get-TimeStamp)		Attempting to optimize the 64bit $ActiveSetupName StubPath."
				Remove-ItemProperty -Path "HKLM:\Software\Microsoft\Active Setup\Installed Components\$ActiveSetupKey" -Name "StubPath" -ErrorAction SilentlyContinue -Verbose
				"$(Get-TimeStamp)		Verifying the 64bit $ActiveSetupName Active Setup optimization."
				If ((Get-ItemProperty "HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\$ActiveSetupKey").PSObject.Properties.Name -contains "Stubpath") {
					"$(Get-TimeStamp)		64bit $ActiveSetupName Active Setup not optimized.  Second attempt at optimizing Active Setup."
					Remove-ItemProperty -Path "HKLM:\Software\Microsoft\Active Setup\Installed Components\$ActiveSetupKey" -Name "StubPath" -ErrorAction SilentlyContinue -Verbose
					"$(Get-TimeStamp)		Verifying the 64bit $ActiveSetupName Active Setup optimization."
					If ((Get-ItemProperty "HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\$ActiveSetupKey").PSObject.Properties.Name -contains "Stubpath") {
						"$(Get-TimeStamp)		64bit $ActiveSetupName Active Setup not optimizing.  Logging and continuing with script."
						"$(Get-TimeStamp)		Non-Terminating Error: Unable to optimize the $ActiveSetupName Active Setup."
					}
					Else {
						"$(Get-TimeStamp)		64bit $ActiveSetupName Active Setup verified optimized."
					}
				}
				Else {
					"$(Get-TimeStamp)		64bit $ActiveSetupName Active Setup verified optimized."
				}
				"$(Get-TimeStamp)		The 64bit $ActiveSetupName Active Setup has been optimized."
			}
			Else {
				"$(Get-TimeStamp)		64bit $ActiveSetupName Active Setup not found.  Logging and continuing with script."
			}
			$ActiveSetupFound = $true
		}
		If (Test-Path -Path "HKLM:\SOFTWARE\WOW6432Node\Microsoft\Active Setup\Installed Components\$ActiveSetupKey") {
			If ((Get-ItemProperty "HKLM:\SOFTWARE\WOW6432Node\Microsoft\Active Setup\Installed Components\$ActiveSetupKey").PSObject.Properties.Name -contains "Stubpath") {
				"$(Get-TimeStamp)		32bit $ActiveSetupName Active Setup found.  Logging current setup."
				New-Item -Path "Registry::HKEY_LOCAL_MACHINE\Software\Nutanix\WOSTT\Active Setup\32bit\$ActiveSetupKey" -ErrorAction SilentlyContinue -Verbose
				$StubPath = Get-ItemPropertyValue -Path "HKLM:\SOFTWARE\WOW6432Node\Microsoft\Active Setup\Installed Components\$ActiveSetupKey" -Name "Stubpath" -ErrorAction SilentlyContinue
				"$(Get-TimeStamp)		Logging the current $ActiveSetupName StubPath."
				Set-ItemProperty -Path "HKLM:\Software\Nutanix\WOSTT\Active Setup\32bit\$ActiveSetupKey" -Name $ActiveSetupName -Type "String" -Value $StubPath -ErrorAction SilentlyContinue -Verbose
				"$(Get-TimeStamp)		Attempting to optimize the 32bit $ActiveSetupName StubPath."
				Remove-ItemProperty -Path "HKLM:\Software\Microsoft\Active Setup\Installed Components\$ActiveSetupKey" -Name "StubPath" -ErrorAction SilentlyContinue -Verbose
				"$(Get-TimeStamp)		Verifying the 32bit $ActiveSetupName Active Setup optimization."
				If ((Get-ItemProperty "HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\$ActiveSetupKey").PSObject.Properties.Name -contains "Stubpath") {
					"$(Get-TimeStamp)		32bit $ActiveSetupName Active Setup not optimized.  Second attempt at optimizing Active Setup."
					Remove-ItemProperty -Path "HKLM:\Software\Microsoft\Active Setup\Installed Components\$ActiveSetupKey" -Name "StubPath" -ErrorAction SilentlyContinue -Verbose
					"$(Get-TimeStamp)		Verifying the 32bit $ActiveSetupName Active Setup optimization."
					If ((Get-ItemProperty "HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\$ActiveSetupKey").PSObject.Properties.Name -contains "Stubpath") {
						"$(Get-TimeStamp)		32bit $ActiveSetupName Active Setup not optimized.  Second attempt at optimizing Active Setup."
					}
					Else {
						"$(Get-TimeStamp)		32bit $ActiveSetupName Active Setup verified optimized."
					}
				}
				Else {
					"$(Get-TimeStamp)		32bit $ActiveSetupName Active Setup verified optimized."
				}
				"$(Get-TimeStamp)		The 32bit $ActiveSetupName Active Setup has been optimized."
			}
			Else {
				"$(Get-TimeStamp)		32bit $ActiveSetupName Active Setup not found.  Logging and continuing with script."
			}
			$ActiveSetupFound = $true
		}
		If ($ActiveSetupFound -ne $true) {
			"$(Get-TimeStamp)		No 32bit or 64bit Active Setup found for $ActiveSetupName.  Logging and continuing with script."
		}
		"-----------------------------------------------------------------------"
		$ActiveSetupNameCounter++
		$ActiveSetupCounter++
		Clear-Variable -Name "ActiveSetupFound"
		Write-Progress -Activity "Implementing Windows Active Setup General Optimizations" -Id 1051 -ParentId 105 -PercentComplete (($ActiveSetupCounter / $ActiveSetupKeys.count) * 100)
	}
	Write-Progress -Activity "Implementing Windows Active Setup General Optimizations" -Id 1051 -ParentId 105 -PercentComplete 100 -Completed
}
If ($A -eq "Revert") {
	Write-Progress -Activity "Reverting Windows Active Setup General Optimizations" -Id 1151 -ParentId 115 -PercentComplete 0
	ForEach ($ActiveSetupKey in $ActiveSetupKeys) {
		$ActiveSetupName = $ActiveSetupNames[$ActiveSetupNameCounter]
		$Prev64bitKeyExists = Test-Path -Path "$RevertAS64\$ActiveSetupKey"
		If ($Prev64bitKeyExists -eq $True) {
			$Prev64bitStubPathExists = (Get-ItemProperty "$RevertAS64\$ActiveSetupKey").PSObject.Properties.Name -contains $ActiveSetupName
			If ($Prev64bitStubPathExists -eq $True) {
				If (Test-Path -Path "HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\$ActiveSetupKey") {
					If ((Get-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\$ActiveSetupKey").PSObject.Properties.Name -contains "StubPath" -eq $False) {
						"$(Get-TimeStamp)		64bit Active Setup for $ActiveSetupName previously existed.  Attempting to revert now."
						$Prev64bitStubPathValue = Get-ItemPropertyValue "$RevertAS64\$ActiveSetupKey" -Name $ActiveSetupName
						Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\$ActiveSetupKey" -Name StubPath -Type "String" -Value $Prev64bitStubPathValue -ErrorAction SilentlyContinue -Verbose
						"$(Get-TimeStamp)		Verifying $ActiveSetupName Active Setup reverted properly."
						If ((Get-ItemPropertyValue -Path "HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\$ActiveSetupKey" -Name "StubPath") -ne $Prev64bitStubPathValue) {
							"$(Get-TimeStamp)		The current Active Setup for $ActiveSetupName does not match the previous setting.  Attempting revert again."
							Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\$ActiveSetupKey" -Name StubPath -Type "String" -Value $Prev32bitStubPathValue -ErrorAction SilentlyContinue -Verbose
						}
						Else {
							"$(Get-TimeStamp)		The current Active Setup for $ActiveSetupName matches the previous setting.  Logging and continuing with script."
						}
					}
					Else {
						"$(Get-TimeStamp)		The current Active Setup for $ActiveSetupName matches the previous setting.  Logging and continuing with script."
					}
				}
				Else {
					New-Item -Path "HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\" -Name "$ActiveSetupKey" -ErrorAction SilentlyContinue -Verbose
					"$(Get-TimeStamp)		64bit Active Setup for $ActiveSetupName previously existed.  Attempting to revert now."
					$Prev64bitStubPathValue = Get-ItemPropertyValue "$RevertAS64\$ActiveSetupKey" -Name $ActiveSetupName
					Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\$ActiveSetupKey" -Name StubPath -Type "String" -Value $Prev64bitStubPathValue -ErrorAction SilentlyContinue -Verbose
					"$(Get-TimeStamp)		Verifying $ActiveSetupName Active Setup reverted properly."
					If ((Get-ItemPropertyValue -Path "HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\$ActiveSetupKey" -Name "StubPath") -ne $Prev64bitStubPathValue) {
						"$(Get-TimeStamp)		The current Active Setup for $ActiveSetupName does not match the previous setting.  Attempting revert again."
						Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\$ActiveSetupKey" -Name StubPath -Type "String" -Value $Prev32bitStubPathValue -ErrorAction SilentlyContinue -Verbose
					}
					Else {
						"$(Get-TimeStamp)		The current Active Setup for $ActiveSetupName matches the previous setting.  Logging and continuing with script."
					}					
				}
				"$(Get-TimeStamp)		Reverted $ActiveSetupName 64bit Active Setup Optimization."
			}
		}
		$Prev32bitKeyExists = Test-Path -Path "$RevertAS32\$ActiveSetupKey"
		If ($Prev32bitKeyExists -eq $True) {
			$Prev32bitStubPathExists = (Get-ItemProperty "$RevertAS32\$ActiveSetupKey").PSObject.Properties.Name -contains $ActiveSetupName
			If ($Prev32bitStubPathExists -eq $True) {
				If (Test-Path -Path "HKLM:\SOFTWARE\WOW6432Node\Microsoft\Active Setup\Installed Components\$ActiveSetupKey") {
					If ((Get-ItemProperty -Path "HKLM:\SOFTWARE\WOW6432Node\Microsoft\Active Setup\Installed Components\$ActiveSetupKey").PSObject.Properties.Name -contains "StubPath" -eq $False) {
						"$(Get-TimeStamp)		32bit Active Setup for $ActiveSetupName previously existed.  Attempting to revert now."
						$Prev32bitStubPathValue = Get-ItemPropertyValue "$RevertAS32\$ActiveSetupKey" -Name $ActiveSetupName
						Set-ItemProperty -Path "HKLM:\SOFTWARE\WOW6432Node\Microsoft\Active Setup\Installed Components\$ActiveSetupKey" -Name StubPath -Type "String" -Value $Prev32bitStubPathValue -ErrorAction SilentlyContinue -Verbose
						"$(Get-TimeStamp)		Verifying $ActiveSetupName reverted properly."
						If ((Get-ItemPropertyValue -Path "HKLM:\SOFTWARE\WOW6432Node\Microsoft\Active Setup\Installed Components\$ActiveSetupKey" -Name "StubPath") -ne $PrevScheduledTaskState) {
							"$(Get-TimeStamp)		The current Active Setup for $ActiveSetupName does not match the previous setting.  Attempting revert again."
							Set-ItemProperty -Path "HKLM:\SOFTWARE\WOW6432Node\Microsoft\Active Setup\Installed Components\$ActiveSetupKey" -Name StubPath -Type "String" -Value $Prev32bitStubPathValue -ErrorAction SilentlyContinue -Verbose
						}
						Else {
							"$(Get-TimeStamp)		The current Active Setup for $ActiveSetupName matches the previous setting.  Logging and continuing with script."
						}
					}
					Else {
						"$(Get-TimeStamp)		The current Active Setup for $ActiveSetupName matches the previous setting.  Logging and continuing with script."
					}
				}
				Else {
					New-Item -Path "HKLM:\SOFTWARE\WOW6432Node\Microsoft\Active Setup\Installed Components\" -Name "$ActiveSetupKey" -ErrorAction SilentlyContinue -Verbose
					"$(Get-TimeStamp)		32bit Active Setup for $ActiveSetupName previously existed.  Attempting to revert now."
					$Prev64bitStubPathValue = Get-ItemPropertyValue "$RevertAS32\$ActiveSetupKey" -Name $ActiveSetupName
					Set-ItemProperty -Path "HKLM:\SOFTWARE\WOW6432Node\Microsoft\Active Setup\Installed Components\$ActiveSetupKey" -Name StubPath -Type "String" -Value $Prev64bitStubPathValue -ErrorAction SilentlyContinue -Verbose
					"$(Get-TimeStamp)		Verifying $ActiveSetupName Active Setup reverted properly."
					If ((Get-ItemPropertyValue -Path "HKLM:\SOFTWARE\WOW6432Node\Microsoft\Active Setup\Installed Components\$ActiveSetupKey" -Name "StubPath") -ne $Prev64bitStubPathValue) {
						"$(Get-TimeStamp)		The current Active Setup for $ActiveSetupName does not match the previous setting.  Attempting revert again."
						Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\$ActiveSetupKey" -Name StubPath -Type "String" -Value $Prev32bitStubPathValue -ErrorAction SilentlyContinue -Verbose
					}
					Else {
						"$(Get-TimeStamp)		The current Active Setup for $ActiveSetupName matches the previous setting.  Logging and continuing with script."
					}					
				}
				"$(Get-TimeStamp)		Reverted $ActiveSetupName 32bit Active Setup Optimization."
			}
		}
		If ($Prev64bitKeyExists -ne $True -and $Prev32bitKeyExists -ne $True) {
			"$(Get-TimeStamp)		No reversion point for 32bit or 64bit Active Setup found for $ActiveSetupName.  Logging and continuing with script."
		}
		"-----------------------------------------------------------------------"
		$ActiveSetupNameCounter++
		$ActiveSetupCounter++
		Write-Progress -Activity "Reverting Windows Active Setup General Optimizations" -Id 1151 -ParentId 115 -PercentComplete (($ActiveSetupCounter / $ActiveSetupKeys.count) * 100)
		Clear-Variable -Name "Prev32bitKeyExists"
		Clear-Variable -Name "Prev64bitKeyExists"
	}
	Write-Progress -Activity "Reverting Windows Active Setup General Optimizations" -Id 1151 -ParentId 115 -PercentComplete 100 -Completed
}
If ($A -ne "Revert") {
	Write-Progress -Activity "Implementing Windows Active Setup Optimizations" -Id 105 -ParentId 10 -PercentComplete 50
}
If ($A -eq "Revert") {
	Write-Progress -Activity "Reverting Windows Active Setup Optimizations" -Id 115 -ParentId 11 -PercentComplete 50
}
If ($OSMajorVersion -like "*Windows Server*") {
	<#
		The below Active Setup Keys pertain to Server 2016/2019
	#>
	$ActiveSetupNames = @(
		"Outlook Express Setup",
		"Enhanced Security Configuration",
		"Enhanced Security Configuration"
	)
	$ActiveSetupKeys = @(
		"{44BBA840-CC51-11CF-AAFA-00AA00B6015C}",					#Outlook Express Setup
		"{A509B1A7-37EF-4b3f-8CFC-4F3A74704073}",					#Enhanced Security Configuration
		"{A509B1A8-37EF-4b3f-8CFC-4F3A74704073}"					#Enhanced Security Configuration
	)
	$ActiveSetupCounter = 0
	$ActiveSetupNameCounter = 0
	If ($A -ne "Revert") {
		Write-Progress -Activity "Implementing Windows Server Active Setup Optimizations" -Id 1052 -ParentId 105 -PercentComplete 0
		ForEach ($ActiveSetupKey in $ActiveSetupKeys) {
			$ActiveSetupName = $ActiveSetupNames[$ActiveSetupNameCounter]
			"$(Get-TimeStamp)		Attempting to optimize the $ActiveSetupName Active Setup."
			"$(Get-TimeStamp)		Checking $ActiveSetupName Active Setup for 32bit and/or 64bit registry entries."
			If (Test-Path -Path "HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\$ActiveSetupKey") {
				If ((Get-ItemProperty "HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\$ActiveSetupKey").PSObject.Properties.Name -contains "Stubpath") {
					"$(Get-TimeStamp)		64bit $ActiveSetupName Active Setup found.  Logging current setup."
					New-Item -Path "Registry::HKEY_LOCAL_MACHINE\Software\Nutanix\WOSTT\Active Setup\64bit\$ActiveSetupKey" -ErrorAction SilentlyContinue -Verbose
					$StubPath = Get-ItemPropertyValue -Path "HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\$ActiveSetupKey" -Name "Stubpath" -ErrorAction SilentlyContinue
					"$(Get-TimeStamp)		Logging the current 64bit $ActiveSetupName StubPath."
					Set-ItemProperty -Path "HKLM:\Software\Nutanix\WOSTT\Active Setup\64bit\$ActiveSetupKey" -Name $ActiveSetupName -Type "String" -Value $StubPath -ErrorAction SilentlyContinue -Verbose
					"$(Get-TimeStamp)		Attempting to optimize the 64bit $ActiveSetupName Active Setup."
					Remove-ItemProperty -Path "HKLM:\Software\Microsoft\Active Setup\Installed Components\$ActiveSetupKey" -Name "StubPath" -ErrorAction SilentlyContinue -Verbose
					"$(Get-TimeStamp)		Verifying the 64bit $ActiveSetupName Active Setup optimization."
					If ((Get-ItemProperty "HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\$ActiveSetupKey").PSObject.Properties.Name -contains "Stubpath") {
						"$(Get-TimeStamp)		64bit $ActiveSetupName Active Setup not optimized.  Second attempt at optimizing Active Setup."
						Remove-ItemProperty -Path "HKLM:\Software\Microsoft\Active Setup\Installed Components\$ActiveSetupKey" -Name "StubPath" -ErrorAction SilentlyContinue -Verbose
						"$(Get-TimeStamp)		Verifying the 64bit $ActiveSetupName Active Setup optimization."
						If ((Get-ItemProperty "HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\$ActiveSetupKey").PSObject.Properties.Name -contains "Stubpath") {
							"$(Get-TimeStamp)		64bit $ActiveSetupName Active Setup not optimizing.  Logging and continuining with script."
							"$(Get-TimeStamp)		Non-Terminating Error: Unable to optimize the 64bit $ActiveSetupName Active Setup."
						}
						Else {
							"$(Get-TimeStamp)		64bit $ActiveSetupName Active Setup verified optimized."
						}
					}
					Else {
						"$(Get-TimeStamp)		64bit $ActiveSetupName Active Setup verified optimized."
					}
				}
				Else {
					"$(Get-TimeStamp)		64bit $ActiveSetupName Active Setup not found.  Logging and continuing with script."
				}
				$ActiveSetupFound = $true
			}
			If (Test-Path -Path "HKLM:\SOFTWARE\WOW6432Node\Microsoft\Active Setup\Installed Components\$ActiveSetupKey") {
				If ((Get-ItemProperty "HKLM:\SOFTWARE\WOW6432Node\Microsoft\Active Setup\Installed Components\$ActiveSetupKey").PSObject.Properties.Name -contains "Stubpath") {
					"$(Get-TimeStamp)		32bit $ActiveSetupName Active Setup found.  Logging current setup."
					New-Item -Path "Registry::HKEY_LOCAL_MACHINE\Software\Nutanix\WOSTT\Active Setup\32bit\$ActiveSetupKey" -ErrorAction SilentlyContinue -Verbose
					$StubPath = Get-ItemPropertyValue -Path "HKLM:\SOFTWARE\WOW6432Node\Microsoft\Active Setup\Installed Components\$ActiveSetupKey" -Name "Stubpath" -ErrorAction SilentlyContinue
					"$(Get-TimeStamp)		Logging current 32bit $ActiveSetupName Stubpath."
					Set-ItemProperty -Path "HKLM:\Software\Nutanix\WOSTT\Active Setup\32bit\$ActiveSetupKey" -Name $ActiveSetupName -Type "String" -Value $StubPath -ErrorAction SilentlyContinue -Verbose
					"$(Get-TimeStamp)		Attempting to optimize the 32bit $ActiveSetupName Active Setup."
					Remove-ItemProperty -Path "HKLM:\Software\Wow6432Node\Microsoft\Active Setup\Installed Components\$ActiveSetupKey" -Name "StubPath" -ErrorAction SilentlyContinue -Verbose
					"$(Get-TimeStamp)		Verifying the 32bit $ActiveSetupName Active Setup optimization."
					If ((Get-ItemProperty "HKLM:\SOFTWARE\WOW6432Node\Microsoft\Active Setup\Installed Components\$ActiveSetupKey").PSObject.Properties.Name -contains "Stubpath") {
						"$(Get-TimeStamp)		32bit $ActiveSetupName Active Setup not optimized.  Second attempt at optimizing Active Setup."
						Remove-ItemProperty -Path "HKLM:\Software\Wow6432Node\Microsoft\Active Setup\Installed Components\$ActiveSetupKey" -Name "StubPath" -ErrorAction SilentlyContinue -Verbose
						"$(Get-TimeStamp)		Verifying the 32bit $ActiveSetupName Active Setup optimization."
						If ((Get-ItemProperty "HKLM:\SOFTWARE\WOW6432Node\Microsoft\Active Setup\Installed Components\$ActiveSetupKey").PSObject.Properties.Name -contains "Stubpath") {
							"$(Get-TimeStamp)		32bit $ActiveSetupName Active Setup not optimizing.  Logging and continuing with script."
							"$(Get-TimeStamp)		Non-Terminating Error: Unable to optimize the 32bit $ActiveSetupName Active Setup."
						}
						Else {
							"$(Get-TimeStamp)		32bit $ActiveSetupName Active Setup verified optimized."
						}
					}
					Else {
						"$(Get-TimeStamp)		32bit $ActiveSetupName Active Setup verified optimized."
					}
				}
				Else {
					"$(Get-TimeStamp)		32bit $ActiveSetupName Active Setup not found.  Logging and continuing with script."
				}
				$ActiveSetupFound = $true
			}
			If ($ActiveSetupFound -ne $true) {
				"$(Get-TimeStamp)		No 32bit or 64bit Active Setup found for $ActiveSetupName.  Logging and continuing with script."
			}
			"-----------------------------------------------------------------------"
			$ActiveSetupNameCounter++
			$ActiveSetupCounter++
			Write-Progress -Activity "Implementing Windows Server Active Setup Optimizations" -Id 1052 -ParentId 105 -PercentComplete (($ActiveSetupCounter / $ActiveSetupKeys.count) * 100)
		}
		Write-Progress -Activity "Implementing Windows Server Active Setup Optimizations" -Id 1052 -ParentId 105 -PercentComplete 100 -Completed
	}
	If ($A -eq "Revert") {
		Write-Progress -Activity "Reverting Windows Server Active Setup Optimizations" -Id 1152 -ParentId 115 -PercentComplete 0
		ForEach ($ActiveSetupKey in $ActiveSetupKeys) {
			$ActiveSetupName = $ActiveSetupNames[$ActiveSetupNameCounter]
			$Prev64bitKeyExists = Test-Path -Path "$RevertAS64\$ActiveSetupKey"
			If ($Prev64bitKeyExists -eq $True) {
				$Prev64bitStubPathExists = (Get-ItemProperty "$RevertAS64\$ActiveSetupKey").PSObject.Properties.Name -contains $ActiveSetupName
				If ($Prev64bitStubPathExists -eq $True) {
					If (Test-Path -Path "HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\$ActiveSetupKey") {
						If ((Get-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\$ActiveSetupKey").PSObject.Properties.Name -contains "StubPath" -eq $False) {
							"$(Get-TimeStamp)		64bit Active Setup for $ActiveSetupName previously existed.  Attempting to revert now."
							$Prev64bitStubPathValue = Get-ItemPropertyValue "$RevertAS64\$ActiveSetupKey" -Name $ActiveSetupName
							Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\$ActiveSetupKey" -Name StubPath -Type "String" -Value $Prev64bitStubPathValue -ErrorAction SilentlyContinue -Verbose
							"$(Get-TimeStamp)		Verifying $ActiveSetupName reverted properly."
							If ((Get-ItemPropertyValue -Path "HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\$ActiveSetupKey" -Name "StubPath") -ne $PrevScheduledTaskState) {
								"$(Get-TimeStamp)		The current Active Setup for $ActiveSetupName does not match the previous setting.  Attempting revert again."
								Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\$ActiveSetupKey" -Name StubPath -Type "String" -Value $Prev32bitStubPathValue -ErrorAction SilentlyContinue -Verbose
							}
							Else {
								"$(Get-TimeStamp)		The current Active Setup for $ActiveSetupName matches the previous setting.  Logging and continuing with script."
							}
						}
						Else {
							"$(Get-TimeStamp)		The current Active Setup for $ActiveSetupName matches the previous setting.  Logging and continuing with script."
						}
					}
					Else {
						New-Item -Path "HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\" -Name "$ActiveSetupKey" -ErrorAction SilentlyContinue -Verbose
						"$(Get-TimeStamp)		64bit Active Setup for $ActiveSetupName previously existed.  Attempting to revert now."
						$Prev64bitStubPathValue = Get-ItemPropertyValue "$RevertAS64\$ActiveSetupKey" -Name $ActiveSetupName
						Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\$ActiveSetupKey" -Name StubPath -Type "String" -Value $Prev64bitStubPathValue -ErrorAction SilentlyContinue -Verbose
						"$(Get-TimeStamp)		Verifying $ActiveSetupName Active Setup reverted properly."
						If ((Get-ItemPropertyValue -Path "HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\$ActiveSetupKey" -Name "StubPath") -ne $Prev64bitStubPathValue) {
							"$(Get-TimeStamp)		The current Active Setup for $ActiveSetupName does not match the previous setting.  Attempting revert again."
							Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\$ActiveSetupKey" -Name StubPath -Type "String" -Value $Prev32bitStubPathValue -ErrorAction SilentlyContinue -Verbose
						}
						Else {
							"$(Get-TimeStamp)		The current Active Setup for $ActiveSetupName matches the previous setting.  Logging and continuing with script."
						}				
					}
				}
				"$(Get-TimeStamp)            Reverted $ActiveSetupName 64bit Active Setup Optimization."
			}
			$Prev32bitKeyExists = Test-Path -Path "$RevertAS32\$ActiveSetupKey"
			If ($Prev32bitKeyExists -eq $True) {
				$Prev32bitStubPathExists = (Get-ItemProperty "$RevertAS32\$ActiveSetupKey").PSObject.Properties.Name -contains $ActiveSetupName
				If ($Prev32bitStubPathExists -eq $True) {
					If (Test-Path -Path "HKLM:\SOFTWARE\WOW6432Node\Microsoft\Active Setup\Installed Components\$ActiveSetupKey") {
						If ((Get-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\$ActiveSetupKey").PSObject.Properties.Name -contains "StubPath" -eq $False) {
							"$(Get-TimeStamp)		32bit Active Setup for $Prev32bitStubPathExists previously existed.  Attempting to revert now."
							$Prev32bitStubPathValue = Get-ItemPropertyValue "$RevertAS32\$ActiveSetupKey" -Name $ActiveSetupName
							Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\$ActiveSetupKey" -Name StubPath -Type "String" -Value $Prev32bitStubPathValue -ErrorAction SilentlyContinue -Verbose
							"$(Get-TimeStamp)		Verifying $Prev32bitStubPathExists reverted properly."
							If ((Get-ItemPropertyValue -Path "HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\$ActiveSetupKey" -Name "StubPath") -ne $PrevScheduledTaskState) {
								"$(Get-TimeStamp)		The current Active Setup for $Prev32bitStubPathExists does not match the previous setting.  Attempting revert again."
								Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\$ActiveSetupKey" -Name StubPath -Type "String" -Value $Prev32bitStubPathValue -ErrorAction SilentlyContinue -Verbose
							}
							Else {
								"$(Get-TimeStamp)		The current Active Setup for $Prev32bitStubPathExists matches the previous setting.  Logging and continuing with script."
							}
						}
						Else {
							"$(Get-TimeStamp)		The current Active Setup for $Prev32bitStubPathExists matches the previous setting.  Logging and continuing with script."
						}
					}
					Else {
						New-Item -Path "HKLM:\SOFTWARE\WOW6432Node\Microsoft\Active Setup\Installed Components\" -Name "$ActiveSetupKey" -ErrorAction SilentlyContinue -Verbose
						"$(Get-TimeStamp)		32bit Active Setup for $ActiveSetupName previously existed.  Attempting to revert now."
						$Prev64bitStubPathValue = Get-ItemPropertyValue "$RevertAS32\$ActiveSetupKey" -Name $ActiveSetupName
						Set-ItemProperty -Path "HKLM:\SOFTWARE\WOW6432Node\Microsoft\Active Setup\Installed Components\$ActiveSetupKey" -Name StubPath -Type "String" -Value $Prev64bitStubPathValue -ErrorAction SilentlyContinue -Verbose
						"$(Get-TimeStamp)		Verifying $ActiveSetupName Active Setup reverted properly."
						If ((Get-ItemPropertyValue -Path "HKLM:\SOFTWARE\WOW6432Node\Microsoft\Active Setup\Installed Components\$ActiveSetupKey" -Name "StubPath") -ne $Prev64bitStubPathValue) {
							"$(Get-TimeStamp)		The current Active Setup for $ActiveSetupName does not match the previous setting.  Attempting revert again."
							Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\$ActiveSetupKey" -Name StubPath -Type "String" -Value $Prev32bitStubPathValue -ErrorAction SilentlyContinue -Verbose
						}
						Else {
							"$(Get-TimeStamp)		The current Active Setup for $ActiveSetupName matches the previous setting.  Logging and continuing with script."
						}		
					}
				}
				"$(Get-TimeStamp)            Reverted $ActiveSetupName 32bit Active Setup Optimization."
			}
			If ($Prev64bitKeyExists -ne $True -and $Prev32bitKeyExists -ne $True) {
				"$(Get-TimeStamp)		No reversion point for 32bit or 64bit Active Setup found for $ActiveSetupName.  Logging and continuing with script."
			}
			"-----------------------------------------------------------------------"
			$ActiveSetupNameCounter++
			$ActiveSetupCounter++
			Write-Progress -Activity "Reverting Windows Server Active Setup Optimizations" -Id 1152 -ParentId 115 -PercentComplete (($ActiveSetupCounter / $ActiveSetupKeys.count) * 100)
			Clear-Variable -Name "Prev32bitKeyExists"
			Clear-Variable -Name "Prev64bitKeyExists"
		}
		Write-Progress -Activity "Reverting Windows Server Active Setup Optimizations" -Id 1152 -ParentId 115 -PercentComplete 100 -Completed
	}
}
If ($A -ne "Revert") {
	Write-Progress -Activity "Implementing Windows Active Setup Optimizations" -Id 105 -ParentId 10 -PercentComplete 100 -Completed
	"$(Get-TimeStamp)		End Of Implementing"
}
If ($A -eq "Revert") {
	Write-Progress -Activity "Reverting Windows Active Setup Optimizations" -Id 115 -ParentId 11 -PercentComplete 100 -Completed
	"$(Get-TimeStamp)		End Of Reverting"
}
"					$OSMajorVersion $OSMinorVersion"
"					Active Setup Optimizations."
"-----------------------------------------------------------------------"
#region Stop Active Setup Script Timer
$ASScriptElapsedMins = $ASScriptStopWatch.Elapsed.Minutes
$ASScriptElapsedSecs = $ASScriptStopWatch.Elapsed.Seconds
$ASScriptStopWatch.Stop()
#endregion Stop Active Setup Script Timer

$OSOpsCounter++
If ($A -ne "Revert") {
	Write-Progress -Activity "Implementing Windows Operating System Optimizations" -Id 10 -ParentId 0 -PercentComplete (($OSOpsCounter / $OSOps) * 100)
}
If ($A -eq "Revert") {
Write-Progress -Activity "Reverting Windows Operating System Optimizations" -Id 11 -ParentId 1 -PercentComplete (($OSOpsCounter / $OSOps) * 100)
}
$OPsCounter++
If ($A -ne "Revert") {
	Write-Progress -Activity "Implementing Windows Optimizations" -Id 0 -PercentComplete (($OpsCounter / $Ops) * 100)
}
If ($A -eq "Revert") {
	Write-Progress -Activity "Reverting Windows Optimizations" -Id 1 -PercentComplete (($OpsCounter / $Ops) * 100)
}
#endregion Active Setup Optimizations

#region Autologger Optimizations
<#
	Disables Autologgers
	Autologgers are started at boot, so any disabled Autologgers will require a restart
	What is an autologger? - https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/what-is-an-autologger-
	What is a trace session? - https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/trace-session
	What is trace during boot? - https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/tracing-during-boot
#>
#region Start Autologger Script Timer
$ALScriptStopWatch = [System.Diagnostics.Stopwatch]::StartNew()
#endregion Start Autologger Script Timer
If ($A -ne "Revert") {
Write-Progress -Activity "Implementing Windows Autologger Optimizations" -Id 106 -ParentId 10 -PercentComplete 0
	"$(Get-TimeStamp)		Beginning Of Implementing"
}
If ($A -eq "Revert") {
	Write-Progress -Activity "Reverting Windows Autologger Optimizations" -Id 116 -ParentId 11 -PercentComplete 0
	"$(Get-TimeStamp)		Beginning Of Reverting"
}
"					$OSMajorVersion $OSMinorVersion"
"					Autologger Optimizations."
"-----------------------------------------------------------------------"
$Autologgers = @(
    # (DO NOT ENABLE - To be researched further) "AppModel",		#	https://docs.microsoft.com/en-us/windows/win32/api/appmodel/
	"Cellcore",														#	https://docs.microsoft.com/en-us/windows-hardware/drivers/network/cellular-architecture-and-driver-model
    "CloudExperienceHostOOBE",										#	https://docs.microsoft.com/en-us/windows/security/identity-protection/hello-for-business/hello-how-it-works-technology#cloud-experience-host
    "DiagLog",														#	https://docs.microsoft.com/en-us/windows-server/security/windows-services/security-guidelines-for-disabling-system-services-in-windows-server
	"Diagtrack-Listener",											#	Telemetry based Trace Session
	# (DO NOT ENABLE - To be researched further) "RadioMgr",		#	https://docs.microsoft.com/en-us/windows-hardware/drivers/nfc/what-s-new-in-nfc-device-drivers
	"ReadyBoot",													#	https://docs.microsoft.com/en-us/previous-versions/windows/desktop/xperf/readyboot-analysis
    "WDIContextLog",												#	https://docs.microsoft.com/en-us/windows-hardware/drivers/network/wifi-universal-driver-model
    "WiFiDriverIHVSession",											#	https://docs.microsoft.com/en-us/windows-hardware/drivers/network/user-initiated-feedback-normal-mode
	"WiFiSession"
	# (DO NOT ENABLE - To be researched further) "WinPhoneCritical"
)
$AutoLoggerCounter = 0
If ($A -ne "Revert") {
	ForEach($Autologger in $Autologgers) {
		"$(Get-TimeStamp)		Attempting to optimize the $Autologger Autologger."
		"$(Get-TimeStamp)		Checking existence of the $Autologger Autologger."
		If (Get-AutologgerConfig -Name $Autologger -ErrorAction SilentlyContinue) {
			$AutologgerStart = (Get-AutologgerConfig -Name $Autologger).Start
			"$(Get-TimeStamp)		The $Autologger Autologger has been found.  Logging current Autologger Start State."
			If ((Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\WMI\Autologger\$Autologger").PSObject.Properties.Name -contains "Start") {
				Set-ItemProperty -Path "HKLM:\Software\Nutanix\WOSTT\Autologger" -Name $Autologger -Type "DWORD" -Value $AutologgerStart -ErrorAction SilentlyContinue -Verbose
				If ((Get-AutologgerConfig -Name $Autologger).Start -eq "1") {
					"$(Get-TimeStamp)		The $Autologger Autologger Start State is set to Start.  First attempt to optimize Autologger."
					Set-AutologgerConfig -Name $Autologger -Start 0 -ErrorAction SilentlyContinue -Verbose
					"$(Get-TimeStamp)		Verifying optimization of the $Autologger Autologger."
					If ((Get-AutologgerConfig -Name $Autologger).Start -eq "1") {
						"$(Get-TimeStamp)		The $Autologger Autologger Start State is still set to Start.  Second attempt to optimize Autologger."
						Set-AutologgerConfig -Name $Autologger -Start 0 -ErrorAction SilentlyContinue -Verbose
						"$(Get-TimeStamp)		Verifying optimization of the $Autologger Autologger."
						If ((Get-AutologgerConfig -Name $Autologger).Start -eq "1") {
							"$(Get-TimeStamp)		The $Autologger Autologger Start State is still set to Start.  Logging and continuing with script."
							"$(Get-TimeStamp)		Non-Terminating Error: Unable to optimize the $Autologger Autologger."
						}
						ElseIf ((Get-AutologgerConfig -Name $Autologger).Start -eq "0") {
							"$(Get-TimeStamp)		The $Autologger Autologger verified optimized."
						}
					}
					ElseIf ((Get-AutologgerConfig -Name $Autologger).Start -eq "0") {
						"$(Get-TimeStamp)		The $Autologger Autologger verified optimized."
					}
				}
				ElseIf ((Get-AutologgerConfig -Name $Autologger).Start -eq "0") {
					"$(Get-TimeStamp)		The $Autologger Autologger Start State is set to Disabled.  Logging and continuing with script."
				}
				"$(Get-TimeStamp)		The $Autologger Autologger has been optimized."
			}
			Else {
				"$(Get-TimeStamp)		The $Autologger Autologger doesn't contain a Start State.  Logging and continuing with script."
				Set-ItemProperty -Path "HKLM:\Software\Nutanix\WOSTT\Autologger" -Name $Autologger -Type "String" -Value "DNE" -ErrorAction SilentlyContinue -Verbose
			}
		}
		Else {
			"$(Get-TimeStamp)		The $Autologger Autologger was not found.  Logging and continuing with script."
		}
		"-----------------------------------------------------------------------"
		$AutoLoggerCounter++
		Write-Progress -Activity "Implementing Windows Autologger Optimizations" -Id 106 -ParentId 10 -PercentComplete (($AutoLoggerCounter / $Autologgers.count) * 100)
	}
}
If ($A -eq "Revert") {
	ForEach($Autologger in $Autologgers) {
		"$(Get-TimeStamp)		Attempting to revert optimizations for the $Autologger Autologger."
		"$(Get-TimeStamp)		Checking existence of the $Autologger Autologger."
		If (Get-AutologgerConfig -Name $Autologger -ErrorAction SilentlyContinue) {
			"$(Get-TimeStamp)		The $Autologger Autologger has been found.  Checking Autologger state."
			$CurrentAutologgerState = (Get-AutologgerConfig -Name $Autologger).Start
			If ($CurrentAutologgerState -eq "0") {
				$CurrentAutologgerStartup = "Disabled"
			}
			ElseIf ($CurrentAutologgerState -eq "1") {
				$CurrentAutologgerStartup = "Enabled"
			}
			$PrevAutologgerState = Get-ItemPropertyValue -Path $RevertAL -Name $Autologger
			If ($PrevAutologgerState -eq "0") {
				$PrevAutologgerStartup = "Disabled"
			}
			ElseIf ($PrevAutologgerState -eq "1") {
				$PrevAutologgerStartup = "Enabled"
			}
			If ($PrevAutologgerState -ne "DNE") {
				"$(Get-TimeStamp)		The current $Autologger Autologger State is $CurrentAutologgerStartup.  The previous Autologger State was $PrevAutologgerStartup."
				If ($CurrentAutologgerState -ne $PrevAutologgerState) {
					"$(Get-TimeStamp)		The current $Autologger Autologger State does not match the previous Autologger State.  First attempt at reverting the optimization for the Autologger."
					Set-AutologgerConfig -Name $Autologger -Start $PrevAutologgerState -ErrorAction SilentlyContinue -Verbose
					"$(Get-TimeStamp)		Verifying reversion of the $Autologger Autologger."
					$CurrentAutologgerState = (Get-AutologgerConfig -Name $Autologger).Start
					If ($CurrentAutologgerState -ne $PrevAutologgerState) {
						"$(Get-TimeStamp)		The current $Autologger Autologger State still does not match the previous Autologger State.  Second attempt at reverting the optimization for the Autologger."
						Set-AutologgerConfig -Name $Autologger -Start $PrevAutologgerState -ErrorAction SilentlyContinue -Verbose
						"$(Get-TimeStamp)		Verifying reversion of the $Autologger Autologger."
						$CurrentAutologgerState = (Get-AutologgerConfig -Name $Autologger).Start
						If ($CurrentAutologgerState -ne $PrevAutologgerState) {
							"$(Get-TimeStamp)		The current $Autologger Autologger State still does not match the previous Autologger State.  Logging and continuing with script."
							"$(Get-TimeStamp)		Non-Terminating Error: Unable to revert the optimization for the $Autologger Autologger."
						}
						Else {
							"$(Get-TimeStamp)		The $Autologger Autologger optimization has been verified as reverted."
						}
					}
					Else {
						"$(Get-TimeStamp)		The $Autologger Autologger optimization has been verified as reverted."
					}
				}
				Else {
					"$(Get-TimeStamp)		The $Autologger Autologger current and previous state match.  Logging and continuing with script."
				}
			}
			Else {
				"$(Get-TimeStamp)		The previous $Autologger Autologger State did not exist.  Logging and continuing with script."
			}
		}
		Else {
			"$(Get-TimeStamp)		The $Autologger Autologger was not found.  Logging and continuing with script."
		}
		"-----------------------------------------------------------------------"
		$AutoLoggerCounter++
		Write-Progress -Activity "Reverting Windows Autologger Optimizations" -Id 116 -ParentId 11 -PercentComplete (($AutoLoggerCounter / $Autologgers.count) * 100)
	}
}
If ($A -ne "Revert") {
	Write-Progress -Activity "Implementing Windows Autologger Optimizations" -Id 106 -ParentId 10 -PercentComplete 100 -Completed
	"$(Get-TimeStamp)		End Of Implementing"
}
If ($A -eq "Revert") {
	Write-Progress -Activity "Reverting Windows Autologger Optimizations" -Id 116 -ParentId 11 -PercentComplete 100 -Completed
	"$(Get-TimeStamp)		End Of Reverting"
}
"					$OSMajorVersion $OSMinorVersion"
"					Autologger Optimizations."
"-----------------------------------------------------------------------"
#region Stop Autologger Script Timer
$ALScriptElapsedMins = $ALScriptStopWatch.Elapsed.Minutes
$ALScriptElapsedSecs = $ALScriptStopWatch.Elapsed.Seconds
$ALScriptStopWatch.Stop()
#endregion Stop Autologger Script Timer

$OSOpsCounter++
If ($A -ne "Revert") {
	Write-Progress -Activity "Implementing Windows Operating System Optimizations" -Id 10 -ParentId 0 -PercentComplete (($OSOpsCounter / $OSOps) * 100)
}
If ($A -eq "Revert") {
Write-Progress -Activity "Reverting Windows Operating System Optimizations" -Id 11 -ParentId 1 -PercentComplete (($OSOpsCounter / $OSOps) * 100)
}
$OPsCounter++
If ($A -ne "Revert") {
	Write-Progress -Activity "Implementing Windows Optimizations" -Id 0 -PercentComplete (($OpsCounter / $Ops) * 100)
}
If ($A -eq "Revert") {
	Write-Progress -Activity "Reverting Windows Optimizations" -Id 1 -PercentComplete (($OpsCounter / $Ops) * 100)
}
#endregion Autologger Optimizations

#region Generic VDI Settings Optimizations
<#
	Generic VDI Settings Optimizations
#>
#region Start Generic VDI Script Timer
$GenVDIScriptStopWatch = [System.Diagnostics.Stopwatch]::StartNew()
#endregion Start Generic VDI Script Timer
If ($A -ne "Revert") {
	Write-Progress -Activity "Implementing Generic VDI Setting Optimizations" -Id 107 -ParentId 10 -PercentComplete 0
	"$(Get-TimeStamp)		Beginning Of Implementing"
}
If ($A -eq "Revert") {
	Write-Progress -Activity "Reverting Generic VDI Setting Optimizations" -Id 117 -ParentId 11 -PercentComplete 0
	"$(Get-TimeStamp)		Beginning Of Reverting"
}
"					$OSMajorVersion $OSMinorVersion"
"					Generic VDI Optimizations."
"-----------------------------------------------------------------------"
If ($A -ne "Revert") {
	$VDIOpsCounter = 0

	If ($OSMajorVersion -like "*Windows 10*") {
		$VDIOps = "48"
	}
	Else {
		$VDIOps = "42"
	}
	#	Enable or Disable font smoothing in Windows - https://www.tenforums.com/tutorials/126775-enable-disable-font-smoothing-windows.html
	$Key = "Registry::HKEY_USERS\.DEFAULT\Control Panel\Desktop"
	$KeyExists = Test-Path $Key
	If ($KeyExists -ne "True") {
		New-Item -Path $Key -Force -Verbose
	}
	$ValueName = "FontSmoothing"
	$ValueType = "String"
	$ActualValue = (Get-ItemProperty $Key).$ValueName
	$DesiredValue = "0"
	If (($Key).$ValueName) {
		$ActualValue = (Get-ItemProperty $Key).$ValueName
		If ($ActualValue -ne $DesiredValue) {
			"$(Get-TimeStamp)		$ValueName Actual Value does not equal Desired Value.  Capturing Actual Value and then implementing Desired Value."
			Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type $ValueType -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
			Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
		}
		Else {
			"$(Get-TimeStamp)		$ValueName Actual Name matches Desired Value.  Neither Capturing Actual Value nor changing Desired Value."
		}
	}
	If (-not($Key).$ValueName) {
		"$(Get-TimeStamp)		$ValueName Actual Value does not exist.  Capturing and then implementing Desired Value."
		$ActualValue = "DNE"
		Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type "String" -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
		Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
	}
	"-----------------------------------------------------------------------"
	$VDIOPsCounter++
	Write-Progress -Activity "Implementing Generic VDI Setting Optimizations" -Id 107 -ParentId 10 -PercentComplete (($VDIOpsCounter / $VDIOps) * 100)

	$ValueName = "UserPreferencesMask"
	$ValueType = "Binary"
	$DesiredValue = (0x90,0x12,0x01,0x80,0x10,0x00,0x00,0x00)
	If (($Key).$ValueName) {
		$ActualValue = (Get-ItemProperty $Key).$ValueName
		If ($ActualValue -ne $DesiredValue) {
			"$(Get-TimeStamp)		$ValueName Actual Value does not equal Desired Value.  Capturing Actual Value and then implementing Desired Value."
			Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type $ValueType -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
			Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
		}
		Else {
			"$(Get-TimeStamp)		$ValueName Actual Name matches Desired Value.  Neither Capturing Actual Value nor changing Desired Value."
		}
	}
	If (-not($Key).$ValueName) {
		"$(Get-TimeStamp)		$ValueName Actual Value does not exist.  Capturing and then implementing Desired Value."
		$ActualValue = "DNE"
		Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type "String" -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
		Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
	}
	"-----------------------------------------------------------------------"
	$VDIOPsCounter++
	Write-Progress -Activity "Implementing Generic VDI Setting Optimizations" -Id 107 -ParentId 10 -PercentComplete (($VDIOpsCounter / $VDIOps) * 100)

	$ValueName = "CursorBlinkRate"
	$ValueType = "String"
	$DesiredValue = "-1"
	If (($Key).$ValueName) {
		$ActualValue = (Get-ItemProperty $Key).$ValueName
		If ($ActualValue -ne $DesiredValue) {
			"$(Get-TimeStamp)		$ValueName Actual Value does not equal Desired Value.  Capturing Actual Value and then implementing Desired Value."
			Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type $ValueType -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
			Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
		}
		Else {
			"$(Get-TimeStamp)		$ValueName Actual Name matches Desired Value.  Neither Capturing Actual Value nor changing Desired Value."
		}
	}
	If (-not($Key).$ValueName) {
		"$(Get-TimeStamp)		$ValueName Actual Value does not exist.  Capturing and then implementing Desired Value."
		$ActualValue = "DNE"
		Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type "String" -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
		Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
	}
	"-----------------------------------------------------------------------"
	$VDIOPsCounter++
	Write-Progress -Activity "Implementing Generic VDI Setting Optimizations" -Id 107 -ParentId 10 -PercentComplete (($VDIOpsCounter / $VDIOps) * 100)

	$ValueName = "ScreenSaveActive"
	$ValueType = "String"
	$DesiredValue = "0"
	If (($Key).$ValueName) {
		$ActualValue = (Get-ItemProperty $Key).$ValueName
		If ($ActualValue -ne $DesiredValue) {
			"$(Get-TimeStamp)		$ValueName Actual Value does not equal Desired Value.  Capturing Actual Value and then implementing Desired Value."
			Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type $ValueType -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
			Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
		}
		Else {
			"$(Get-TimeStamp)		$ValueName Actual Name matches Desired Value.  Neither Capturing Actual Value nor changing Desired Value."
		}
	}
	If (-not($Key).$ValueName) {
		"$(Get-TimeStamp)		$ValueName Actual Value does not exist.  Capturing and then implementing Desired Value."
		$ActualValue = "DNE"
		Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type "String" -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
		Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
	}
	"-----------------------------------------------------------------------"
	$VDIOPsCounter++
	Write-Progress -Activity "Implementing Generic VDI Setting Optimizations" -Id 107 -ParentId 10 -PercentComplete (($VDIOpsCounter / $VDIOps) * 100)

	$ValueName = "AutoEndTasksValue"
	$ValueType = "DWord"
	$DesiredValue = "1"
	If (($Key).$ValueName) {
		$ActualValue = (Get-ItemProperty $Key).$ValueName
		If ($ActualValue -ne $DesiredValue) {
			"$(Get-TimeStamp)		$ValueName Actual Value does not equal Desired Value.  Capturing Actual Value and then implementing Desired Value."
			Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type $ValueType -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
			Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
		}
		Else {
			"$(Get-TimeStamp)		$ValueName Actual Name matches Desired Value.  Neither Capturing Actual Value nor changing Desired Value."
		}
	}
	If (-not($Key).$ValueName) {
		"$(Get-TimeStamp)		$ValueName Actual Value does not exist.  Capturing and then implementing Desired Value."
		$ActualValue = "DNE"
		Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type "String" -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
		Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
	}
	"-----------------------------------------------------------------------"
	$VDIOPsCounter++
	Write-Progress -Activity "Implementing Generic VDI Setting Optimizations" -Id 107 -ParentId 10 -PercentComplete (($VDIOpsCounter / $VDIOps) * 100)

	$ValueName = "WaittoKillAppTimeout"
	$ValueType = "DWord"
	$DesiredValue = "1000"
	If (($Key).$ValueName) {
		$ActualValue = (Get-ItemProperty $Key).$ValueName
		If ($ActualValue -ne $DesiredValue) {
			"$(Get-TimeStamp)		$ValueName Actual Value does not equal Desired Value.  Capturing Actual Value and then implementing Desired Value."
			Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type $ValueType -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
			Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
		}
		Else {
			"$(Get-TimeStamp)		$ValueName Actual Name matches Desired Value.  Neither Capturing Actual Value nor changing Desired Value."
		}
	}
	If (-not($Key).$ValueName) {
		"$(Get-TimeStamp)		$ValueName Actual Value does not exist.  Capturing and then implementing Desired Value."
		$ActualValue = "DNE"
		Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type "String" -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
		Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
	}
	"-----------------------------------------------------------------------"
	$VDIOPsCounter++
	Write-Progress -Activity "Implementing Generic VDI Setting Optimizations" -Id 107 -ParentId 10 -PercentComplete (($VDIOpsCounter / $VDIOps) * 100)

	$ValueName = "MenuShowDelay"
	$ValueType = "String"
	$DesiredValue = "0"
	If (($Key).$ValueName) {
		$ActualValue = (Get-ItemProperty $Key).$ValueName
		If ($ActualValue -ne $DesiredValue) {
			"$(Get-TimeStamp)		$ValueName Actual Value does not equal Desired Value.  Capturing Actual Value and then implementing Desired Value."
			Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type $ValueType -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
			Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
		}
		Else {
			"$(Get-TimeStamp)		$ValueName Actual Name matches Desired Value.  Neither Capturing Actual Value nor changing Desired Value."
		}
	}
	If (-not($Key).$ValueName) {
		"$(Get-TimeStamp)		$ValueName Actual Value does not exist.  Capturing and then implementing Desired Value."
		$ActualValue = "DNE"
		Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type "String" -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
		Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
	}
	"-----------------------------------------------------------------------"
	$VDIOPsCounter++
	Write-Progress -Activity "Implementing Generic VDI Setting Optimizations" -Id 107 -ParentId 10 -PercentComplete (($VDIOpsCounter / $VDIOps) * 100)

	$ValueName = "MinAnimate"
	$ValueType = "String"
	$DesiredValue = "0"
	If (($Key).$ValueName) {
		$ActualValue = (Get-ItemProperty $Key).$ValueName
		If ($ActualValue -ne $DesiredValue) {
			"$$(Get-TimeStamp)		ValueName Actual Value does not equal Desired Value.  Capturing Actual Value and then implementing Desired Value."
			Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type $ValueType -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
			Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
		}
		Else {
			"$(Get-TimeStamp)		$ValueName Actual Name matches Desired Value.  Neither Capturing Actual Value nor changing Desired Value."
		}
	}
	If (-not($Key).$ValueName) {
		"$(Get-TimeStamp)		$ValueName Actual Value does not exist.  Capturing and then implementing Desired Value."
		$ActualValue = "DNE"
		Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type "String" -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
		Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
	}
	"-----------------------------------------------------------------------"
	$VDIOPsCounter++
	Write-Progress -Activity "Implementing Generic VDI Setting Optimizations" -Id 107 -ParentId 10 -PercentComplete (($VDIOpsCounter / $VDIOps) * 100)

	$Key = "Registry::HKEY_USERS\.DEFAULT\Software\Microsoft\Internet Explorer\Main"
	$KeyExists = Test-Path $Key
	If ($KeyExists -ne "True") {
		New-Item -Path $Key -Force -Verbose
	}
	$ValueName = "Force Offscreen Composition"
	$ValueType = "DWord"
	$DesiredValue = "1"
	If (($Key).$ValueName) {
		$ActualValue = (Get-ItemProperty $Key).$ValueName
		If ($ActualValue -ne $DesiredValue) {
			"$(Get-TimeStamp)		$ValueName Actual Value does not equal Desired Value.  Capturing Actual Value and then implementing Desired Value."
			Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type $ValueType -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
			Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
		}
		Else {
			"$(Get-TimeStamp)		$ValueName Actual Name matches Desired Value.  Neither Capturing Actual Value nor changing Desired Value."
		}
	}
	If (-not($Key).$ValueName) {
		"$(Get-TimeStamp)		$ValueName Actual Value does not exist.  Capturing and then implementing Desired Value."
		$ActualValue = "DNE"
		Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type "String" -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
		Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
	}
	"-----------------------------------------------------------------------"
	$VDIOPsCounter++
	Write-Progress -Activity "Implementing Generic VDI Setting Optimizations" -Id 107 -ParentId 10 -PercentComplete (($VDIOpsCounter / $VDIOps) * 100)

	$Key = "Registry::HKEY_USERS\.DEFAULT\Software\Microsoft\Terminal Server Client"
	$KeyExists = Test-Path $Key
	If ($KeyExists -ne "True") {
		New-Item -Path $Key -Force -Verbose
	}
	$ValueName = "Min Send Interval"
	$ValueType = "DWord"
	$DesiredValue = "1"
	If (($Key).$ValueName) {
		$ActualValue = (Get-ItemProperty $Key).$ValueName
		If ($ActualValue -ne $DesiredValue) {
			"$(Get-TimeStamp)		$ValueName Actual Value does not equal Desired Value.  Capturing Actual Value and then implementing Desired Value."
			Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type $ValueType -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
			Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
		}
		Else {
			"$(Get-TimeStamp)		$ValueName Actual Name matches Desired Value.  Neither Capturing Actual Value nor changing Desired Value."
		}
	}
	If (-not($Key).$ValueName) {
		"$(Get-TimeStamp)		$ValueName Actual Value does not exist.  Capturing and then implementing Desired Value."
		$ActualValue = "DNE"
		Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type "String" -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
		Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
	}
	"-----------------------------------------------------------------------"
	$VDIOPsCounter++
	Write-Progress -Activity "Implementing Generic VDI Setting Optimizations" -Id 107 -ParentId 10 -PercentComplete (($VDIOpsCounter / $VDIOps) * 100)

	$Key = "Registry::HKEY_USERS\.DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced"
	$KeyExists = Test-Path $Key
	If ($KeyExists -ne "True") {
		New-Item -Path $Key -Force -Verbose
	}
	$ValueName = "ListviewAlphaSelect"
	$ValueType = "DWord"
	$DesiredValue = "0"
	If (($Key).$ValueName) {
		$ActualValue = (Get-ItemProperty $Key).$ValueName
		If ($ActualValue -ne $DesiredValue) {
			"$(Get-TimeStamp)		$ValueName Actual Value does not equal Desired Value.  Capturing Actual Value and then implementing Desired Value."
			Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type $ValueType -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
			Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
		}
		Else {
			"$(Get-TimeStamp)		$ValueName Actual Name matches Desired Value.  Neither Capturing Actual Value nor changing Desired Value."
		}
	}
	If (-not($Key).$ValueName) {
		"$(Get-TimeStamp)		$ValueName Actual Value does not exist.  Capturing and then implementing Desired Value."
		$ActualValue = "DNE"
		Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type "String" -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
		Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
	}
	"-----------------------------------------------------------------------"
	$VDIOPsCounter++
	Write-Progress -Activity "Implementing Generic VDI Setting Optimizations" -Id 107 -ParentId 10 -PercentComplete (($VDIOpsCounter / $VDIOps) * 100)

	$ValueName = "ListviewShadow"
	$ValueType = "DWord"
	$DesiredValue = "0"
	If (($Key).$ValueName) {
		$ActualValue = (Get-ItemProperty $Key).$ValueName
		If ($ActualValue -ne $DesiredValue) {
			"$(Get-TimeStamp)		$ValueName Actual Value does not equal Desired Value.  Capturing Actual Value and then implementing Desired Value."
			Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type $ValueType -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
			Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
		}
		Else {
			"$(Get-TimeStamp)		$ValueName Actual Name matches Desired Value.  Neither Capturing Actual Value nor changing Desired Value."
		}
	}
	If (-not($Key).$ValueName) {
		"$(Get-TimeStamp)		$ValueName Actual Value does not exist.  Capturing and then implementing Desired Value."
		$ActualValue = "DNE"
		Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type "String" -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
		Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
	}
	"-----------------------------------------------------------------------"
	$VDIOPsCounter++
	Write-Progress -Activity "Implementing Generic VDI Setting Optimizations" -Id 107 -ParentId 10 -PercentComplete (($VDIOpsCounter / $VDIOps) * 100)

	$ValueName = "TaskbarAnimations"
	$ValueType = "DWord"
	$DesiredValue = "0"
	If (($Key).$ValueName) {
		$ActualValue = (Get-ItemProperty $Key).$ValueName
		If ($ActualValue -ne $DesiredValue) {
			"$(Get-TimeStamp)		$ValueName Actual Value does not equal Desired Value.  Capturing Actual Value and then implementing Desired Value."
			Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type $ValueType -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
			Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
		}
		Else {
			"$(Get-TimeStamp)		$ValueName Actual Name matches Desired Value.  Neither Capturing Actual Value nor changing Desired Value."
		}
	}
	If (-not($Key).$ValueName) {
		"$(Get-TimeStamp)		$ValueName Actual Value does not exist.  Capturing and then implementing Desired Value."
		$ActualValue = "DNE"
		Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type "String" -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
		Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
	}
	"-----------------------------------------------------------------------"
	$VDIOPsCounter++
	Write-Progress -Activity "Implementing Generic VDI Setting Optimizations" -Id 107 -ParentId 10 -PercentComplete (($VDIOpsCounter / $VDIOps) * 100)

	$Key = "Registry::HKEY_USERS\.DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects"
	$KeyExists = Test-Path $Key
	If ($KeyExists -ne "True") {
		New-Item -Path $Key -Force -Verbose
	}
	$ValueName = "VisualFXSetting"
	$ValueType = "DWord"
	$DesiredValue = "3"
	If (($Key).$ValueName) {
		$ActualValue = (Get-ItemProperty $Key).$ValueName
		If ($ActualValue -ne $DesiredValue) {
			"$(Get-TimeStamp)		$ValueName Actual Value does not equal Desired Value.  Capturing Actual Value and then implementing Desired Value."
			Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type $ValueType -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
			Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
		}
		Else {
			"$(Get-TimeStamp)		$ValueName Actual Name matches Desired Value.  Neither Capturing Actual Value nor changing Desired Value."
		}
	}
	If (-not($Key).$ValueName) {
		"$(Get-TimeStamp)		$ValueName Actual Value does not exist.  Capturing and then implementing Desired Value."
		$ActualValue = "DNE"
		Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type "String" -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
		Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
	}
	"-----------------------------------------------------------------------"
	$VDIOPsCounter++
	Write-Progress -Activity "Implementing Generic VDI Setting Optimizations" -Id 107 -ParentId 10 -PercentComplete (($VDIOpsCounter / $VDIOps) * 100)

	$Key = "Registry::HKEY_USERS\.DEFAULT\Software\Microsoft\Windows\DWM"
	$KeyExists = Test-Path $Key
	If ($KeyExists -ne "True") {
		New-Item -Path $Key -Force -Verbose
	}
	$ValueName = "EnableAeroPeek"
	$ValueType = "DWord"
	$DesiredValue = "0"
	If (($Key).$ValueName) {
		$ActualValue = (Get-ItemProperty $Key).$ValueName
		If ($ActualValue -ne $DesiredValue) {
			"$(Get-TimeStamp)		$ValueName Actual Value does not equal Desired Value.  Capturing Actual Value and then implementing Desired Value."
			Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type $ValueType -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
			Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
		}
		Else {
			"$(Get-TimeStamp)		$ValueName Actual Name matches Desired Value.  Neither Capturing Actual Value nor changing Desired Value."
		}
	}
	If (-not($Key).$ValueName) {
		"$(Get-TimeStamp)		$ValueName Actual Value does not exist.  Capturing and then implementing Desired Value."
		$ActualValue = "DNE"
		Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type "String" -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
		Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
	}
	"-----------------------------------------------------------------------"
	$VDIOPsCounter++
	Write-Progress -Activity "Implementing Generic VDI Setting Optimizations" -Id 107 -ParentId 10 -PercentComplete (($VDIOpsCounter / $VDIOps) * 100)

	$ValueName = "AlwaysHibernateThumbnails"
	$ValueType = "DWord"
	$DesiredValue = "0"
	If (($Key).$ValueName) {
		$ActualValue = (Get-ItemProperty $Key).$ValueName
		If ($ActualValue -ne $DesiredValue) {
			"$(Get-TimeStamp)		$ValueName Actual Value does not equal Desired Value.  Capturing Actual Value and then implementing Desired Value."
			Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type $ValueType -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
			Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
		}
		Else {
			"$(Get-TimeStamp)		$ValueName Actual Name matches Desired Value.  Neither Capturing Actual Value nor changing Desired Value."
		}
	}
	If (-not($Key).$ValueName) {
		"$(Get-TimeStamp)		$ValueName Actual Value does not exist.  Capturing and then implementing Desired Value."
		$ActualValue = "DNE"
		Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type "String" -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
		Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
	}
	"-----------------------------------------------------------------------"
	$VDIOPsCounter++
	Write-Progress -Activity "Implementing Generic VDI Setting Optimizations" -Id 107 -ParentId 10 -PercentComplete (($VDIOpsCounter / $VDIOps) * 100)

	$Key = "HKLM:\Software\Microsoft\Dfrg"
	$KeyExists = Test-Path $Key
	If ($KeyExists -ne "True") {
		New-Item -Path $Key -Force -Verbose
	}
	$ValueName = "Enable"
	$ValueType = "String"
	$DesiredValue = "N"
	If (($Key).$ValueName) {
		$ActualValue = (Get-ItemProperty $Key).$ValueName
		If ($ActualValue -ne $DesiredValue) {
			"$(Get-TimeStamp)		$ValueName Actual Value does not equal Desired Value.  Capturing Actual Value and then implementing Desired Value."
			Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type $ValueType -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
			Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
		}
		Else {
			"$(Get-TimeStamp)		$ValueName Actual Name matches Desired Value.  Neither Capturing Actual Value nor changing Desired Value."
		}
	}
	If (-not($Key).$ValueName) {
		"$(Get-TimeStamp)		$ValueName Actual Value does not exist.  Capturing and then implementing Desired Value."
		$ActualValue = "DNE"
		Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type "String" -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
		Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
	}
	"-----------------------------------------------------------------------"
	$VDIOPsCounter++
	Write-Progress -Activity "Implementing Generic VDI Setting Optimizations" -Id 107 -ParentId 10 -PercentComplete (($VDIOpsCounter / $VDIOps) * 100)

	$ValueName = "OptimizeComplete"
	$ValueType = "String"
	$DesiredValue = "Yes"
	If (($Key).$ValueName) {
		$ActualValue = (Get-ItemProperty $Key).$ValueName
		If ($ActualValue -ne $DesiredValue) {
			"$(Get-TimeStamp)		$ValueName Actual Value does not equal Desired Value.  Capturing Actual Value and then implementing Desired Value."
			Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type $ValueType -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
			Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
		}
		Else {
			"$(Get-TimeStamp)		$ValueName Actual Name matches Desired Value.  Neither Capturing Actual Value nor changing Desired Value."
		}
	}
	If (-not($Key).$ValueName) {
		"$(Get-TimeStamp)		$ValueName Actual Value does not exist.  Capturing and then implementing Desired Value."
		$ActualValue = "DNE"
		Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type "String" -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
		Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
	}
	"-----------------------------------------------------------------------"
	$VDIOPsCounter++
	Write-Progress -Activity "Implementing Generic VDI Setting Optimizations" -Id 107 -ParentId 10 -PercentComplete (($VDIOpsCounter / $VDIOps) * 100)

	$Key = "HKLM:\Software\Microsoft\Windows\CurrentVersion\Explorer\ControlPanel\NameSpace\{025A5937-A6BE-4686-A844-36FE4BEC8B6D}"
	$KeyExists = Test-Path $Key
	If ($KeyExists -ne "True") {
		New-Item -Path $Key -Force -Verbose
	}
	$ValueName = "PreferredPlan"
	$ValueType = "String"
	$DesiredValue = "8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c"
	If (($Key).$ValueName) {
		$ActualValue = (Get-ItemProperty $Key).$ValueName
		If ($ActualValue -ne $DesiredValue) {
			"$(Get-TimeStamp)		$ValueName Actual Value does not equal Desired Value.  Capturing Actual Value and then implementing Desired Value."
			Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type $ValueType -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
			Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
		}
		Else {
			"$(Get-TimeStamp)		$ValueName Actual Name matches Desired Value.  Neither Capturing Actual Value nor changing Desired Value."
		}
	}
	If (-not($Key).$ValueName) {
		"$(Get-TimeStamp)		$ValueName Actual Value does not exist.  Capturing and then implementing Desired Value."
		$ActualValue = "DNE"
		Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type "String" -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
		Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
	}
	"-----------------------------------------------------------------------"
	$VDIOPsCounter++
	Write-Progress -Activity "Implementing Generic VDI Setting Optimizations" -Id 107 -ParentId 10 -PercentComplete (($VDIOpsCounter / $VDIOps) * 100)

	$Key = "HKLM:\Software\Microsoft\Windows\CurrentVersion\OptimalLayout"
	$KeyExists = Test-Path $Key
	If ($KeyExists -ne "True") {
		New-Item -Path $Key -Force -Verbose
	}
	$ValueName = "EnableAutoLayout"
	$ValueType = "String"
	$DesiredValue = "0"
	If (($Key).$ValueName) {
		$ActualValue = (Get-ItemProperty $Key).$ValueName
		If ($ActualValue -ne $DesiredValue) {
			"$(Get-TimeStamp)		$ValueName Actual Value does not equal Desired Value.  Capturing Actual Value and then implementing Desired Value."
			Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type $ValueType -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
			Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
		}
		Else {
			"$(Get-TimeStamp)		$ValueName Actual Name matches Desired Value.  Neither Capturing Actual Value nor changing Desired Value."
		}
	}
	If (-not($Key).$ValueName) {
		"$(Get-TimeStamp)		$ValueName Actual Value does not exist.  Capturing and then implementing Desired Value."
		$ActualValue = "DNE"
		Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type "String" -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
		Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
	}
	"-----------------------------------------------------------------------"
	$VDIOPsCounter++
	Write-Progress -Activity "Implementing Generic VDI Setting Optimizations" -Id 107 -ParentId 10 -PercentComplete (($VDIOpsCounter / $VDIOps) * 100)

	$Key = "HKLM:\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer"
	$KeyExists = Test-Path $Key
	If ($KeyExists -ne "True") {
		New-Item -Path $Key -Force -Verbose
	}
	$ValueName = "NoRemoteRecursiveEvents"
	$ValueType = "DWord"
	$DesiredValue = "1"
	If (($Key).$ValueName) {
		$ActualValue = (Get-ItemProperty $Key).$ValueName
		If ($ActualValue -ne $DesiredValue) {
			"$(Get-TimeStamp)		$ValueName Actual Value does not equal Desired Value.  Capturing Actual Value and then implementing Desired Value."
			Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type $ValueType -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
			Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
		}
		Else {
			"$(Get-TimeStamp)		$ValueName Actual Name matches Desired Value.  Neither Capturing Actual Value nor changing Desired Value."
		}
	}
	If (-not($Key).$ValueName) {
		"$(Get-TimeStamp)		$ValueName Actual Value does not exist.  Capturing and then implementing Desired Value."
		$ActualValue = "DNE"
		Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type "String" -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
		Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
	}
	"-----------------------------------------------------------------------"
	$VDIOPsCounter++
	Write-Progress -Activity "Implementing Generic VDI Setting Optimizations" -Id 107 -ParentId 10 -PercentComplete (($VDIOpsCounter / $VDIOps) * 100)

	$Key = "HKLM:\Software\Policies\Microsoft\Internet Explorer\Main"
	$KeyExists = Test-Path $Key
	If ($KeyExists -ne "True") {
		New-Item -Path $Key -Force -Verbose
	}
	$ValueName = "DisableFirstrunCustomize"
	$ValueType = "DWord"
	$DesiredValue = "1"
	If (($Key).$ValueName) {
		$ActualValue = (Get-ItemProperty $Key).$ValueName
		If ($ActualValue -ne $DesiredValue) {
			"$(Get-TimeStamp)		$ValueName Actual Value does not equal Desired Value.  Capturing Actual Value and then implementing Desired Value."
			Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type $ValueType -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
			Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
		}
		Else {
			"$(Get-TimeStamp)		$ValueName Actual Name matches Desired Value.  Neither Capturing Actual Value nor changing Desired Value."
		}
	}
	If (-not($Key).$ValueName) {
		"$(Get-TimeStamp)		$ValueName Actual Value does not exist.  Capturing and then implementing Desired Value."
		$ActualValue = "DNE"
		Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type "String" -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
		Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
	}
	"-----------------------------------------------------------------------"
	$VDIOPsCounter++
	Write-Progress -Activity "Implementing Generic VDI Setting Optimizations" -Id 107 -ParentId 10 -PercentComplete (($VDIOpsCounter / $VDIOps) * 100)

	$Key = "HKLM:\Software\Policies\Microsoft\SQMClient\Windows"
	$KeyExists = Test-Path $Key
	If ($KeyExists -ne "True") {
		New-Item -Path $Key -Force -Verbose
	}
	$ValueName = "CEIPEnable"
	$ValueType = "DWord"
	$DesiredValue = "0"
	If (($Key).$ValueName) {
		$ActualValue = (Get-ItemProperty $Key).$ValueName
		If ($ActualValue -ne $DesiredValue) {
			"$(Get-TimeStamp)		$ValueName Actual Value does not equal Desired Value.  Capturing Actual Value and then implementing Desired Value."
			Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type $ValueType -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
			Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
		}
		Else {
			"$(Get-TimeStamp)		$ValueName Actual Name matches Desired Value.  Neither Capturing Actual Value nor changing Desired Value."
		}
	}
	If (-not($Key).$ValueName) {
		"$(Get-TimeStamp)		$ValueName Actual Value does not exist.  Capturing and then implementing Desired Value."
		$ActualValue = "DNE"
		Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type "String" -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
		Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
	}
	"-----------------------------------------------------------------------"
	$VDIOPsCounter++
	Write-Progress -Activity "Implementing Generic VDI Setting Optimizations" -Id 107 -ParentId 10 -PercentComplete (($VDIOpsCounter / $VDIOps) * 100)

	$Key = "HKLM:\System\CurrentControlSet\Control\CrashControl"
	$KeyExists = Test-Path $Key
	If ($KeyExists -ne "True") {
		New-Item -Path $Key -Force -Verbose
	}
	$ValueName = "CrashDumpEnabled"
	$ValueType = "DWord"
	$DesiredValue = "0"
	If (($Key).$ValueName) {
		$ActualValue = (Get-ItemProperty $Key).$ValueName
		If ($ActualValue -ne $DesiredValue) {
			"$(Get-TimeStamp)		$ValueName Actual Value does not equal Desired Value.  Capturing Actual Value and then implementing Desired Value."
			Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type $ValueType -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
			Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
		}
		Else {
			"$(Get-TimeStamp)		$ValueName Actual Name matches Desired Value.  Neither Capturing Actual Value nor changing Desired Value."
		}
	}
	If (-not($Key).$ValueName) {
		"$(Get-TimeStamp)		$ValueName Actual Value does not exist.  Capturing and then implementing Desired Value."
		$ActualValue = "DNE"
		Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type "String" -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
		Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
	}
	"-----------------------------------------------------------------------"
	$VDIOPsCounter++
	Write-Progress -Activity "Implementing Generic VDI Setting Optimizations" -Id 107 -ParentId 10 -PercentComplete (($VDIOpsCounter / $VDIOps) * 100)

	$ValueName = "LogEvent"
	$ValueType = "DWord"
	$DesiredValue = "1"
	If (($Key).$ValueName) {
		$ActualValue = (Get-ItemProperty $Key).$ValueName
		If ($ActualValue -ne $DesiredValue) {
			"$(Get-TimeStamp)		$ValueName Actual Value does not equal Desired Value.  Capturing Actual Value and then implementing Desired Value."
			Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type $ValueType -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
			Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
		}
		Else {
			"$(Get-TimeStamp)		$ValueName Actual Name matches Desired Value.  Neither Capturing Actual Value nor changing Desired Value."
		}
	}
	If (-not($Key).$ValueName) {
		"$(Get-TimeStamp)		$ValueName Actual Value does not exist.  Capturing and then implementing Desired Value."
		$ActualValue = "DNE"
		Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type "String" -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
		Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
	}
	"-----------------------------------------------------------------------"
	$VDIOPsCounter++
	Write-Progress -Activity "Implementing Generic VDI Setting Optimizations" -Id 107 -ParentId 10 -PercentComplete (($VDIOpsCounter / $VDIOps) * 100)
			
	$ValueName = "SendAlert"
	$ValueType = "DWord"
	$DesiredValue = "0"
	If (($Key).$ValueName) {
		$ActualValue = (Get-ItemProperty $Key).$ValueName
		If ($ActualValue -ne $DesiredValue) {
			"$(Get-TimeStamp)		$ValueName Actual Value does not equal Desired Value.  Capturing Actual Value and then implementing Desired Value."
			Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type $ValueType -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
			Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
		}
		Else {
			"$(Get-TimeStamp)		$ValueName Actual Name matches Desired Value.  Neither Capturing Actual Value nor changing Desired Value."
		}
	}
	If (-not($Key).$ValueName) {
		"$(Get-TimeStamp)		$ValueName Actual Value does not exist.  Capturing and then implementing Desired Value."
		$ActualValue = "DNE"
		Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type "String" -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
		Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
	}
	"-----------------------------------------------------------------------"
	$VDIOPsCounter++
	Write-Progress -Activity "Implementing Generic VDI Setting Optimizations" -Id 107 -ParentId 10 -PercentComplete (($VDIOpsCounter / $VDIOps) * 100)

	$Key = "HKLM:\System\CurrentControlSet\Control\FileSystem"
	$KeyExists = Test-Path $Key
	If ($KeyExists -ne "True") {
		New-Item -Path $Key -Force -Verbose
	}
	$ValueName = "NtfsDisableLastAccessUpdate"
	$ValueType = "DWord"
	$DesiredValue = "1"
	If (($Key).$ValueName) {
		$ActualValue = (Get-ItemProperty $Key).$ValueName
		If ($ActualValue -ne $DesiredValue) {
			"$(Get-TimeStamp)		$ValueName Actual Value does not equal Desired Value.  Capturing Actual Value and then implementing Desired Value."
			Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type $ValueType -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
			Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
		}
		Else {
			"$(Get-TimeStamp)		$ValueName Actual Name matches Desired Value.  Neither Capturing Actual Value nor changing Desired Value."
		}
	}
	If (-not($Key).$ValueName) {
		"$(Get-TimeStamp)		$ValueName Actual Value does not exist.  Capturing and then implementing Desired Value."
		$ActualValue = "DNE"
		Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type "String" -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
		Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
	}
	"-----------------------------------------------------------------------"
	$VDIOPsCounter++
	Write-Progress -Activity "Implementing Generic VDI Setting Optimizations" -Id 107 -ParentId 10 -PercentComplete (($VDIOpsCounter / $VDIOps) * 100)

	$Key = "HKLM:\System\CurrentControlSet\Control\Print\Providers"
	$KeyExists = Test-Path $Key
	If ($KeyExists -ne "True") {
		New-Item -Path $Key -Force -Verbose
	}
	$ValueName = "EventLog"
	$ValueType = "DWord"
	$DesiredValue = "1"
	If (($Key).$ValueName) {
		$ActualValue = (Get-ItemProperty $Key).$ValueName
		If ($ActualValue -ne $DesiredValue) {
			"$(Get-TimeStamp)		$ValueName Actual Value does not equal Desired Value.  Capturing Actual Value and then implementing Desired Value."
			Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type $ValueType -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
			Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
		}
		Else {
			"$(Get-TimeStamp)		$ValueName Actual Name matches Desired Value.  Neither Capturing Actual Value nor changing Desired Value."
		}
	}
	If (-not($Key).$ValueName) {
		"$(Get-TimeStamp)		$ValueName Actual Value does not exist.  Capturing and then implementing Desired Value."
		$ActualValue = "DNE"
		Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type "String" -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
		Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
	}
	"-----------------------------------------------------------------------"
	$VDIOPsCounter++
	Write-Progress -Activity "Implementing Generic VDI Setting Optimizations" -Id 107 -ParentId 10 -PercentComplete (($VDIOpsCounter / $VDIOps) * 100)

	$Key = "HKLM:\System\CurrentControlSet\Control\Session Manager\Executive"
	$KeyExists = Test-Path $Key
	If ($KeyExists -ne "True") {
		New-Item -Path $Key -Force -Verbose
	}
	$ValueName = "AdditionalCriticalWorkerThreads"
	$ValueType = "DWord"
	$DesiredValue = "64"
	If (($Key).$ValueName) {
		$ActualValue = (Get-ItemProperty $Key).$ValueName
		If ($ActualValue -ne $DesiredValue) {
			"$(Get-TimeStamp)		$ValueName Actual Value does not equal Desired Value.  Capturing Actual Value and then implementing Desired Value."
			Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type $ValueType -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
			Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
		}
		Else {
			"$(Get-TimeStamp)		$ValueName Actual Name matches Desired Value.  Neither Capturing Actual Value nor changing Desired Value."
		}
	}
	If (-not($Key).$ValueName) {
		"$(Get-TimeStamp)		$ValueName Actual Value does not exist.  Capturing and then implementing Desired Value."
		$ActualValue = "DNE"
		Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type "String" -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
		Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
	}
	"-----------------------------------------------------------------------"
	$VDIOPsCounter++
	Write-Progress -Activity "Implementing Generic VDI Setting Optimizations" -Id 107 -ParentId 10 -PercentComplete (($VDIOpsCounter / $VDIOps) * 100)

	$Key = "HKLM:\System\CurrentControlSet\Control\Session Manager\Memory Management"
	$KeyExists = Test-Path $Key
	If ($KeyExists -ne "True") {
		New-Item -Path $Key -Force -Verbose
	}
	$ValueName = "MoveImages"
	$ValueType = "DWord"
	$DesiredValue = "0"
	If (($Key).$ValueName) {
		$ActualValue = (Get-ItemProperty $Key).$ValueName
		If ($ActualValue -ne $DesiredValue) {
			"$(Get-TimeStamp)		$ValueName Actual Value does not equal Desired Value.  Capturing Actual Value and then implementing Desired Value."
			Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type $ValueType -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
			Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
		}
		Else {
			"$(Get-TimeStamp)		$ValueName Actual Name matches Desired Value.  Neither Capturing Actual Value nor changing Desired Value."
		}
	}
	If (-not($Key).$ValueName) {
		"$(Get-TimeStamp)		$ValueName Actual Value does not exist.  Capturing and then implementing Desired Value."
		$ActualValue = "DNE"
		Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type "String" -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
		Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
	}
	"-----------------------------------------------------------------------"
	$VDIOPsCounter++
	Write-Progress -Activity "Implementing Generic VDI Setting Optimizations" -Id 107 -ParentId 10 -PercentComplete (($VDIOpsCounter / $VDIOps) * 100)

	$ValueName = "ClearPageFileAtShutdown"
	$ValueType = "DWord"
	$DesiredValue = "0"
	If (($Key).$ValueName) {
		$ActualValue = (Get-ItemProperty $Key).$ValueName
		If ($ActualValue -ne $DesiredValue) {
			"$(Get-TimeStamp)		$ValueName Actual Value does not equal Desired Value.  Capturing Actual Value and then implementing Desired Value."
			Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type $ValueType -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
			Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
		}
		Else {
			"$(Get-TimeStamp)		$ValueName Actual Name matches Desired Value.  Neither Capturing Actual Value nor changing Desired Value."
		}
	}
	If (-not($Key).$ValueName) {
		"$(Get-TimeStamp)		$ValueName Actual Value does not exist.  Capturing and then implementing Desired Value."
		$ActualValue = "DNE"
		Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type "String" -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
		Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
	}
	"-----------------------------------------------------------------------"
	$VDIOPsCounter++
	Write-Progress -Activity "Implementing Generic VDI Setting Optimizations" -Id 107 -ParentId 10 -PercentComplete (($VDIOpsCounter / $VDIOps) * 100)

	$Key = "HKLM:\System\CurrentControlSet\Control\Windows"
	$KeyExists = Test-Path $Key
	If ($KeyExists -ne "True") {
		New-Item -Path $Key -Force -Verbose
	}
	$ValueName = "ErrorMode"
	$ValueType = "DWord"
	$DesiredValue = "2"
	If (($Key).$ValueName) {
		$ActualValue = (Get-ItemProperty $Key).$ValueName
		If ($ActualValue -ne $DesiredValue) {
			"$(Get-TimeStamp)		$ValueName Actual Value does not equal Desired Value.  Capturing Actual Value and then implementing Desired Value."
			Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type $ValueType -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
			Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
		}
		Else {
			"$(Get-TimeStamp)		$ValueName Actual Name matches Desired Value.  Neither Capturing Actual Value nor changing Desired Value."
		}
	}
	If (-not($Key).$ValueName) {
		"$(Get-TimeStamp)		$ValueName Actual Value does not exist.  Capturing and then implementing Desired Value."
		$ActualValue = "DNE"
		Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type "String" -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
		Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
	}
	"-----------------------------------------------------------------------"
	$VDIOPsCounter++
	Write-Progress -Activity "Implementing Generic VDI Setting Optimizations" -Id 107 -ParentId 10 -PercentComplete (($VDIOpsCounter / $VDIOps) * 100)

	$Key = "HKLM:\System\CurrentControlSet\Services\Disk"
	$KeyExists = Test-Path $Key
	If ($KeyExists -ne "True") {
		New-Item -Path $Key -Force -Verbose
	}
	$ValueName = "TimeOutValue"
	$ValueType = "DWord"
	$DesiredValue = 0x000000c8
	If (($Key).$ValueName) {
		$ActualValue = (Get-ItemProperty $Key).$ValueName
		If ($ActualValue -ne $DesiredValue) {
			"$(Get-TimeStamp)		$ValueName Actual Value does not equal Desired Value.  Capturing Actual Value and then implementing Desired Value."
			Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type $ValueType -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
			Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
		}
		Else {
			"$(Get-TimeStamp)		$ValueName Actual Name matches Desired Value.  Neither Capturing Actual Value nor changing Desired Value."
		}
	}
	If (-not($Key).$ValueName) {
		"$(Get-TimeStamp)		$ValueName Actual Value does not exist.  Capturing and then implementing Desired Value."
		$ActualValue = "DNE"
		Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type "String" -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
		Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
	}
	"-----------------------------------------------------------------------"
	$VDIOPsCounter++
	Write-Progress -Activity "Implementing Generic VDI Setting Optimizations" -Id 107 -ParentId 10 -PercentComplete (($VDIOpsCounter / $VDIOps) * 100)

	$Key = "HKLM:\System\CurrentControlSet\Services\LanmanWorkstation\Parameters"
	$KeyExists = Test-Path $Key
	If ($KeyExists -ne "True") {
		New-Item -Path $Key -Force -Verbose
	}
	$ValueName = "FileInfoCacheEntriesMax"
	$ValueType = "DWord"
	$DesiredValue = "1024"
	If (($Key).$ValueName) {
		$ActualValue = (Get-ItemProperty $Key).$ValueName
		If ($ActualValue -ne $DesiredValue) {
			"$(Get-TimeStamp)		$ValueName Actual Value does not equal Desired Value.  Capturing Actual Value and then implementing Desired Value."
			Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type $ValueType -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
			Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
		}
		Else {
			"$(Get-TimeStamp)		$ValueName Actual Name matches Desired Value.  Neither Capturing Actual Value nor changing Desired Value."
		}
	}
	If (-not($Key).$ValueName) {
		"$(Get-TimeStamp)		$ValueName Actual Value does not exist.  Capturing and then implementing Desired Value."
		$ActualValue = "DNE"
		Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type "String" -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
		Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
	}
	"-----------------------------------------------------------------------"
	$VDIOPsCounter++
	Write-Progress -Activity "Implementing Generic VDI Setting Optimizations" -Id 107 -ParentId 10 -PercentComplete (($VDIOpsCounter / $VDIOps) * 100)

	$ValueName = "DirectoryCacheEntriesMax"
	$ValueType = "DWord"
	$DesiredValue = "1024"
	If (($Key).$ValueName) {
		$ActualValue = (Get-ItemProperty $Key).$ValueName
		If ($ActualValue -ne $DesiredValue) {
			"$(Get-TimeStamp)		$ValueName Actual Value does not equal Desired Value.  Capturing Actual Value and then implementing Desired Value."
			Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type $ValueType -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
			Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
		}
		Else {
			"$(Get-TimeStamp)		$ValueName Actual Name matches Desired Value.  Neither Capturing Actual Value nor changing Desired Value."
		}
	}
	If (-not($Key).$ValueName) {
		"$(Get-TimeStamp)		$ValueName Actual Value does not exist.  Capturing and then implementing Desired Value."
		$ActualValue = "DNE"
		Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type "String" -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
		Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
	}
	"-----------------------------------------------------------------------"
	$VDIOPsCounter++
	Write-Progress -Activity "Implementing Generic VDI Setting Optimizations" -Id 107 -ParentId 10 -PercentComplete (($VDIOpsCounter / $VDIOps) * 100)

	$ValueName = "FileNotFoundCacheEntriesMax"
	$ValueType = "DWord"
	$DesiredValue = "2048"
	If (($Key).$ValueName) {
		$ActualValue = (Get-ItemProperty $Key).$ValueName
		If ($ActualValue -ne $DesiredValue) {
			"$(Get-TimeStamp)		$ValueName Actual Value does not equal Desired Value.  Capturing Actual Value and then implementing Desired Value."
			Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type $ValueType -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
			Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
		}
		Else {
			"$(Get-TimeStamp)		$ValueName Actual Name matches Desired Value.  Neither Capturing Actual Value nor changing Desired Value."
		}
	}
	If (-not($Key).$ValueName) {
		"$(Get-TimeStamp)		$ValueName Actual Value does not exist.  Capturing and then implementing Desired Value."
		$ActualValue = "DNE"
		Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type "String" -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
		Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
	}
	"-----------------------------------------------------------------------"
	$VDIOPsCounter++
	Write-Progress -Activity "Implementing Generic VDI Setting Optimizations" -Id 107 -ParentId 10 -PercentComplete (($VDIOpsCounter / $VDIOps) * 100)

	$ValueName = "DormantFileLimit"
	$ValueType = "DWord"
	$DesiredValue = "256"
	If (($Key).$ValueName) {
		$ActualValue = (Get-ItemProperty $Key).$ValueName
		If ($ActualValue -ne $DesiredValue) {
			"$(Get-TimeStamp)		$ValueName Actual Value does not equal Desired Value.  Capturing Actual Value and then implementing Desired Value."
			Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type $ValueType -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
			Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
		}
		Else {
			"$(Get-TimeStamp)		$ValueName Actual Name matches Desired Value.  Neither Capturing Actual Value nor changing Desired Value."
		}
	}
	If (-not($Key).$ValueName) {
		"$(Get-TimeStamp)		$ValueName Actual Value does not exist.  Capturing and then implementing Desired Value."
		$ActualValue = "DNE"
		Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type "String" -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
		Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
	}
	"-----------------------------------------------------------------------"
	$VDIOPsCounter++
	Write-Progress -Activity "Implementing Generic VDI Setting Optimizations" -Id 107 -ParentId 10 -PercentComplete (($VDIOpsCounter / $VDIOps) * 100)

	$ValueName = "DisableBandwidthThrottling"
	$ValueType = "DWord"
	$DesiredValue = "1"
	If (($Key).$ValueName) {
		$ActualValue = (Get-ItemProperty $Key).$ValueName
		If ($ActualValue -ne $DesiredValue) {
			"$(Get-TimeStamp)		$ValueName Actual Value does not equal Desired Value.  Capturing Actual Value and then implementing Desired Value."
			Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type $ValueType -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
			Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
		}
		Else {
			"$(Get-TimeStamp)		$ValueName Actual Name matches Desired Value.  Neither Capturing Actual Value nor changing Desired Value."
		}
	}
	If (-not($Key).$ValueName) {
		"$(Get-TimeStamp)		$ValueName Actual Value does not exist.  Capturing and then implementing Desired Value."
		$ActualValue = "DNE"
		Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type "String" -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
		Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
	}
	"-----------------------------------------------------------------------"
	$VDIOPsCounter++
	Write-Progress -Activity "Implementing Generic VDI Setting Optimizations" -Id 107 -ParentId 10 -PercentComplete (($VDIOpsCounter / $VDIOps) * 100)

	$Key = "HKLM:\SYSTEM\CurrentControlSet\Services\SharedAccess\Parameters\FirewallPolicy"
	$KeyExists = Test-Path $Key
	If ($KeyExists -ne "True") {
		New-Item -Path $Key -Force -Verbose
	}
	$ValueName = "DeleteUserAppContainersOnLogoff"
	$ValueType = "DWord"
	$DesiredValue = "1"
	If (($Key).$ValueName) {
		$ActualValue = (Get-ItemProperty $Key).$ValueName
		If ($ActualValue -ne $DesiredValue) {
			"$(Get-TimeStamp)		$ValueName Actual Value does not equal Desired Value.  Capturing Actual Value and then implementing Desired Value."
			Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type $ValueType -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
			Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
		}
		Else {
			"$(Get-TimeStamp)		$ValueName Actual Name matches Desired Value.  Neither Capturing Actual Value nor changing Desired Value."
		}
	}
	If (-not($Key).$ValueName) {
		"$(Get-TimeStamp)		$ValueName Actual Value does not exist.  Capturing and then implementing Desired Value."
		$ActualValue = "DNE"
		Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type "String" -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
		Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
	}
	"-----------------------------------------------------------------------"
	$VDIOPsCounter++
	Write-Progress -Activity "Implementing Generic VDI Setting Optimizations" -Id 107 -ParentId 10 -PercentComplete (($VDIOpsCounter / $VDIOps) * 100)

	$Key = "HKLM:\SYSTEM\CurrentControlSet\Control\Power"
	$KeyExists = Test-Path $Key
	If ($KeyExists -ne "True") {
		New-Item -Path $Key -Force -Verbose
	}
	$ValueName = "HibernateEnabled"
	$ValueType = "DWord"
	$DesiredValue = "0"
	If (($Key).$ValueName) {
		$ActualValue = (Get-ItemProperty $Key).$ValueName
		If ($ActualValue -ne $DesiredValue) {
			"$(Get-TimeStamp)		$ValueName Actual Value does not equal Desired Value.  Capturing Actual Value and then implementing Desired Value."
			Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type $ValueType -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
			Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
		}
		Else {
			"$(Get-TimeStamp)		$ValueName Actual Name matches Desired Value.  Neither Capturing Actual Value nor changing Desired Value."
		}
	}
	If (-not($Key).$ValueName) {
		"$(Get-TimeStamp)		$ValueName Actual Value does not exist.  Capturing and then implementing Desired Value."
		$ActualValue = "DNE"
		Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type "String" -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
		Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
	}
	"-----------------------------------------------------------------------"
	$VDIOPsCounter++
	Write-Progress -Activity "Implementing Generic VDI Setting Optimizations" -Id 107 -ParentId 10 -PercentComplete (($VDIOpsCounter / $VDIOps) * 100)

	$Key = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\StorageSense"
	$KeyExists = Test-Path $Key
	If ($KeyExists -ne "True") {
		New-Item -Path $Key -Force -Verbose
	}
	$ValueName = "AllowStorageSenseGlobal"
	$ValueType = "DWord"
	$DesiredValue = "0"
	If (($Key).$ValueName) {
		$ActualValue = (Get-ItemProperty $Key).$ValueName
		If ($ActualValue -ne $DesiredValue) {
			"$(Get-TimeStamp)		$ValueName Actual Value does not equal Desired Value.  Capturing Actual Value and then implementing Desired Value."
			Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type $ValueType -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
			Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
		}
		Else {
			"$(Get-TimeStamp)		$ValueName Actual Name matches Desired Value.  Neither Capturing Actual Value nor changing Desired Value."
		}
	}
	If (-not($Key).$ValueName) {
		"$(Get-TimeStamp)		$ValueName Actual Value does not exist.  Capturing and then implementing Desired Value."
		$ActualValue = "DNE"
		Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type "String" -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
		Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
	}
	"-----------------------------------------------------------------------"
	$VDIOPsCounter++
	Write-Progress -Activity "Implementing Generic VDI Setting Optimizations" -Id 107 -ParentId 10 -PercentComplete (($VDIOpsCounter / $VDIOps) * 100)

	$Key = "HKLM:\SOFTWARE\Policies\Microsoft\Edge"
	$KeyExists = Test-Path $Key
	If ($KeyExists -ne "True") {
		New-Item -Path $Key -Force -Verbose
	}
	$ValueName = "HideFirstRunExperience"
	$ValueType = "DWord"
	$DesiredValue = "1"
	If (($Key).$ValueName) {
		$ActualValue = (Get-ItemProperty $Key).$ValueName
		If ($ActualValue -ne $DesiredValue) {
			"$(Get-TimeStamp)		$ValueName Actual Value does not equal Desired Value.  Capturing Actual Value and then implementing Desired Value."
			Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type $ValueType -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
			Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
		}
		Else {
			"$(Get-TimeStamp)		$ValueName Actual Name matches Desired Value.  Neither Capturing Actual Value nor changing Desired Value."
		}
	}
	If (-not($Key).$ValueName) {
		"$(Get-TimeStamp)		$ValueName Actual Value does not exist.  Capturing and then implementing Desired Value."
		$ActualValue = "DNE"
		Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type "String" -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
		Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
	}
	"-----------------------------------------------------------------------"
	$VDIOPsCounter++
	Write-Progress -Activity "Implementing Generic VDI Setting Optimizations" -Id 107 -ParentId 10 -PercentComplete (($VDIOpsCounter / $VDIOps) * 100)

	If ($OSMajorVersion -like "*Windows 10*") {
		
		$Key = "HKLM:\Software\Microsoft\Windows\CurrentVersion\Policies\System"
		$KeyExists = Test-Path $Key
		If ($KeyExists -ne "True") {
			New-Item -Path $Key -Force -Verbose
		}
		$ValueName = "EnableFirstLogonAnimation"
		$ValueType = "DWord"
		$DesiredValue = "0"
		If (($Key).$ValueName) {
			$ActualValue = (Get-ItemProperty $Key).$ValueName
			If ($ActualValue -ne $DesiredValue) {
				"$(Get-TimeStamp)		$ValueName Actual Value does not equal Desired Value.  Capturing Actual Value and then implementing Desired Value."
				Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type $ValueType -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
				Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
			}
			Else {
				"$(Get-TimeStamp)		$ValueName Actual Name matches Desired Value.  Neither Capturing Actual Value nor changing Desired Value."
			}
		}
		If (-not($Key).$ValueName) {
			"$(Get-TimeStamp)		$ValueName Actual Value does not exist.  Capturing and then implementing Desired Value."
			$ActualValue = "DNE"
			Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type "String" -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
			Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
		}
		"-----------------------------------------------------------------------"
		$VDIOPsCounter++
		Write-Progress -Activity "Implementing Generic VDI Setting Optimizations" -Id 107 -ParentId 10 -PercentComplete (($VDIOpsCounter / $VDIOps) * 100)
		
		$Key = "HKLM:\Software\Policies\Microsoft\Windows\AdvertisingInfo"
		$KeyExists = Test-Path $Key
		If ($KeyExists -ne "True") {
			New-Item -Path $Key -Force -Verbose
		}
		$ValueName = "DisabledByGroupPolicy"
		$ValueType = "DWord"
		$DesiredValue = "1"
		If (($Key).$ValueName) {
			$ActualValue = (Get-ItemProperty $Key).$ValueName
			If ($ActualValue -ne $DesiredValue) {
				"$(Get-TimeStamp)		$ValueName Actual Value does not equal Desired Value.  Capturing Actual Value and then implementing Desired Value."
				Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type $ValueType -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
				Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
			}
			Else {
				"$(Get-TimeStamp)		$ValueName Actual Name matches Desired Value.  Neither Capturing Actual Value nor changing Desired Value."
			}
		}
		If (-not($Key).$ValueName) {
			"$(Get-TimeStamp)		$ValueName Actual Value does not exist.  Capturing and then implementing Desired Value."
			$ActualValue = "DNE"
			Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type "String" -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
			Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
		}
		"-----------------------------------------------------------------------"
		$VDIOPsCounter++
		Write-Progress -Activity "Implementing Generic VDI Setting Optimizations" -Id 107 -ParentId 10 -PercentComplete (($VDIOpsCounter / $VDIOps) * 100)
		
		$Key = "HKLM:\Software\Policies\Microsoft\Windows\CloudContent"
		$KeyExists = Test-Path $Key
		If ($KeyExists -ne "True") {
			New-Item -Path $Key -Force -Verbose
		}
		$ValueName = "DisableWindowsConsumerFeatures"
		$ValueType = "DWord"
		$DesiredValue = "1"
		If (($Key).$ValueName) {
			$ActualValue = (Get-ItemProperty $Key).$ValueName
			If ($ActualValue -ne $DesiredValue) {
				"$(Get-TimeStamp)		$ValueName Actual Value does not equal Desired Value.  Capturing Actual Value and then implementing Desired Value."
				Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type $ValueType -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
				Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
			}
			Else {
				"$(Get-TimeStamp)		$ValueName Actual Name matches Desired Value.  Neither Capturing Actual Value nor changing Desired Value."
			}
		}
		If (-not($Key).$ValueName) {
			"$(Get-TimeStamp)		$ValueName Actual Value does not exist.  Capturing and then implementing Desired Value."
			$ActualValue = "DNE"
			Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type "String" -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
			Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
		}
		"-----------------------------------------------------------------------"
		$VDIOPsCounter++
		Write-Progress -Activity "Implementing Generic VDI Setting Optimizations" -Id 107 -ParentId 10 -PercentComplete (($VDIOpsCounter / $VDIOps) * 100)

		$Key = "HKLM:\Software\Policies\Microsoft\Windows\Personalization"
		$KeyExists = Test-Path $Key
		If ($KeyExists -ne "True") {
			New-Item -Path $Key -Force -Verbose
		}
		$ValueName = "NoLockScreenSlideShow"
		$ValueType = "DWord"
		$DesiredValue = "1"
		If (($Key).$ValueName) {
			$ActualValue = (Get-ItemProperty $Key).$ValueName
			If ($ActualValue -ne $DesiredValue) {
				"$(Get-TimeStamp)		$ValueName Actual Value does not equal Desired Value.  Capturing Actual Value and then implementing Desired Value."
				Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type $ValueType -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
				Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
			}
			Else {
				"$(Get-TimeStamp)		$ValueName Actual Name matches Desired Value.  Neither Capturing Actual Value nor changing Desired Value."
			}
		}
		If (-not($Key).$ValueName) {
			"$(Get-TimeStamp)		$ValueName Actual Value does not exist.  Capturing and then implementing Desired Value."
			$ActualValue = "DNE"
			Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type "String" -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
			Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
		}
		"-----------------------------------------------------------------------"
		$VDIOPsCounter++
		Write-Progress -Activity "Implementing Generic VDI Setting Optimizations" -Id 107 -ParentId 10 -PercentComplete (($VDIOpsCounter / $VDIOps) * 100)
		
		$Key = "HKLM:\Software\Policies\Microsoft\Windows\Windows Feeds"
		$KeyExists = Test-Path $Key
		If ($KeyExists -ne "True") {
			New-Item -Path $Key -Force -Verbose
		}
		$ValueName = "EnableFeeds"
		$ValueType = "DWord"
		$DesiredValue = "0"
		If (($Key).$ValueName) {
			$ActualValue = (Get-ItemProperty $Key).$ValueName
			If ($ActualValue -ne $DesiredValue) {
				"$(Get-TimeStamp)		$ValueName Actual Value does not equal Desired Value.  Capturing Actual Value and then implementing Desired Value."
				Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type $ValueType -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
				Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
			}
			Else {
				"$(Get-TimeStamp)		$ValueName Actual Name matches Desired Value.  Neither Capturing Actual Value nor changing Desired Value."
			}
		}
		If (-not($Key).$ValueName) {
			"$(Get-TimeStamp)		$ValueName Actual Value does not exist.  Capturing and then implementing Desired Value."
			$ActualValue = "DNE"
			Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type "String" -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
			Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
		}
		"-----------------------------------------------------------------------"
		$VDIOPsCounter++
		Write-Progress -Activity "Implementing Generic VDI Setting Optimizations" -Id 107 -ParentId 10 -PercentComplete (($VDIOpsCounter / $VDIOps) * 100)
		
		$Key = "HKLM:\Software\Policies\Microsoft\Windows\Windows Search"
		$KeyExists = Test-Path $Key
		If ($KeyExists -ne "True") {
			New-Item -Path $Key -Force -Verbose
		}
		$ValueName = "EnableDynamicContentInWSB"
		$ValueType = "DWord"
		$DesiredValue = "0"
		If (($Key).$ValueName) {
			$ActualValue = (Get-ItemProperty $Key).$ValueName
			If ($ActualValue -ne $DesiredValue) {
				"$(Get-TimeStamp)		$ValueName Actual Value does not equal Desired Value.  Capturing Actual Value and then implementing Desired Value."
				Set-ItemProperty -Path $RevertGenVDI -Name $ValueName -Type $ValueType -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
				Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
			}
			Else {
				"$(Get-TimeStamp)		$ValueName Actual Name matches Desired Value.  Neither Capturing Actual Value nor changing Desired Value."
			}
		}
		If (-not($Key).$ValueName) {
			"$(Get-TimeStamp)		$ValueName Actual Value does not exist.  Capturing and then implementing Desired Value."
			$ActualValue = "DNE"
			Set-ItemProperty -Path $RevertGenVDI -Name "String" -Type $ValueType -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
			Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
		}
		"-----------------------------------------------------------------------"
		$VDIOPsCounter++
		Write-Progress -Activity "Implementing Generic VDI Setting Optimizations" -Id 107 -ParentId 10 -PercentComplete (($VDIOpsCounter / $VDIOps) * 100)
	}
}
If ($A -eq "Revert") {
	"$(Get-TimeStamp)		Reverting Generic VDI Settings is not currently supported."
}
If ($A -ne "Revert") {
	Write-Progress -Activity "Implementing Generic VDI Setting Optimizations" -Id 107 -ParentId 10 -PercentComplete 100 -Completed
	"$(Get-TimeStamp)		End Of Implementing"
}
If ($A -eq "Revert") {
	Write-Progress -Activity "Reverting Generic VDI Setting Optimizations" -Id 117 -ParentId 11 -PercentComplete 100 -Completed
	"$(Get-TimeStamp)		End Of Reverting"
}
"					$OSMajorVersion $OSMinorVersion"
"					Generic VDI Optimizations."
"-----------------------------------------------------------------------"
#region Stop Generic VDI Script Timer
$GenVDIScriptElapsedMins = $GenVDIScriptStopWatch.Elapsed.Minutes
$GenVDIScriptElapsedSecs = $GenVDIScriptStopWatch.Elapsed.Seconds
$GenVDIScriptStopWatch.Stop()
#endregion Stop Generic VDI Script Timer

$OSOpsCounter++
If ($A -ne "Revert") {
	Write-Progress -Activity "Implementing Windows Operating System Optimizations" -Id 10 -ParentId 0 -PercentComplete 100 -Completed
}
If ($A -eq "Revert") {
	Write-Progress -Activity "Reverting Windows Operating System Optimizations" -Id 11 -ParentId 1 -PercentComplete 100 -Completed
}
$OPsCounter++
If ($A -ne "Revert") {
	Write-Progress -Activity "Implementing Windows Optimizations" -Id 0 -PercentComplete (($OpsCounter / $Ops) * 100)
}
If ($A -eq "Revert") {
	Write-Progress -Activity "Reverting Windows Optimizations" -Id 1 -PercentComplete (($OpsCounter / $Ops) * 100)
}
#endregion Generic VDI Settings Optimizations

#region Application Optimizations
<#
	Application
	Specific
	Optimizations
#>
#region Start Application Optimization Script Timer
$AppScriptStopWatch = [System.Diagnostics.Stopwatch]::StartNew()
#endregion Start Application Optimization Script Timer
If ($A -ne "Revert") {
	Write-Progress -Activity "Implementing Application Optimizations" -Id 20 -ParentId 0 -PercentComplete 0
	"$(Get-TimeStamp)		Beginning Of Implementing"
}
If ($A -eq "Revert") {
	Write-Progress -Activity "Reverting Application Optimizations" -Id 21 -ParentId 1 -PercentComplete 0
	"$(Get-TimeStamp)		Beginning Of Reverting"
}
"					Application Optimizations."
"-----------------------------------------------------------------------"
#region Application Optimizations Template
<#
	Application Template

	If (Test-Path 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\(Executable Name) {
		"$(Get-TimeStamp)		(Application) Installed.  Optimizing (Application)."
		Disable Services
		Disable Scheduled Tasks
		Change/Add/Remove Registry Keys
		etc.
	}
	
	Stop & Disable Service:
		Stop-Service (Service Name) -Force
		Set-Service (Service Name) -StartupType Disabled
	
	Stop and Disable Scheduled Task:
		Get-ScheduledTask -TaskPath (ScheduledTaskPath) (ScheduledTaskName) | Stop-ScheduledTask
		Get-ScheduledTask -TaskPath (ScheduledTaskPath) (ScheduledTaskName) | Disable-ScheduledTask

	Remove Registry Value:
		Remove -ItemProperty -Path “(RegistryValueLocation)” -Name “(RegistryValueName)”
	
	Add Registry Value:
		Set-ItemProperty -Path "(RegistryValueLocation)" -Name "(RegistryValueName)" -Type "(RegistryValueType)" -Value (RegistryValue)
#>
#endregion Application Optimizations Template

$AppOpsCounter = 0
$Apps = 5

#region Google Chrome Optimizations
<#
	Google
	Chrome
	Optimizations
#>
$App = "Google Chrome"
If ($A -ne "Revert") {
	If (Test-Path 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\chrome.exe') {
		Write-Progress -Activity "Implementing Google Chrome Optimizations" -Id 201 -ParentId 20 -PercentComplete 0
		"$(Get-TimeStamp)		A Google Chrome installation was found.  Implementing Google Chrome optimizations."
		$ChromeOpsCounter = 0
		$ChromeOpsMax = 4

		#region Logging for Google Chrome Revert Actions
		New-Item -Path "$RevertApps\Chrome\Services" -Force -ErrorAction SilentlyContinue -Verbose
		$RevertChromeSer = "$RevertApps\Chrome\Services"
		New-Item -Path "$RevertApps\Chrome\Scheduled Tasks" -ErrorAction SilentlyContinue -Verbose
		$RevertChromeST = "$RevertApps\Chrome\Scheduled Tasks"
		New-Item -Path "$RevertApps\Chrome\Active Setup\32bit" -Force -ErrorAction SilentlyContinue -Verbose
		New-Item -Path "$RevertApps\Chrome\Active Setup\64bit" -Force -ErrorAction SilentlyContinue -Verbose
		$RevertChromeAS32 = "$RevertApps\Chrome\Active Setup\32bit"
		$RevertChromeAS64 = "$RevertApps\Chrome\Active Setup\64bit"
		New-Item -Path "$RevertApps\Chrome\Generic VDI Settings" -ErrorAction SilentlyContinue -Verbose
		$RevertChromeGenVDI = "$RevertApps\Chrome\Generic VDI Settings"
		#endregion Logging for Chrome Google Revert Actions
		
		#region Google Chrome Service Optimizations
		Write-Progress -Activity "Implementing Google Chrome Service Optimizations" -Id 2011 -ParentId 201 -PercentComplete 0
		$ChromeServices = @(
			"GoogleChromeElevationService",			#	Elevation Service for Google Chrome
			"gupdate",								#	Update Service for Google Chrome
			"gupdatem"								#	Update Service for Google Chrome
		)
		$ChromeServicesCounter = 0
		ForEach($Service in $ChromeServices) {
			$ServiceStart = Get-ItemPropertyValue -Path "HKLM:\System\CurrentControlSet\Services\$Service" -Name "Start"
			Set-ItemProperty -Path $RevertChromeSer -Name $Service -Type "DWord" -Value $ServiceStart -ErrorAction SilentlyContinue -Verbose
			Write-Progress -Activity "Implementing Google Chrome Service Optimizations" -Id 2011 -ParentId 201 -PercentComplete (($ChromeServicesCounter / $ChromeServices.count) * 100)
			Stop-Service $Service -Force -ErrorAction SilentlyContinue -Verbose
			$VerifyServiceStopped = Get-Service $Service -ErrorAction SilentlyContinue | Where-Object {$_.Status -eq "Stopped"} | select -last 1
			If ($VerifyServiceStopped) {
				"$(Get-TimeStamp)		$Service Verified Stopped."
				Set-Service $Service -StartupType Disabled -ErrorAction SilentlyContinue -Verbose
				$VerifyServiceDisabled = Get-Service $Service | Where-Object {$_.StartType -eq "Disabled"} | select -last 1
				If ($VerifyServiceDisabled) {
					"$(Get-TimeStamp)		$Service Verified Disabled."
				}
				Else {
					"$(Get-TimeStamp)		$Service Verified Not Disabled!  Trying Alternate Method."
					Set-ItemProperty HKLM:\SYSTEM\CurrentControlSet\Services\$Service -Name Start -Type DWord -Value 4 -ErrorAction SilentlyContinue -Verbose
					$VerifyServiceDisabled1 = Get-Service $Service | Where-Object {$_.StartType -eq "Disabled"} | select -last 1
					If ($VerifyServiceDisabled1) {
						"$(Get-TimeStamp)		$Service Verified Disabled using Alternate Method."
					}
				}
			"-----------------------------------------------------------------------"
			}
		}
		Write-Progress -Activity "Implementing Google Chrome Service Optimizations" -Id 2011 -ParentId 201 -PercentComplete 100 -Completed
		"$(Get-TimeStamp)		End Of Implementing"
		"					Google Chrome Service Optimizations."
		"-----------------------------------------------------------------------"
		#endregion Google Chrome Service Optimizations
		
		$ChromeOpsCounter++
		Write-Progress -Activity "Implementing Google Chrome Optimizations" -Id 201 -ParentId 20 -PercentComplete (($ChromeOpsCounter / $ChromeOpsMax) * 100)
		
		#region Google Chrome Scheduled Task Optimizations
		Write-Progress -Activity "Implementing Google Chrome Scheduled Task Optimizations" -Id 2012 -ParentId 201 -PercentComplete 0
		$ChromeScheduledTaskLocations = @(
			"\",
			"\"
		)
		$ChromeScheduledTaskNames = @(
			"*GoogleUpdateTaskMachineCore*",
			"*GoogleUpdateTaskMachineUA*"
		)
		$ChromeScheduledTasksCounter = 0
#		$ScheduledTasksCounterMax = 2
		For ($ChromeScheduledTasksOpsCounter = 0; $ChromeScheduledTasksOpsCounter -le 1; $ChromeScheduledTasksOpsCounter++) {
			$ScheduledTask = $ChromeScheduledTaskLocations[$ChromeScheduledTasksOpsCounter] + $ChromeScheduledTaskNames[$ChromeScheduledTasksOpsCounter]
			$ScheduledTaskLocation = $ChromeScheduledTaskLocations[$ChromeScheduledTasksOpsCounter]
			$ScheduledTaskName = $ChromeScheduledTaskNames[$ChromeScheduledTasksOpsCounter]
			$ScheduledTaskState = (Get-ScheduledTask -TaskPath $ScheduledTaskLocation -TaskName $ScheduledTaskName).State
			Get-ScheduledTask -TaskPath $ScheduledTaskLocation -TaskName $ScheduledTaskName | Stop-ScheduledTask -ErrorAction SilentlyContinue -Verbose
			Set-ItemProperty -Path $RevertChromeST -Name $ScheduledTask -Type "String" -Value $ScheduledTaskState -ErrorAction SilentlyContinue -Verbose
			Get-ScheduledTask -TaskPath $ScheduledTaskLocation -TaskName $ScheduledTaskName | Disable-ScheduledTask -ErrorAction SilentlyContinue -Verbose
			"$(Get-TimeStamp)		$ScheduledTask Scheduled Task Disabled."
			"-----------------------------------------------------------------------"
			$ScheduledTasksCounter++
			Write-Progress -Activity "Implementing Google Chrome Scheduled Task Optimizations" -Id 2012 -ParentId 201 -PercentComplete (($ChromeScheduledTasksCounter / $ChromeScheduledTaskNames.count) * 100)
		}
		Write-Progress -Activity "Implementing Google Chrome Scheduled Task Optimizations" -Id 2012 -ParentId 201 -PercentComplete 100 -Completed
		"$(Get-TimeStamp)		End Of Implementing"
		"					Google Chrome Scheduled Task Optimizations."
		"-----------------------------------------------------------------------"
		#endregion Google Chrome Scheduled Task Optimizations
		
		$ChromeOpsCounter++
		Write-Progress -Activity "Implementing Google Chrome Optimizations" -Id 201 -ParentId 20 -PercentComplete (($ChromeOpsCounter / $ChromeOpsMax) * 100)
		
		#region Google Chrome Active Setup Optimizations
		Write-Progress -Activity "Implementing Google Chrome Active Setup Optimizations" -Id 2013 -ParentId 201 -PercentComplete 0
		$ChromeActiveSetupNames = @(
			"Google Chrome"
		)
		$ChromeActiveSetupKeys = @(
			"{8A69D345-D564-463c-AFF1-A69D9E530F96}"						#Google Chrome
		)
		$ChromeActiveSetupCounter = 0
		$ChromeActiveSetupNameCounter = 0
		ForEach ($ActiveSetupKey in $ChromeActiveSetupKeys) {
			$ActiveSetupName = $ChromeActiveSetupNames[$ChromeActiveSetupNameCounter]
			$64bitActiveSetup = Test-Path -Path "HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\$ActiveSetupKey"
			If ($64bitActiveSetup -eq $True) {
				$StubPathExists = (Get-ItemProperty "HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\$ActiveSetupKey").PSObject.Properties.Name -contains "Stubpath"
				If ($StubPathExists -eq $True) {
					New-Item -Path "Registry::HKEY_LOCAL_MACHINE\Software\Nutanix\WOSTT\Active Setup\64bit\$ActiveSetupKey" -ErrorAction SilentlyContinue -Verbose
					$StubPath = Get-ItemPropertyValue -Path "HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\$ActiveSetupKey" -Name "Stubpath" -ErrorAction SilentlyContinue
					Set-ItemProperty -Path $RevertChromeAS64 -Name $ActiveSetupName -Type "String" -Value $StubPath -ErrorAction SilentlyContinue -Verbose
					Remove-ItemProperty -Path "HKLM:\Software\Microsoft\Active Setup\Installed Components\$ActiveSetupKey" -Name "StubPath" -ErrorAction SilentlyContinue -Verbose
				}
			}
			$32bitActiveSetup = Test-Path -Path "HKLM:\SOFTWARE\WOW6432Node\Microsoft\Active Setup\Installed Components\$ActiveSetupKey"
			If ($32bitActiveSetup -eq $True) {
				$StubPathExists = (Get-ItemProperty "HKLM:\SOFTWARE\WOW6432Node\Microsoft\Active Setup\Installed Components\$ActiveSetupKey").PSObject.Properties.Name -contains "Stubpath"
				If ($StubPathExists -eq $True) {
					New-Item -Path "Registry::HKEY_LOCAL_MACHINE\Software\Nutanix\WOSTT\Active Setup\32bit\$ActiveSetupKey" -ErrorAction SilentlyContinue -Verbose
					$StubPath = Get-ItemPropertyValue -Path "HKLM:\SOFTWARE\WOW6432Node\Microsoft\Active Setup\Installed Components\$ActiveSetupKey" -Name "Stubpath" -ErrorAction SilentlyContinue
					Set-ItemProperty -Path $RevertChromeAS32 -Name $ActiveSetupName -Type "String" -Value $StubPath -ErrorAction SilentlyContinue -Verbose
					Remove-ItemProperty -Path "HKLM:\Software\Wow6432Node\Microsoft\Active Setup\Installed Components\$ActiveSetupKey" -Name "StubPath" -ErrorAction SilentlyContinue -Verbose
				}
			}
			"$(Get-TimeStamp)		Implementing $ActiveSetupName Active Setup Optimizations."
			"-----------------------------------------------------------------------"
			$ChromeActiveSetupNameCounter++
			$ChromeActiveSetupCounter++
			Write-Progress -Activity "Implementing Google Chrome Active Setup Optimizations" -Id 2013 -ParentId 201 -PercentComplete (($ChromeActiveSetupCounter / $ChromeActiveSetupKeys.count) * 100)
		}
		Write-Progress -Activity "Implementing Google Chrome Active Setup Optimizations" -Id 2013 -ParentId 201 -PercentComplete 100 -Completed
		"$(Get-TimeStamp)		End Of Implementing"
		"					Google Chrome Active Setup Optimizations."
		"-----------------------------------------------------------------------"
		#endregion Google Chrome Active Setup Optimizations
		
		$ChromeOpsCounter++
		Write-Progress -Activity "Implementing Google Chrome Optimizations" -Id 201 -ParentId 20 -PercentComplete (($ChromeOpsCounter / $ChromeOpsMax) * 100)
		
		#region Google Chrome Generic VDI Optimizations
		
		Write-Progress -Activity "Implementing Google Chrome Generic VDI Optimizations" -Id 2013 -ParentId 201 -PercentComplete 0
		$ChromeGenVDIOpsCounter = 0
		$ChromeGenVDIOps = "2"

		$Key = "HKLM:\Software\Policies\Google\Chrome"
		If (-not(Test-Path $Key)) {
			New-Item -Path $Key -Force -ErrorAction SilentlyContinue -Verbose
		}
		$ValueName = "ChromeCleanupEnabled"
		$ValueType = "DWord"
		$DesiredValue = "0"
		If (($Key).$ValueName) {
			$ActualValue = (Get-ItemProperty $Key).$ValueName
			If ($ActualValue -ne $DesiredValue) {
				"$(Get-TimeStamp)		$ValueName Actual Value does not equal Desired Value.  Capturing Actual Value and then implementing Desired Value."
				Set-ItemProperty -Path $RevertChromeGenVDI -Name $ValueName -Type $ValueType -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
				Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
			}
			Else {
				"$(Get-TimeStamp)		$ValueName Actual Name matches Desired Value.  Neither Capturing Actual Value nor changing Desired Value."
			}
		}
		If (-not($Key).$ValueName) {
			"$(Get-TimeStamp)		$ValueName Actual Value does not exist.  Capturing and then implementing Desired Value."
			$ActualValue = "DNE"
			$ValueType = "String"
			Set-ItemProperty -Path $RevertChromeGenVDI -Name $ValueName -Type $ValueType -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
			Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
		}
		"-----------------------------------------------------------------------"
		$ChromeGenVDIOpsCounter++
		Write-Progress -Activity "Implementing Google Chrome Generic VDI Optimizations" -Id 2013 -ParentId 201 -PercentComplete (($ChromeGenVDIOpsCounter / $ChromeGenVDIOps) * 100)
		$ValueName = "ChromeCleanupReportingEnabled"
		$ValueType = "DWord"
		$DesiredValue = "0"
		If (($Key).$ValueName) {
			$ActualValue = (Get-ItemProperty $Key).$ValueName
			If ($ActualValue -ne $DesiredValue) {
				"$(Get-TimeStamp)		$ValueName Actual Value does not equal Desired Value.  Capturing Actual Value and then implementing Desired Value."
				Set-ItemProperty -Path $RevertChromeGenVDI -Name $ValueName -Type $ValueType -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
				Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
			}
			Else {
				"$(Get-TimeStamp)		$ValueName Actual Name matches Desired Value.  Neither Capturing Actual Value nor changing Desired Value."
			}
		}
		If (-not($Key).$ValueName) {
			"$(Get-TimeStamp)		$ValueName Actual Value does not exist.  Capturing and then implementing Desired Value."
			$ActualValue = "DNE"
			$ValueType = "String"
			Set-ItemProperty -Path $RevertChromeGenVDI -Name $ValueName -Type $ValueType -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
			Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
		}
		"-----------------------------------------------------------------------"
		Write-Progress -Activity "Implementing Google Chrome Generic VDI Optimizations" -Id 2013 -ParentId 201 -PercentComplete 100 -Completed
		"$(Get-TimeStamp)		End Of Implementing"
		"					Google Chrome Generic VDI Optimizations."
		"-----------------------------------------------------------------------"
		#endregion Google Chrome Generic VDI Optimizations	

		$ChromeOpsCounter++
		Write-Progress -Activity "Implementing Google Chrome Optimizations" -Id 201 -ParentId 20 -PercentComplete 100 -Completed
		
	}
	<#
		Set-ItemProperty -Path "HKLM:\Software\Policies\Google\Chrome" -Name "ChromeCleanupEnabled" -Type "DWord" -Value 0
		Set-ItemProperty -Path "HKLM:\Software\Policies\Google\Chrome" -Name "ChromeCleanupReportingEnabled" -Type "DWord" -Value 0
		Disables Google Software Reporter Tool
		https://www.ghacks.net/2018/01/20/how-to-block-the-chrome-software-reporter-tool-software_reporter_tool-exe/
		Only works if machine is domain joined
		https://www.chromium.org/administrators/policy-list-3#ChromeCleanupEnabled
	#>
	Write-Progress -Activity "Implementing Google Chrome Optimizations" -Id 201 -ParentId 20 -PercentComplete 100 -Completed	
	"$(Get-TimeStamp)		End Of Implementing"
	"					Google Chrome Optimizations."
	"-----------------------------------------------------------------------"	
}
If ($A -eq "Revert") {
	"$(Get-TimeStamp)		Reverting Application $App Optimizations is not currently supported."
}
$AppOpsCounter++
If ($A -ne "Revert") {
	Write-Progress -Activity "Implementing Application Optimizations" -Id 20 -ParentId 0 -PercentComplete (($AppOpsCounter / $Apps) * 100)
}
If ($A -eq "Revert") {
	Write-Progress -Activity "Reverting Application Optimizations" -Id 21 -ParentId 1 -PercentComplete (($AppOpsCounter / $Apps) * 100)
}
#endregion Google Chrome Optimizations

$OPsCounter++
If ($A -ne "Revert") {
	Write-Progress -Activity "Implementing Windows Optimizations" -Id 0 -PercentComplete (($OpsCounter / $Ops) * 100)
}
If ($A -eq "Revert") {
	Write-Progress -Activity "Reverting Windows Optimizations" -Id 1 -PercentComplete (($OpsCounter / $Ops) * 100)
}

#region Mozilla Firefox Optimizations
<#
	Mozilla
	Firefox 88.0+
	Optimizations
#>
$App = "Mozilla Firefox"
If ($A -ne "Revert") {
	If (Test-Path 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\firefox.exe') {
		Write-Progress -Activity "Implementing Mozilla Firefox Optimizations" -Id 202 -ParentId 20 -PercentComplete 0
		"$(Get-TimeStamp)		A Mozilla Firefox installation was found.  Implementing Mozilla Firefox optimizations."
		
		#region Logging for Mozilla Firefox Revert Actions
		New-Item -Path "$RevertApps\Firefox\Services" -Force -ErrorAction SilentlyContinue -Verbose
		$RevertFirefoxSer = "$RevertApps\Firefox\Services"
		New-Item -Path "$RevertApps\Firefox\Scheduled Tasks" -ErrorAction SilentlyContinue -Verbose
		$RevertFirefoxST = "$RevertApps\Firefox\Scheduled Tasks"
		#endregion Logging for Mozilla Firefox Revert Actions
		
		#region Mozilla Firefox Service Optimizations
		Write-Progress -Activity "Implementing Mozilla Firefox Service Optimizations" -Id 2021 -ParentId 202 -PercentComplete 0
		$FirefoxServices = @(
			"MozillaMaintenance"				#	Update/Maintenance Service for Mozilla Firefox
		)
		$ServicesCounter = 0
		ForEach($Service in $FirefoxServices) {
			$ServiceStart = Get-ItemPropertyValue -Path "HKLM:\System\CurrentControlSet\Services\$Service" -Name "Start"
			Set-ItemProperty -Path $RevertFirefoxSer -Name $Service -Type "DWord" -Value $ServiceStart -ErrorAction SilentlyContinue -Verbose
			Write-Progress -Activity "Implementing Mozilla Firefox Service Optimizations" -Id 2021 -ParentId 202 -PercentComplete (($ServicesCounter / $FirefoxServices.count) * 100)
			Stop-Service $Service -Force -ErrorAction SilentlyContinue -Verbose
			$VerifyServiceStopped = Get-Service $Service -ErrorAction SilentlyContinue | Where-Object {$_.Status -eq "Stopped"} | select -last 1
			If ($VerifyServiceStopped) {
				"$(Get-TimeStamp)		$Service Verified Stopped."
				Set-Service $Service -StartupType Disabled -ErrorAction SilentlyContinue -Verbose
				$VerifyServiceDisabled = Get-Service $Service | Where-Object {$_.StartType -eq "Disabled"} | select -last 1
				If ($VerifyServiceDisabled) {
					"$(Get-TimeStamp)		$Service Verified Disabled."
				}
				Else {
					"$(Get-TimeStamp)		$Service Verified Not Disabled!  Trying Alternate Method."
					Set-ItemProperty HKLM:\SYSTEM\CurrentControlSet\Services\$Service -Name Start -Type DWord -Value 4 -ErrorAction SilentlyContinue -Verbose
					$VerifyServiceDisabled1 = Get-Service $Service | Where-Object {$_.StartType -eq "Disabled"} | select -last 1
					If ($VerifyServiceDisabled1) {
						"$(Get-TimeStamp)		$Service Verified Disabled using Alternate Method."
					}
				}
				"-----------------------------------------------------------------------"
			}
		}
		Write-Progress -Activity "Implementing Mozilla Firefox Service Optimizations" -Id 2021 -ParentId 202 -PercentComplete 100 -Completed
		"$(Get-TimeStamp)		End Of Implementing"
		"					Mozilla Firefox Service Optimizations."
		"-----------------------------------------------------------------------"
		#endregion Mozilla Firefox Service Optimizations
		
		#region Mozilla Firefox Scheduled Task Optimizations
		Write-Progress -Activity "Implementing Mozilla Firefox Scheduled Task Optimizations" -Id 2022 -ParentId 202 -PercentComplete 0	
		$FirefoxScheduledTaskLocations = @(
			"\Mozilla\"
		)
		$FirefoxScheduledTaskNames = @(
			"*Firefox*"						#Firefox Default Browser Agent
		)
		$FirefoxScheduledTasksCounter = 0
#		$ScheduledTasksCounterMax = 1
		For ($FirefoxScheduledTasksOpsCounter = 0; $FirefoxScheduledTasksOpsCounter -le 0; $FirefoxScheduledTasksOpsCounter++) {
			$ScheduledTask = $FirefoxScheduledTaskLocations[$FirefoxScheduledTasksOpsCounter] + $FirefoxScheduledTaskNames[$FirefoxScheduledTasksOpsCounter]
			$ScheduledTaskLocation = $FirefoxScheduledTaskLocations[$FirefoxScheduledTasksOpsCounter]
			$ScheduledTaskName = $FirefoxScheduledTaskNames[$FirefoxScheduledTasksOpsCounter]
			$ScheduledTaskState = (Get-ScheduledTask -TaskPath $ScheduledTaskLocation -TaskName $ScheduledTaskName).State
			Get-ScheduledTask -TaskPath $ScheduledTaskLocation -TaskName $ScheduledTaskName | Stop-ScheduledTask -ErrorAction SilentlyContinue -Verbose
			Set-ItemProperty -Path $RevertFirefoxST -Name $ScheduledTask -Type "String" -Value $ScheduledTaskState -ErrorAction SilentlyContinue -Verbose
			Get-ScheduledTask -TaskPath $ScheduledTaskLocation -TaskName $ScheduledTaskName | Disable-ScheduledTask -ErrorAction SilentlyContinue -Verbose
			"$(Get-TimeStamp)		$ScheduledTask Scheduled Task Disabled."
			"-----------------------------------------------------------------------"
			$ScheduledTasksCounter++
			Write-Progress -Activity "Implementing Mozilla Firefox Scheduled Task Optimizations" -Id 2022 -ParentId 202 -PercentComplete (($FirefoxScheduledTasksCounter / $FirefoxScheduledTaskNames.count) * 100)
		}
		Write-Progress -Activity "Implementing Mozilla Firefox Scheduled Task Optimizations" -Id 2022 -ParentId 202 -PercentComplete 100 -Completed
		Write-Progress -Activity "Implementing Mozilla Firefox Optimizations" -Id 202 -ParentId 20 -PercentComplete 100 -Completed
		"$(Get-TimeStamp)		End Of Implementing"
		"					Mozilla Firefox Scheduled Task Optimizations."
		"-----------------------------------------------------------------------"
		#endregion Mozilla Firefox Scheduled Task Optimizations
	}
	<#
		Mozilla Firefox utilizes config and ini files to customize the application, rather then registry keys.
		https://stealthpuppy.com/prepare-mozilla-firefox-for-enterprise-deployment-and-virtualization/ explains it further.  The link is almost 10 years old, but Firefox hasn't changed much.
		My recommendation, follow the link above; create the appropriate configuration files; and then place them in the correct folder for everybody to utilize.
	#>
}
If ($A -eq "Revert") {
	"$(Get-TimeStamp)		Reverting Application $App Optimizations is not currently supported."
}
$AppOpsCounter++
If ($A -ne "Revert") {
	Write-Progress -Activity "Implementing Application Optimizations" -Id 20 -ParentId 0 -PercentComplete (($AppOpsCounter / $Apps) * 100)
}
If ($A -eq "Revert") {
	Write-Progress -Activity "Reverting Application Optimizations" -Id 21 -ParentId 1 -PercentComplete (($AppOpsCounter / $Apps) * 100)
}
#endregion Mozilla Firefox Optimizations

$OPsCounter++
If ($A -ne "Revert") {
	Write-Progress -Activity "Implementing Windows Optimizations" -Id 0 -PercentComplete (($OpsCounter / $Ops) * 100)
}
If ($A -eq "Revert") {
	Write-Progress -Activity "Reverting Windows Optimizations" -Id 1 -PercentComplete (($OpsCounter / $Ops) * 100)
}

#region Adobe Reader DC Optimizations
<#
	Adobe
	Reader DC
	Optimizations
#>
$App = "Adobe Reader DC"
If ($A -ne "Revert") {
	If (Test-Path 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\AcroRd32.exe') {
		Write-Progress -Activity "Implementing Adobe Reader Optimizations" -Id 203 -ParentId 20 -PercentComplete 0
		"$(Get-TimeStamp)		An Adobe Reader installation was found.  Implementing Adobe Reader optimizations."

		#region Logging for Adobe Reader Revert Actions
		New-Item -Path "$RevertApps\AdobeReader\Services" -Force -ErrorAction SilentlyContinue -Verbose
		$RevertAdobeRdrSer = "$RevertApps\AdobeReader\Services"
		New-Item -Path "$RevertApps\AdobeReader\Scheduled Tasks" -ErrorAction SilentlyContinue -Verbose
		$RevertAdobeRdrST = "$RevertApps\AdobeReader\Scheduled Tasks"
		New-Item -Path "$RevertApps\AdobeReader\Generic VDI Settings" -ErrorAction SilentlyContinue -Verbose
		$RevertAdobeRdrGenVDI = "$RevertApps\AdobeReader\Generic VDI Settings"
		#endregion Logging for Adobe Reader Revert Actions
		
		#region Adobe Reader Service Optimizations
		Write-Progress -Activity "Implementing Adobe Reader Service Optimizations" -Id 2031 -ParentId 203 -PercentComplete 0
		$AdobeRdrServices = @(
			"AdobeARMservice"				#	Adobe Acrobat Update Task
		)
		$AdobeRdrServicesCounter = 0
		ForEach($Service in $AdobeRdrServices) {
			$ServiceStart = Get-ItemPropertyValue -Path "HKLM:\System\CurrentControlSet\Services\$Service" -Name "Start"
			Set-ItemProperty -Path $RevertAdobeRdrSer -Name $Service -Type "DWord" -Value $ServiceStart -ErrorAction SilentlyContinue -Verbose
			Write-Progress -Activity "Implementing Adobe Reader Service Optimizations" -Id 2031 -ParentId 203 -PercentComplete (($AdobeRdrServicesCounter / $AdobeRdrServices.count) * 100)
			Stop-Service $Service -Force -ErrorAction SilentlyContinue -Verbose
			$VerifyServiceStopped = Get-Service $Service -ErrorAction SilentlyContinue | Where-Object {$_.Status -eq "Stopped"} | select -last 1
			If ($VerifyServiceStopped) {
				"$(Get-TimeStamp)		$Service Verified Stopped."
				Set-Service $Service -StartupType Disabled -ErrorAction SilentlyContinue -Verbose
				$VerifyServiceDisabled = Get-Service $Service | Where-Object {$_.StartType -eq "Disabled"} | select -last 1
				If ($VerifyServiceDisabled) {
					"$(Get-TimeStamp)		$Service Verified Disabled."
				}
				Else {
					"$(Get-TimeStamp)		$Service Verified Not Disabled!  Trying Alternate Method."
					Set-ItemProperty HKLM:\SYSTEM\CurrentControlSet\Services\$Service -Name Start -Type DWord -Value 4 -ErrorAction SilentlyContinue -Verbose
					$VerifyServiceDisabled1 = Get-Service $Service | Where-Object {$_.StartType -eq "Disabled"} | select -last 1
					If ($VerifyServiceDisabled1) {
						"$(Get-TimeStamp)		$Service Verified Disabled using Alternate Method."
					}
				}
				"-----------------------------------------------------------------------"
			}
		}
		Write-Progress -Activity "Implementing Adobe Reader Service Optimizations" -Id 2031 -ParentId 203 -PercentComplete 100 -Completed
		"$(Get-TimeStamp)		End Of Implementing"
		"					Adobe Reader Service Optimizations."
		"-----------------------------------------------------------------------"
		#endregion Adobe Reader Service Optimizations

		#region Adobe Reader Scheduled Task Optimizations
		Write-Progress -Activity "Implementing Adobe Reader Scheduled Task Optimizations" -Id 2032 -ParentId 203 -PercentComplete 0	
		$AdobeRdrScheduledTaskLocations = @(
			"\"
		)
		$AdobeRdrScheduledTaskNames = @(
			"Adobe Acrobat Update Task"
		)
		$AdobeRdrScheduledTasksCounter = 0
#		$ScheduledTasksCounterMax = 1
		For ($AdobeRdrScheduledTasksOpsCounter = 0; $AdobeRdrScheduledTasksOpsCounter -le 0; $AdobeRdrScheduledTasksOpsCounter++) {
			$ScheduledTask = $AdobeRdrScheduledTaskLocations[$AdobeRdrScheduledTasksOpsCounter] + $AdobeRdrScheduledTaskNames[$AdobeRdrScheduledTasksOpsCounter]
			$ScheduledTaskLocation = $AdobeRdrScheduledTaskLocations[$AdobeRdrScheduledTasksOpsCounter]
			$ScheduledTaskName = $AdobeRdrScheduledTaskNames[$AdobeRdrScheduledTasksOpsCounter]
			$ScheduledTaskState = (Get-ScheduledTask -TaskPath $ScheduledTaskLocation -TaskName $ScheduledTaskName).State
			Get-ScheduledTask -TaskPath $ScheduledTaskLocation -TaskName $ScheduledTaskName | Stop-ScheduledTask -ErrorAction SilentlyContinue -Verbose
			Set-ItemProperty -Path $RevertAdobeRdrST -Name $ScheduledTask -Type "String" -Value $ScheduledTaskState -ErrorAction SilentlyContinue -Verbose
			Get-ScheduledTask -TaskPath $ScheduledTaskLocation -TaskName $ScheduledTaskName | Disable-ScheduledTask -ErrorAction SilentlyContinue -Verbose
			"$(Get-TimeStamp)		$ScheduledTask Scheduled Task Disabled."
			"-----------------------------------------------------------------------"
			$ScheduledTasksCounter++
			Write-Progress -Activity "Implementing Adobe Reader Scheduled Task Optimizations" -Id 2032 -ParentId 203 -PercentComplete (($AdobeRdrScheduledTasksCounter / $AdobeRdrScheduledTaskNames.count) * 100)
		}
		Write-Progress -Activity "Implementing Adobe Reader Scheduled Task Optimizations" -Id 2032 -ParentId 203 -PercentComplete 100 -Completed
		"$(Get-TimeStamp)		End Of Implementing"
		"					Adobe Reader Scheduled Task Optimizations."
		"-----------------------------------------------------------------------"
		#endregion Adobe Reader Scheduled Task Optimizations

		#region Adobe Reader Generic VDI Optimizations
		Write-Progress -Activity "Implementing Adobe Reader Generic VDI Optimizations" -Id 2033 -ParentId 203 -PercentComplete 0
		$AdobeRdrGenVDIOpsCounter = 0
		$AdobeRdrGenVDIOps = "7"

		$Key = "HKLM:\Software\Adobe\Acrobat Reader\DC\FTEDialog"
		If (-not(Test-Path $Key)) {
			New-Item -Path $Key -Force -ErrorAction SilentlyContinue -Verbose
		}
		$ValueName = "iFTEVersion"
		$ValueType = "DWord"
		$DesiredValue = "10"
		If (($Key).$ValueName) {
			$ActualValue = (Get-ItemProperty $Key).$ValueName
			If ($ActualValue -ne $DesiredValue) {
				"$(Get-TimeStamp)		$ValueName Actual Value does not equal Desired Value.  Capturing Actual Value and then implementing Desired Value."
				Set-ItemProperty -Path $RevertAdobeRdrGenVDI -Name $ValueName -Type $ValueType -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
				Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
			}
			Else {
				"$(Get-TimeStamp)		$ValueName Actual Name matches Desired Value.  Neither Capturing Actual Value nor changing Desired Value."
			}
		}
		If (-not($Key).$ValueName) {
			"$(Get-TimeStamp)		$ValueName Actual Value does not exist.  Capturing and then implementing Desired Value."
			$ActualValue = "DNE"
			$ValueType = "String"
			Set-ItemProperty -Path $RevertAdobeRdrGenVDI -Name $ValueName -Type $ValueType -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
			Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
		}
		"-----------------------------------------------------------------------"
		$AdobeRdrGenVDIOpsCounter++
		Write-Progress -Activity "Implementing Adobe Reader Generic VDI Optimizations" -Id 2033 -ParentId 203 -PercentComplete (($AdobeRdrGenVDIOpsCounter / $AdobeRdrGenVDIOps) * 100)
		$ValueName = "iLastCardShown"
		$ValueType = "DWord"
		$DesiredValue = "0"
		If (($Key).$ValueName) {
			$ActualValue = (Get-ItemProperty $Key).$ValueName
			If ($ActualValue -ne $DesiredValue) {
				"$(Get-TimeStamp)		$ValueName Actual Value does not equal Desired Value.  Capturing Actual Value and then implementing Desired Value."
				Set-ItemProperty -Path $RevertAdobeRdrGenVDI -Name $ValueName -Type $ValueType -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
				Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
			}
			Else {
				"$(Get-TimeStamp)		$ValueName Actual Name matches Desired Value.  Neither Capturing Actual Value nor changing Desired Value."
			}
		}
		If (-not($Key).$ValueName) {
			"$(Get-TimeStamp)		$ValueName Actual Value does not exist.  Capturing and then implementing Desired Value."
			$ActualValue = "DNE"
			$ValueType = "String"
			Set-ItemProperty -Path $RevertAdobeRdrGenVDI -Name $ValueName -Type $ValueType -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
			Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
		}
		"-----------------------------------------------------------------------"
		$AdobeRdrGenVDIOpsCounter++
		Write-Progress -Activity "Implementing Adobe Reader Generic VDI Optimizations" -Id 2033 -ParentId 203 -PercentComplete (($AdobeRdrGenVDIOpsCounter / $AdobeRdrGenVDIOps) * 100)
		$Key = "HKLM:\Software\Wow6432Node\Adobe\Acrobat Reader\DC\AdobeViewer"
		If (-not(Test-Path $Key)) {
			New-Item -Path $Key -Force -ErrorAction SilentlyContinue -Verbose
		}
		$ValueName = "EULA"
		$ValueType = "DWord"
		$DesiredValue = "1"
		If (($Key).$ValueName) {
			$ActualValue = (Get-ItemProperty $Key).$ValueName
			If ($ActualValue -ne $DesiredValue) {
				"$(Get-TimeStamp)		$ValueName Actual Value does not equal Desired Value.  Capturing Actual Value and then implementing Desired Value."
				Set-ItemProperty -Path $RevertAdobeRdrGenVDI -Name $ValueName -Type $ValueType -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
				Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
			}
			Else {
				"$(Get-TimeStamp)		$ValueName Actual Name matches Desired Value.  Neither Capturing Actual Value nor changing Desired Value."
			}
		}
		If (-not($Key).$ValueName) {
			"$(Get-TimeStamp)		$ValueName Actual Value does not exist.  Capturing and then implementing Desired Value."
			$ActualValue = "DNE"
			$ValueType = "String"
			Set-ItemProperty -Path $RevertAdobeRdrGenVDI -Name $ValueName -Type $ValueType -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
			Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
		}
		"-----------------------------------------------------------------------"
		$AdobeRdrGenVDIOpsCounter++
		Write-Progress -Activity "Implementing Adobe Reader Generic VDI Optimizations" -Id 2033 -ParentId 203 -PercentComplete (($AdobeRdrGenVDIOpsCounter / $AdobeRdrGenVDIOps) * 100)
		$Key = "HKLM:\Software\Wow6432Node\Policies\Adobe\Acrobat Reader\DC\FeatureLockDown"
		If (-not(Test-Path $Key)) {
			New-Item -Path $Key -Force -ErrorAction SilentlyContinue -Verbose
		}
		$ValueName = "bAcroSuppressUpsell"
		$ValueType = "DWord"
		$DesiredValue = "1"
		If (($Key).$ValueName) {
			$ActualValue = (Get-ItemProperty $Key).$ValueName
			If ($ActualValue -ne $DesiredValue) {
				"$(Get-TimeStamp)		$ValueName Actual Value does not equal Desired Value.  Capturing Actual Value and then implementing Desired Value."
				Set-ItemProperty -Path $RevertAdobeRdrGenVDI -Name $ValueName -Type $ValueType -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
				Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
			}
			Else {
				"$(Get-TimeStamp)		$ValueName Actual Name matches Desired Value.  Neither Capturing Actual Value nor changing Desired Value."
			}
		}
		If (-not($Key).$ValueName) {
			"$(Get-TimeStamp)		$ValueName Actual Value does not exist.  Capturing and then implementing Desired Value."
			$ActualValue = "DNE"
			$ValueType = "String"
			Set-ItemProperty -Path $RevertAdobeRdrGenVDI -Name $ValueName -Type $ValueType -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
			Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
		}
		"-----------------------------------------------------------------------"
		$AdobeRdrGenVDIOpsCounter++
		Write-Progress -Activity "Implementing Adobe Reader Generic VDI Optimizations" -Id 2033 -ParentId 203 -PercentComplete (($AdobeRdrGenVDIOpsCounter / $AdobeRdrGenVDIOps) * 100)
		$ValueName = "bProtectedMode"
		$ValueType = "DWord"
		$DesiredValue = "0"
		If (($Key).$ValueName) {
			$ActualValue = (Get-ItemProperty $Key).$ValueName
			If ($ActualValue -ne $DesiredValue) {
				"$(Get-TimeStamp)		$ValueName Actual Value does not equal Desired Value.  Capturing Actual Value and then implementing Desired Value."
				Set-ItemProperty -Path $RevertAdobeRdrGenVDI -Name $ValueName -Type $ValueType -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
				Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
			}
			Else {
				"$(Get-TimeStamp)		$ValueName Actual Name matches Desired Value.  Neither Capturing Actual Value nor changing Desired Value."
			}
		}
		If (-not($Key).$ValueName) {
			"$(Get-TimeStamp)		$ValueName Actual Value does not exist.  Capturing and then implementing Desired Value."
			$ActualValue = "DNE"
			$ValueType = "String"
			Set-ItemProperty -Path $RevertAdobeRdrGenVDI -Name $ValueName -Type $ValueType -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
			Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
		}
		"-----------------------------------------------------------------------"
		$AdobeRdrGenVDIOpsCounter++
		Write-Progress -Activity "Implementing Adobe Reader Generic VDI Optimizations" -Id 2033 -ParentId 203 -PercentComplete (($AdobeRdrGenVDIOpsCounter / $AdobeRdrGenVDIOps) * 100)
		$ValueName = "bUpdater"
		$ValueType = "DWord"
		$DesiredValue = "0"
		If (($Key).$ValueName) {
			$ActualValue = (Get-ItemProperty $Key).$ValueName
			If ($ActualValue -ne $DesiredValue) {
				"$(Get-TimeStamp)		$ValueName Actual Value does not equal Desired Value.  Capturing Actual Value and then implementing Desired Value."
				Set-ItemProperty -Path $RevertAdobeRdrGenVDI -Name $ValueName -Type $ValueType -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
				Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
			}
			Else {
				"$(Get-TimeStamp)		$ValueName Actual Name matches Desired Value.  Neither Capturing Actual Value nor changing Desired Value."
			}
		}
		If (-not($Key).$ValueName) {
			"$(Get-TimeStamp)		$ValueName Actual Value does not exist.  Capturing and then implementing Desired Value."
			$ActualValue = "DNE"
			$ValueType = "String"
			Set-ItemProperty -Path $RevertAdobeRdrGenVDI -Name $ValueName -Type $ValueType -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
			Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
		}
		"-----------------------------------------------------------------------"
		$AdobeRdrGenVDIOpsCounter++
		Write-Progress -Activity "Implementing Adobe Reader Generic VDI Optimizations" -Id 2033 -ParentId 203 -PercentComplete (($AdobeRdrGenVDIOpsCounter / $AdobeRdrGenVDIOps) * 100)
		$Key = "HKLM:\Software\Wow6432Node\Policies\Adobe\Acrobat Reader\DC\FeatureLockDown\cServices"
		If (-not(Test-Path $Key)) {
			New-Item -Path $Key -Force -ErrorAction SilentlyContinue -Verbose
		}
		$ValueName = "bUpdater"
		$ValueType = "DWord"
		$DesiredValue = "0"
		If (($Key).$ValueName) {
			$ActualValue = (Get-ItemProperty $Key).$ValueName
			If ($ActualValue -ne $DesiredValue) {
				"$(Get-TimeStamp)		$ValueName Actual Value does not equal Desired Value.  Capturing Actual Value and then implementing Desired Value."
				Set-ItemProperty -Path $RevertAdobeRdrGenVDI -Name $ValueName -Type $ValueType -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
				Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
			}
			Else {
				"$(Get-TimeStamp)		$ValueName Actual Name matches Desired Value.  Neither Capturing Actual Value nor changing Desired Value."
			}
		}
		If (-not($Key).$ValueName) {
			"$(Get-TimeStamp)		$ValueName Actual Value does not exist.  Capturing and then implementing Desired Value."
			$ActualValue = "DNE"
			$ValueType = "String"
			Set-ItemProperty -Path $RevertAdobeRdrGenVDI -Name $ValueName -Type $ValueType -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
			Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
		}
		"-----------------------------------------------------------------------"
		Write-Progress -Activity "Implementing Adobe Reader Generic VDI Optimizations" -Id 2033 -ParentId 203 -PercentComplete 100 -Completed
		Write-Progress -Activity "Optimizing Adobe Reader" -Id 203 -ParentId 20 -PercentComplete 100 -Completed
		"$(Get-TimeStamp)		End Of Implementing"
		"					Adobe Reader Generic VDI Optimizations."
		"-----------------------------------------------------------------------"
		#endregion Adobe Reader Generic VDI Optimizations
	}
	<#
		The following are Best Practice Adobe Reader DC Registry Values for VDI

		Disables the Reader Tour at first startup
		Set-ItemProperty -Path "HKLM:\Software\WOW6432Node\Adobe\Acrobat Reader\DC\FTEDialog" -Name "iFTEVersion" -Type "DWord" -Value a

		Agrees to the EULA
		Set-ItemProperty -Path "HKLM:\Software\Wow6432Node\Policies\Adobe\Acrobat Reader\DC\AdobeViewer" -Name "EULA" -Type "DWord" -Value 1

		Prevents the upsell "feature" of Reader, prompting users to buy Acrobat
		Set-ItemProperty -Path "HKLM:\Software\WOW6432Node\Policies\Adobe\Acrobat Reader\DC\FeatureLockDown" -Name "bAcroSuppressUpsell" -Type "DWord" -Value 1

		Disables Protected Mode, which sandboxes Acrobat and Reader processes
		Set-ItemProperty -Path "HKLM:\Software\WOW6432Node\Policies\Adobe\Acrobat Reader\DC\FeatureLockDown" -Name "bProtectedMode" -Type "DWord" -Value 0

		Removes the 'Check for Updates' option from the Help menu and Locks the Updater
		Set-ItemProperty -Path "HKLM:\Software\WOW6432Node\Policies\Adobe\Acrobat Reader\DC\FeatureLockDown" -Name "bUpdater" -Type "DWord" -Value 0

		Disables services and service component updates
		Set-ItemProperty -Path "HKLM:\Software\WOW6432Node\Policies\Adobe\Acrobat Reader\DC\FeatureLockDown\cServices" -Name "bUpdater" -Type "DWord" -Value 0
	#>
}
If ($A -eq "Revert") {
	"$(Get-TimeStamp)		Reverting Application $App Optimizations is not currently supported."
}
$AppOpsCounter++
If ($A -ne "Revert") {
	Write-Progress -Activity "Implementing Application Optimizations" -Id 20 -ParentId 0 -PercentComplete (($AppOpsCounter / $Apps) * 100)
}
If ($A -eq "Revert") {
	Write-Progress -Activity "Reverting Application Optimizations" -Id 21 -ParentId 1 -PercentComplete (($AppOpsCounter / $Apps) * 100)
}
#endregion Adobe Reader DC Optimizations

$OPsCounter++
If ($A -ne "Revert") {
	Write-Progress -Activity "Implementing Windows Optimizations" -Id 0 -PercentComplete (($OpsCounter / $Ops) * 100)
}
If ($A -eq "Revert") {
	Write-Progress -Activity "Reverting Windows Optimizations" -Id 1 -PercentComplete (($OpsCounter / $Ops) * 100)
}

#region Java Runtime Environment v8.x Optimizations
<#
	Java
	Runtime Environment
	v8.x
	Optimizations
#>
$App = "Java Runtime Environment"
If ($A -ne "Revert") {
	If (Test-Path 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\javaws.exe') {
		Write-Progress -Activity "Implementing Java Runtime Environment Optimizations" -Id 204 -ParentId 20 -PercentComplete 0
		"$(Get-TimeStamp)		An Java Runtime Environment installation was found.  Implementing Java Runtime Environment optimizations."

		#region Logging for Java Runtime Environment Revert Actions
		New-Item -Path "$RevertApps\JRE\Generic VDI Settings" -Force -ErrorAction SilentlyContinue -Verbose
		$RevertJREGenVDI = "$RevertApps\JRE\Generic VDI Settings"
		#endregion Logging for Java Runtime Environment Revert Actions

		#region Java Runtime Environment Generic VDI Optimizations
		Write-Progress -Activity "Implementing Java Runtime Environment Generic VDI Optimizations" -Id 2041 -ParentId 204 -PercentComplete 0
		$JREGenVDIOpsCounter = 0
		$JREGenVDIOps = "4"

		$Key = "HKLM:\SOFTWARE\WOW6432Node\JavaSoft\Java Update\Policy"
		If (-not(Test-Path $Key)) {
			New-Item -Path $Key -Force -ErrorAction SilentlyContinue -Verbose
		}
		$ValueName = "EnableAutoUpdateCheck"
		$ValueType = "DWord"
		$ActualValue = (Get-ItemProperty $Key).$ValueName
		$DesiredValue = "0"
		If ($ActualValue -ne $DesiredValue) {
			"$(Get-TimeStamp)		$ValueName Actual Value does not equal Desired Value.  Capturing Actual Value and then implementing Desired Value."
			Set-ItemProperty -Path "$RevertJREGenVDI" -Name $ValueName -Type $ValueType -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
			Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
		}
		Else {
			"$(Get-TimeStamp)		$ValueName Actual Name matches Desired Value.  Neither Capturing Actual Value nor changing Desired Value."
		}
		"-----------------------------------------------------------------------"
		$JREGenVDIOpsCounter++
		Write-Progress -Activity "Implementing Java Runtime Environment Generic VDI Optimizations" -Id 2041 -ParentId 204 -PercentComplete (($JREGenVDIOpsCounter / $JREGenVDIOps) * 100)
		$ValueName = "EnableJavaUpdate"
		$ValueType = "DWord"
		$DesiredValue = "0"
		If (($Key).$ValueName) {
			$ActualValue = (Get-ItemProperty $Key).$ValueName
			If ($ActualValue -ne $DesiredValue) {
				"$(Get-TimeStamp)		$ValueName Actual Value does not equal Desired Value.  Capturing Actual Value and then implementing Desired Value."
				Set-ItemProperty -Path $RevertJREGenVDI -Name $ValueName -Type $ValueType -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
				Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
			}
			Else {
				"$(Get-TimeStamp)		$ValueName Actual Name matches Desired Value.  Neither Capturing Actual Value nor changing Desired Value."
			}
		}
		If (-not($Key).$ValueName) {
			"$(Get-TimeStamp)		$ValueName Actual Value does not exist.  Capturing and then implementing Desired Value."
			$ActualValue = "DNE"
			$ValueType = "String"
			Set-ItemProperty -Path $RevertJREGenVDI -Name $ValueName -Type $ValueType -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
			Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
		}
		"-----------------------------------------------------------------------"
		$JREGenVDIOpsCounter++
		Write-Progress -Activity "Implementing Java Runtime Environment Generic VDI Optimizations" -Id 2041 -ParentId 204 -PercentComplete (($JREGenVDIOpsCounter / $JREGenVDIOps) * 100)
		$ValueName = "NotifyDownload"
		$ValueType = "DWord"
		$DesiredValue = "0"
		If (($Key).$ValueName) {
			$ActualValue = (Get-ItemProperty $Key).$ValueName
			If ($ActualValue -ne $DesiredValue) {
				"$(Get-TimeStamp)		$ValueName Actual Value does not equal Desired Value.  Capturing Actual Value and then implementing Desired Value."
				Set-ItemProperty -Path $RevertJREGenVDI -Name $ValueName -Type $ValueType -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
				Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
			}
			Else {
				"$(Get-TimeStamp)		$ValueName Actual Name matches Desired Value.  Neither Capturing Actual Value nor changing Desired Value."
			}
		}
		If (-not($Key).$ValueName) {
			"$(Get-TimeStamp)		$ValueName Actual Value does not exist.  Capturing and then implementing Desired Value."
			$ActualValue = "DNE"
			$ValueType = "String"
			Set-ItemProperty -Path $RevertJREGenVDI -Name $ValueName -Type $ValueType -Value $ActualValue -ErrorAction SilentlyContinue -Verbose
			Set-ItemProperty -Path $Key -Name $ValueName -Type $ValueType -Value $DesiredValue -ErrorAction SilentlyContinue -Verbose
		}
		"-----------------------------------------------------------------------"
		$JREGenVDIOpsCounter++
		Write-Progress -Activity "Implementing Java Runtime Environment Generic VDI Optimizations" -Id 2041 -ParentId 204 -PercentComplete (($JREGenVDIOpsCounter / $JREGenVDIOps) * 100)
		$Key = “HKLM:\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Run”
		$ValueName = “SunJavaUpdateSched”
		If ((Get-ItemProperty $Key).PSObject.Properties.Name -contains $ValueName) {
			Remove-ItemProperty -Path $Key -Name $ValueName -ErrorAction SilentlyContinue -Verbose
		}
		"$(Get-TimeStamp)		$ValueName Run Key Optimized."
		"-----------------------------------------------------------------------"
		$JREGenVDIOpsCounter++
		Write-Progress -Activity "Implementing Java Runtime Environment Generic VDI Optimizations" -Id 2041 -ParentId 204 -PercentComplete 100 -Completed
		
		Write-Progress -Activity "Optimizing Java Runtime Environment" -Id 204 -ParentId 20 -PercentComplete 100 -Completed
		"$(Get-TimeStamp)		End Of Implementing"
		"					Java Runtime Environment Generic VDI Optimizations."
		"-----------------------------------------------------------------------"
		#region Java Runtime Environment Generic VDI Optimizations
	}
	<#
		Removes the Run Value for Updating Java
		Remove-ItemProperty -Path “HKLM:\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Run” -Name “SunJavaUpdateSched”

		Disables Java Auto Update Check in the Java Policy registry location
		Set-ItemProperty -Path "HKLM:\SOFTWARE\WOW6432Node\JavaSoft\Java Update\Policy" -Name "EnableAutoUpdateCheck" -Type "DWord" -Value 0

		Disables Java Updates in the Java Policy registry location
		Set-ItemProperty -Path "HKLM:\SOFTWARE\WOW6432Node\JavaSoft\Java Update\Policy" -Name "EnableJavaUpdate" -Type "DWord" -Value 0

		Disables Java Download Notification in the Java Policy registry location
		Set-ItemProperty -Path "HKLM:\SOFTWARE\WOW6432Node\JavaSoft\Java Update\Policy" -Name "NotifyDownload" -Type "DWord" -Value 0
	#>
}
If ($A -eq "Revert") {
	"$(Get-TimeStamp)		Reverting Application $App Optimizations is not currently supported."
}
$AppOpsCounter++
If ($A -ne "Revert") {
	Write-Progress -Activity "Implementing Application Optimizations" -Id 20 -ParentId 0 -PercentComplete (($AppOpsCounter / $Apps) * 100)
}
If ($A -eq "Revert") {
	Write-Progress -Activity "Reverting Application Optimizations" -Id 21 -ParentId 1 -PercentComplete (($AppOpsCounter / $Apps) * 100)
}
#endregion Java Runtime Environment v8.x Optimizations

$OPsCounter++
If ($A -ne "Revert") {
	Write-Progress -Activity "Implementing Windows Optimizations" -Id 0 -PercentComplete (($OpsCounter / $Ops) * 100)
}
If ($A -eq "Revert") {
	Write-Progress -Activity "Reverting Windows Optimizations" -Id 1 -PercentComplete (($OpsCounter / $Ops) * 100)
}

#region Microsoft Teams Optimizations
<#
	Microsoft
	Teams
	Optimizations
	
	Per-Machine
	Installation
	Only
#>
$App = "Microsoft Teams"
If ($A -ne "Revert") {
	If ((Get-ItemProperty "HKLM:\SOFTWARE\Microsoft\Teams" -ErrorAction SilentlyContinue).PSObject.Properties.Name -contains "IsWVDEnvironment") {
		#region Logging for Microsoft Teams Revert Actions
		New-Item -Path "$RevertApps\MSTeams\Generic VDI Settings" -Force -ErrorAction SilentlyContinue -Verbose
		$RevertMSTeamsGenVDI = "$RevertApps\MSTeams\Generic VDI Settings"
		#endregion Logging for Java Runtime Environment Revert Actions
		
		#region Microsoft Teams Generic VDI Optimizations
		Write-Progress -Activity "Optimizing Microsoft Teams" -Id 205 -ParentId 20 -PercentComplete 0
		"$(Get-TimeStamp)		Microsoft Teams Installed.  Optimizing Microsoft Teams."
		If ((Get-ItemProperty “HKLM:\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Run”).PSObject.Properties.Name -contains "TeamsMachineInstaller") {
			Remove-ItemProperty -Path “HKLM:\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Run” -Name “TeamsMachineInstaller” -Verbose
			"$(Get-TimeStamp)		Microsoft Teams Per-Machine Run Key Optimized."
		}
		If ((Get-ItemProperty “HKLM:\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Run”).PSObject.Properties.Name -contains "Teams") {
			Remove-ItemProperty -Path “HKLM:\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Run” -Name “Teams” -Verbose
			"$(Get-TimeStamp)		Microsoft Teams Per-Machine Run Key Optimized."
		}
		Write-Progress -Activity "Optimizing Microsoft Teams" -Id 205 -ParentId 20 -PercentComplete 100 -Completed
		"$(Get-TimeStamp)		End Of Implementing"
		"					Microsoft Teams Optimizations."
		"-----------------------------------------------------------------------"
		#endregion Microsoft Teams Generic VDI Optimizations
	}
}
If ($A -eq "Revert") {
	"$(Get-TimeStamp)		Reverting Application $App Optimizations is not currently supported."
}
$AppOpsCounter++
If ($A -ne "Revert") {
	Write-Progress -Activity "Implementing Application Optimizations" -Id 20 -ParentId 0 -PercentComplete (($AppOpsCounter / $Apps) * 100)
}
If ($A -eq "Revert") {
	Write-Progress -Activity "Reverting Application Optimizations" -Id 21 -ParentId 1 -PercentComplete (($AppOpsCounter / $Apps) * 100)
}
#endregion Microsoft Teams Optimizations

$OPsCounter++
If ($A -ne "Revert") {
	Write-Progress -Activity "Implementing Windows Optimizations" -Id 0 -PercentComplete (($OpsCounter / $Ops) * 100)
	Write-Progress -Activity "Implementing Application Optimizations" -Id 20 -ParentId 0 -PercentComplete 100 -Completed
	"$(Get-TimeStamp)		End Of Implementing"	
}
If ($A -eq "Revert") {
	Write-Progress -Activity "Reverting Windows Optimizations" -Id 1 -PercentComplete (($OpsCounter / $Ops) * 100)
	Write-Progress -Activity "Reverting Application Optimizations" -Id 21 -ParentId 1 -PercentComplete 100 -Completed
	"$(Get-TimeStamp)		End Of Reverting"
}
"					$OSMajorVersion $OSMinorVersion"
"					Active Setup Optimizations."
"-----------------------------------------------------------------------"
#region Stop Application Optimization Script Timer
$AppScriptElapsedMins = $AppScriptStopWatch.Elapsed.Minutes
$AppScriptElapsedSecs = $AppScriptStopWatch.Elapsed.Seconds
$AppScriptStopWatch.Stop()
#endregion Stop Application Optimization Script Timer
#endregion Application Optimizations

$OpsCounter++
Write-Progress -Activity "Windows Optimizations" -Id 0 -PercentComplete (($OpsCounter / $Ops) * 100)

#region Generic OS Optimizations
<#
	Generic
	Operating System
	Optimizations
#>
#region Start Generic OS Optimization Script Timer
$GenOSScriptStopWatch = [System.Diagnostics.Stopwatch]::StartNew()
#endregion Start Generic OS Optimization Script Timer
$GenOSOpsCounter = 0
$GenOSOps = 10
If ($A -ne "Revert") {
	Write-Progress -Activity "Implementing Generic Windows OS Optimizations" -Id 30 -ParentId 0 -PercentComplete 0
	"$(Get-TimeStamp)		Beginning Of Implementing"
}
If ($A -eq "Revert") {
	Write-Progress -Activity "Reverting Generic Windows OS Optimizations" -Id 31 -ParentId 1 -PercentComplete 0
	"$(Get-TimeStamp)		Beginning Of Reverting"
}
"					Generic Operating Systems Optimizations."
"-----------------------------------------------------------------------"

#region Local File Cleanup
<#
	Local File Cleanup
#>
If ($A -ne "Revert") {
	Write-Progress -Activity "Implementing Local Windows OS File Cleanup" -Id 301 -ParentId 30 -PercentComplete 0
	"$(Get-TimeStamp)		Local File Cleanup Optimizations Started."
}
If ($A -eq "Revert") {
	Write-Progress -Activity "Reverting Local Windows OS File Cleanup" -Id 311 -ParentId 31 -PercentComplete 0
}
If ($A -ne "Revert") {
	Write-Progress -Activity "Implementing Microsoft Cleanup Tool Optimizations." -Id 3011 -ParentId 301 -PercentComplete 0
	$CleanMgr = @(
		"Active Setup Temp Folders",
		"BranchCache",
		"D3D Shader Cache",
		"Delivery Optimization Files",
		"Diagnostic Data Viewer database files",
		"Downloaded Program Files",
		"Internet Cache Files",
		"Language Pack",
		"Old ChkDsk Files",
		"Recycle Bin",
		"RetailDemo Offline Content",
		"Setup Log Files",
		"System error memory dump files",
		"System error minidump files",
		"Temporary Files",
		"Thumbnail Cache",
		"Update Cleanup",
		"User file versions",
		"Windows Defender",
		"Windows Error Reporting Files"
	)
	ForEach ($CleanMgr in $CleanMgr) {
		Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\VolumeCaches\$CleanMgr" -Name "StateFlags0001" -Value 2 -Type "DWord"
	}
	Start-Process "CleanMgr" -ArgumentList "/sagerun:1" -Wait
	"$(Get-TimeStamp)		CleanMgr optimizations implemented.  CleanMgr logs are kept at '$env:SystemRoot\System32\LogFiles\setupcln'"
	Write-Progress -Activity "Implementing Microsoft Cleanup Tool Optimizations." -Id 3011 -ParentId 301 -PercentComplete 100 -Completed
}
If ($A -eq "Revert") {
	"$(Get-TimeStamp)		CleanMgr optimizations can not be reverted."
}
If ($A -ne "Revert") {
	Write-Progress -Activity "Implementing Local Windows OS File Cleanup" -Id 301 -ParentId 30 -PercentComplete 50
}
If ($A -eq "Revert") {
	Write-Progress -Activity "Reverting Local Windows OS File Cleanup" -Id 311 -ParentId 31 -PercentComplete 50
}
$GenOSOpsCounter++
If ($A -ne "Revert") {
	Write-Progress -Activity "Implementing Generic Windows OS Optimizations" -Id 30 -ParentId 0 -PercentComplete (($GenOSOpsCounter / $GenOSOps) * 100)
}
If ($A -eq "Revert") {
	Write-Progress -Activity "Reverting Generic Windows OS Optimizations" -Id 31 -ParentId 1 -PercentComplete (($GenOSOpsCounter / $GenOSOps) * 100)
}
If ($A -ne "Revert") {
	$IEFolders = Get-ItemProperty "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders"
	$IECookies = $IEFolders.Cookies
	$IECache = $IEFolders.Cache
	$IEHistory = $IEFolders.History
	$Paths = @(
		"$IECookies",
		"$IECache",
		"$IEHistory",
		"C:\Windows\Temp\*",
		"C:\windows\Prefetch\*",
		"C:\windows\SoftwareDistribution\Download\*",
		"$env:LOCALAPPDATA\Temp\*"
	)
	$Exclusions = @(
		"Costura",
		"ProfileUnity",
		"FXSAPIDebugLogFile*",
		"FXSTIFFDebugLogFile*"
	)
	ForEach ($Path in $Paths) {
		If ($Path -eq "C:\Windows\Temp\*") {
			Get-ChildItem -path $Path -Exclude $Exclusions | Remove-Item -Force -Recurse -ErrorAction SilentlyContinue -Verbose
		}
		If ($Path -ne "C:\Windows\Temp\*") {
			Get-ChildItem -path $Path | Remove-Item -Force -Recurse -ErrorAction SilentlyContinue -Verbose
		}
		"-----------------------------------------------------------------------"
	}
	Write-Progress -Activity "Implementing Local Windows OS File Cleanup" -Id 301 -ParentId 30 -PercentComplete 100 -Completed
}
If ($A -eq "Revert") {
	"$(Get-TimeStamp)		Local File Cleanup actions are not revertable."
	Write-Progress -Activity "Reverting Local Windows OS File Cleanup" -Id 311 -ParentId 31 -PercentComplete 100 -Completed
}
$GenOSOpsCounter++
If ($A -ne "Revert") {
	Write-Progress -Activity "Implementing Generic Windows OS Optimizations" -Id 30 -ParentId 0 -PercentComplete (($GenOSOpsCounter / $GenOSOps) * 100)
	"$(Get-TimeStamp)		End Of Implementing"
}
If ($A -eq "Revert") {
	Write-Progress -Activity "Reverting Generic Windows OS Optimizations" -Id 31 -ParentId 1 -PercentComplete (($GenOSOpsCounter / $GenOSOps) * 100)
	"$(Get-TimeStamp)		End Of Reverting"
}
"					$OSMajorVersion $OSMinorVersion"
"					Local File Cleanup Optimizations."
"-----------------------------------------------------------------------"
$OpsCounter++
If ($A -ne "Revert") {
	Write-Progress -Activity "Implementing Windows Optimizations" -Id 0 -PercentComplete (($OpsCounter / $Ops) * 100)
}
If ($A -eq "Revert") {
	Write-Progress -Activity "Reverting Windows Optimizations" -Id 1 -PercentComplete (($OpsCounter / $Ops) * 100)
}
#endregion Local File Cleanup

#region Storage Optimizations
<#
	Storage
	Optimizations
#>
If ($A -ne "Revert") {
	Write-Progress -Activity "Implementing Storage Optimizations" -Id 302 -ParentId 30 -PercentComplete 0
	"$(Get-TimeStamp)		End Of Implementing"
}
If ($A -eq "Revert") {
	Write-Progress -Activity "Reverting Storage Optimizations" -Id 312 -ParentId 31 -PercentComplete 0
	"$(Get-TimeStamp)		End Of Reverting"
}
"					$OSMajorVersion $OSMinorVersion"
"					Storage Optimizations."
"-----------------------------------------------------------------------"
<#
	The below portion of the script runs a defrag of the hard drive
	If you are using an SSD drive, this portion is unnecessary
	https://www.crucial.com/articles/about-ssd/should-you-defrag-an-ssd
	If this is a Virtual Machine using an underlying Three Tier or HCI infrastructure, this portion is unnecessary
	https://blogs.vmware.com/vsphere/2011/09/should-i-defrag-my-guest-os.html
	If you are using an HDD on a physical machine or a local Virtual Machine, this portion will be helpful
	In the latter case, please enable the following section
#>
<#
Set-Service defragsvc -StartupType Automatic -ErrorAction SilentlyContinue -Verbose
Start-Service defragsvc -ErrorAction SilentlyContinue -Verbose
defrag c: /U /V -Verbose
"$(Get-TimeStamp)		Defrag Complete."
Stop-Service defragsvc -Force -ErrorAction SilentlyContinue -Verbose
Set-Service defragsvc -StartupType Disabled -ErrorAction SilentlyContinue -Verbose
#>
If ($A -ne "Revert") {
	Write-Progress -Activity "Implementing Storage Optimizations" -Id 302 -ParentId 30 -PercentComplete 33
}
If ($A -eq "Revert") {
	Write-Progress -Activity "Reverting Storage Optimizations" -Id 312 -ParentId 31 -PercentComplete 33
}
If ($A -ne "Revert") {
	vssadmin delete shadows /All /Quiet
	"$(Get-TimeStamp)		Volume Shadow Copies Deleted."
}
If ($A -eq "Revert") {
	"$(Get-TimeStamp)		Volume Shadow Copies deletion actions are not revertable."
}
If ($A -ne "Revert") {
	Write-Progress -Activity "Implementing Storage Optimizations" -Id 302 -ParentId 30 -PercentComplete 66
}
If ($A -eq "Revert") {
	Write-Progress -Activity "Reverting Storage Optimizations" -Id 312 -ParentId 31 -PercentComplete 66
}
If ($A -ne "Revert") {
	If ((Get-Partition).Where({$_.Type -eq "Unknown"})) {
		"$(Get-TimeStamp)		Recovery Partition Found."
		(Get-Partition).Where({$_.type -eq "unknown"}) | Remove-Partition -confirm:$false -Verbose
		"$(Get-TimeStamp)		Recovery Partition Removed."
	}
	Else {
		"$(Get-TimeStamp)		No Recovery Partition Found."
		
	}
}
If ($A -eq "Revert") {
	"$(Get-TimeStamp)		Recovery Partition Removal is not revertable."
}
If ($A -ne "Revert") {
	Write-Progress -Activity "Implementing Storage Optimizations" -Id 302 -ParentId 30 -PercentComplete 100 -Completed
}
If ($A -eq "Revert") {
	Write-Progress -Activity "Reverting Storage Optimizations" -Id 312 -ParentId 31 -PercentComplete 100 -Completed
}
$GenOSOpsCounter++
If ($A -ne "Revert") {
	Write-Progress -Activity "Implementing Generic Windows OS Optimizations" -Id 30 -ParentId 0 -PercentComplete (($GenOSOpsCounter / $GenOSOps) * 100)
	"$(Get-TimeStamp)		End Of Implementing"
}
If ($A -eq "Revert") {
	Write-Progress -Activity "Reverting Generic Windows OS Optimizations" -Id 31 -ParentId 1 -PercentComplete (($GenOSOpsCounter / $GenOSOps) * 100)
	"$(Get-TimeStamp)		End Of Reverting"
}
"					$OSMajorVersion $OSMinorVersion"
"					Storage Optimizations."
"-----------------------------------------------------------------------"
$OpsCounter++
If ($A -ne "Revert") {
	Write-Progress -Activity "Implementing Windows Optimizations" -Id 0 -PercentComplete (($OpsCounter / $Ops) * 100)
}
If ($A -eq "Revert") {
	Write-Progress -Activity "Reverting Windows Optimizations" -Id 1 -PercentComplete (($OpsCounter / $Ops) * 100)
}
#endregion Storage Optimizations

#region .Net Runtime Updates
<#
	.Net Runtime
	Updates
#>
If ($A -ne "Revert") {
	Write-Progress -Activity "Implementing .NET Updates" -Id 303 -ParentId 30 -PercentComplete 0
	"$(Get-TimeStamp)		Beginning Of Implementing"
}
If ($A -eq "Revert") {
	"$(Get-TimeStamp)		Beginning Of Reverting"
}
"					$OSMajorVersion $OSMinorVersion"
"					.NET Optimizations."
"-----------------------------------------------------------------------"
If ($A -ne "Revert") {
	Write-Progress -Activity "Implementing 32bit .NET Updates" -Id 3031 -ParentId 303 -PercentComplete 0
	"$(Get-TimeStamp)		Starting 32bit .NET Updates."
	"$(Get-TimeStamp)		Executing Queued Items."
	& 'C:\Windows\microsoft.net\framework\v4.0.30319\ngen.exe' executeQueuedItems -Verbose
	"$(Get-TimeStamp)		Running 32bit .NET Updates."
	& 'C:\Windows\microsoft.net\framework\v4.0.30319\ngen.exe' update /force -Verbose
	Write-Progress -Activity "Implementing 32bit .NET Updates" -Id 3031 -ParentId 303 -PercentComplete 100 -Completed
	"$(Get-TimeStamp)		32bit .NET Updates Complete."
	Write-Progress -Activity "Implementing .NET Updates" -Id 303 -ParentId 30 -PercentComplete 50
	Write-Progress -Activity "Implementing 64bit .NET Updates" -Id 3032 -ParentId 303 -PercentComplete 0
	"$(Get-TimeStamp)		Starting 64bit .NET Updates."
	"$(Get-TimeStamp)		Executing Queued Items"
	& 'C:\Windows\microsoft.net\framework64\v4.0.30319\ngen.exe' executeQueuedItems -Verbose
	"$(Get-TimeStamp)		Running Updates"
	& 'C:\Windows\microsoft.net\framework64\v4.0.30319\ngen.exe' update /force -Verbose
	Write-Progress -Activity "Implementing 64bit .NET Updates" -Id 3032 -ParentId 303 -PercentComplete 100 -Completed
	"$(Get-TimeStamp)		Implementing 64bit .NET Updates Complete."
	"$(Get-TimeStamp)		Implementing .NET Updates Complete."
	Write-Progress -Activity "Implementing .NET Updates" -Id 303 -ParentId 30 -PercentComplete 100 -Completed
}
If ($A -eq "Revert") {
	"$(Get-TimeStamp)		.NET Updates can not be reverted."
}
"-----------------------------------------------------------------------"
$GenOSOpsCounter++
$GenOSOpsCounter++
If ($A -ne "Revert") {
	Write-Progress -Activity "Implementing Generic Windows OS Optimizations" -Id 30 -ParentId 0 -PercentComplete (($GenOSOpsCounter / $GenOSOps) * 100)
	"$(Get-TimeStamp)		End Of Implementing"
}
If ($A -eq "Revert") {
	Write-Progress -Activity "Reverting Generic Windows OS Optimizations" -Id 31 -ParentId 1 -PercentComplete (($GenOSOpsCounter / $GenOSOps) * 100)
	"$(Get-TimeStamp)		End Of Reverting"
}
"					$OSMajorVersion $OSMinorVersion"
"					32bit and 64bit .NET Updates."
"-----------------------------------------------------------------------"
$OpsCounter++
If ($A -ne "Revert") {
	Write-Progress -Activity "Implementing Windows Optimizations" -Id 0 -PercentComplete (($OpsCounter / $Ops) * 100)
}
If ($A -eq "Revert") {
	Write-Progress -Activity "Reverting Windows Optimizations" -Id 1 -PercentComplete (($OpsCounter / $Ops) * 100)
}
#endregion .Net Runtime Updates

#region Housekeeping Optimizations
<#
	Housekeeping Optimizations
#>
If ($A -ne "Revert") {
	Write-Progress -Activity "Implementing Housekeeping Tasks" -Id 304 -ParentId 30 -PercentComplete 0
	"$(Get-TimeStamp)		Beginning Of Implementing"
}
If ($A -eq "Revert") {
	"$(Get-TimeStamp)		Beginning Of Reverting"
}
"					$OSMajorVersion $OSMinorVersion"
"					Housekeeping Optimizations."
"-----------------------------------------------------------------------"
If ($A -ne "Revert") {
	Write-Progress -Activity "Implementing Housekeeping Tasks" -Id 304 -ParentId 30 -PercentComplete 0
	"$(Get-TimeStamp)		Implementing Housekeeping Optimizations."
	ipconfig /flushdns
	"$(Get-TimeStamp)		DNS flushed."
	Write-Progress -Activity "Housekeeping Tasks" -Id 304 -ParentId 30 -PercentComplete 33
	netsh interface ip delete arpcache
	"$(Get-TimeStamp)		ARP Cache deleted."
	Write-Progress -Activity "Housekeeping Tasks" -Id 304 -ParentId 30 -PercentComplete 66
	Get-EventLog -LogName * | ForEach {Clear-EventLog $_.Log}
	"$(Get-TimeStamp)		Event Logs cleared."
	Write-Progress -Activity "Housekeeping Tasks" -Id 304 -ParentId 30 -PercentComplete 100 -Completed
	"$(Get-TimeStamp)		Implementing Housekeeping Optimizations Complete."
}
If ($A -eq "Revert") {
	"$(Get-TimeStamp)		Housekeeping Optimizations can not be reverted."
}
"-----------------------------------------------------------------------"
$GenOSOpsCounter++
$GenOSOpsCounter++
$GenOSOpsCounter++
If ($A -ne "Revert") {
	Write-Progress -Activity "Implementing Generic Windows OS Optimizations" -Id 30 -ParentId 0 -PercentComplete (($GenOSOpsCounter / $GenOSOps) * 100)
	"$(Get-TimeStamp)		End Of Implementing"
}
If ($A -eq "Revert") {
	Write-Progress -Activity "Reverting Generic Windows OS Optimizations" -Id 31 -ParentId 1 -PercentComplete (($GenOSOpsCounter / $GenOSOps) * 100)
	"$(Get-TimeStamp)		End Of Reverting"
}
"					$OSMajorVersion $OSMinorVersion"
"					Housekeeping Optimizations."
"-----------------------------------------------------------------------"
#endregion Housekeeping Tasks
#region Stop Generic OS Optimization Script Timer
$GenOSScriptElapsedMins = $GenOSScriptStopWatch.Elapsed.Minutes
$GenOSScriptElapsedSecs = $GenOSScriptStopWatch.Elapsed.Seconds
$GenOSScriptStopWatch.Stop()
#endregion Stop Generic OS Optimization Script Timer

If ($A -ne "Revert") {
	Write-Progress -Activity "Implementing Generic Windows OS Optimizations" -Id 30 -ParentId 0 -PercentComplete 100 -Completed
}
If ($A -eq "Revert") {
	Write-Progress -Activity "Reverting Generic Windows OS Optimizations" -Id 31 -ParentId 1 -PercentComplete 100 -Completed
}
$OpsCounter++
If ($A -ne "Revert") {
	Write-Progress -Activity "Implementing Windows Optimizations" -Id 0 -PercentComplete (($OpsCounter / $Ops) * 100)
}
If ($A -eq "Revert") {
	Write-Progress -Activity "Reverting Windows Optimizations" -Id 1 -PercentComplete (($OpsCounter / $Ops) * 100)
}
#endregion Generic OS Optimizations

Write-Progress -Activity "Windows Optimizations" -Id 0 "Overall Progress" -PercentComplete 100 -Completed

"$(Get-TimeStamp)		WOSTT Optimizations Complete."
"-----------------------------------------------------------------------"

#region Restart Messaging
If ($R -eq "Reboot" -or $R -eq "Restart") {
	"$(Get-TimeStamp)		You have chosen to have this script automatically restart this machine, if necessary."
	If ($RestartRequiredStatus -eq "True") {
		"$(Get-TimeStamp)		Your OS requires a restart."
		"$(Get-TimeStamp)		Kicking off restart."
	}
	If ($RestartRequiredStatus -eq "False") {
		"$(Get-TimeStamp)		Your OS does not require a restart."
	}
	"-----------------------------------------------------------------------"
}
If ($R -ne "Reboot" -or $R -ne "Restart") {
	"$(Get-TimeStamp)		You have chosen not to automatically restart this machine."
	If ($RestartRequiredStatus -eq "True") {
		"$(Get-TimeStamp)		The OS requires a restart."
	}
	If ($RestartRequiredStatus -eq "False") {
		"$(Get-TimeStamp)		The OS does not require a restart."
	}
	"-----------------------------------------------------------------------"
}
#endregion Restart Messaging

#region Stop Script Timer

If ($RunType -eq "Normal") {
	$RunType = "complete"
}
ElseIf ($RunType -eq "Revert") {
	$RunType = "revert"
}

$FullScriptElapsedMins = $FullScriptStopWatch.Elapsed.Minutes
$FullScriptElapsedSecs = $FullScriptStopWatch.Elapsed.Seconds
"$(Get-TimeStamp)		WOSTT took $DISMScriptElapsedMins minutes and $DISMScriptElapsedSecs seconds to $RunType DISM Optimizations."
"$(Get-TimeStamp)		WOSTT took $UWPScriptElapsedMins minutes and $UWPScriptElapsedSecs seconds to $RunType UWP Application Optimizations."
"$(Get-TimeStamp)		WOSTT took $OFScriptElapsedMins minutes and $OFScriptElapsedSecs seconds to $RunType Optional Feature Optimizations."
"$(Get-TimeStamp)		WOSTT took $SerScriptElapsedMins minutes and $SerScriptElapsedSecs seconds to $RunType Service Optimizations."
"$(Get-TimeStamp)		WOSTT took $STScriptElapsedMins minutes and $STScriptElapsedSecs seconds to $RunType Scheduled Task Optimizations."
"$(Get-TimeStamp)		WOSTT took $ASScriptElapsedMins minutes and $ASScriptElapsedSecs seconds to $RunType Active Setup Optimizations."
"$(Get-TimeStamp)		WOSTT took $ALScriptElapsedMins minutes and $ALScriptElapsedSecs seconds to $RunType Autologger Optimizations."
"$(Get-TimeStamp)		WOSTT took $GenVDIScriptElapsedMins minutes and $GenVDIScriptElapsedSecs seconds to $RunType Generic VDI Optimizations."
"$(Get-TimeStamp)		WOSTT took $AppScriptElapsedMins minutes and $AppScriptElapsedSecs seconds to $RunType Application Optimizations."
"$(Get-TimeStamp)		WOSTT took $GenOSScriptElapsedMins minutes and $GenOSScriptElapsedSecs seconds to $RunType Generic OS Optimizations."
"$(Get-TimeStamp)		WOSTT took $FullScriptElapsedMins minutes and $FullScriptElapsedSecs seconds to $RunType."
"-----------------------------------------------------------------------"

$FullScriptStopWatch.Stop()

#endregion Stop Script Timer

Stop-Transcript

#region Restart
<#
	Restart Request
#>
If ($R -eq "Reboot" -or $R -eq "Restart") {
	If ($RestartRequiredStatus -eq "True") {
		Restart-Computer -Force
	}
}
#endregion Restart